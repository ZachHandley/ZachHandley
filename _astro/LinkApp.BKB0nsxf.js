import{q as ep,h as jt,a as ha,i as Zw,b as Xu,c as a0,H as Lv,r as Hd,s as sa,d as Nr,U as Hg,e as $c,f as fr,m as hu,g as Yr,j as Ki,k as o0,l as l0,n as c0,o as Sl,p as aa,t as oa,u as Yw,E as Pv,v as jw,w as E,x as zn,I as am,y as ZM,z as Gd,A as Jw,B as Kw,C as Qw,D as Iv,F as Dv,G as eT,J as YM,K as tT,L as nT,M as jM,N as ml,O as JM,P as KM,Q as iT,R as Bi,S as rT,T as sT,V as aT,W as Gg,X as oT,Y as lT,Z as cT,_ as QM,$ as _n,a0 as uT,a1 as hT,a2 as dT,a3 as fT,a4 as pT,a5 as mT,a6 as eb,a7 as gT,a8 as vT,a9 as tp,aa as Nv,ab as _T,ac as yT,ad as fi,ae as Wg,af as nn,ag as xT,ah as MT,ai as $g,aj as tb,ak as nb,al as Rt,am as bT,an as Ne,ao as ST,ap as wT,aq as Xg,ar as TT,as as ET,at as AT,au as hr,av as CT,aw as ib,ax as RT,ay as LT,az as PT,aA as IT,aB as hc,aC as Hi,aD as yi,aE as rb,aF as np,aG as xt,aH as An,aI as Xe,aJ as Re,aK as Bt,aL as we,aM as Cn,aN as bt,aO as Qt,aP as ut,aQ as $t,aR as He,aS as DT,aT as NT,aU as $r,aV as FT,aW as OT,aX as UT}from"./snippet.DGwB_Q4A.js";const BT="5";typeof window<"u"&&((window.__svelte??={}).v??=new Set).add(BT);function zT(r,e){if(e){const t=document.body;r.autofocus=!0,ep(()=>{document.activeElement===t&&r.focus()})}}const om=0,lh=1,lm=2;function _r(r,e,t,n,i){jt&&ha();var s=r,a=Zw(),o=Sl,l=Hg,c,u,h,d=(a?fr:hu)(void 0),f=(a?fr:hu)(void 0),p=!1;function v(m,_){p=!0,_&&(o0(g),l0(g),c0(o));try{m===om&&t&&(c?aa(c):c=Yr(()=>t(s))),m===lh&&n&&(u?aa(u):u=Yr(()=>n(s,d))),m===lm&&i&&(h?aa(h):h=Yr(()=>i(s,f))),m!==om&&c&&oa(c,()=>c=null),m!==lh&&u&&oa(u,()=>u=null),m!==lm&&h&&oa(h,()=>h=null)}finally{_&&(c0(null),l0(null),o0(null),Yw())}}var g=Xu(()=>{if(l===(l=e()))return;let m=jt&&a0(l)===(s.data===Lv);if(m&&(s=Hd(),sa(s),Nr(!1),m=!0),a0(l)){var _=l;p=!1,_.then(x=>{_===l&&($c(d,x),v(lh,!0))},x=>{if(_===l&&($c(f,x),v(lm,!0),!i))throw f.v}),jt?t&&(c=Yr(()=>t(s))):ep(()=>{p||v(om,!0)})}else $c(d,l),v(lh,!1);return m&&Nr(!0),()=>l=Hg});jt&&(s=Ki)}function yn(r,e,[t,n]=[0,0]){jt&&t===0&&ha();var i=r,s=null,a=null,o=Hg,l=t>0?Pv:0,c=!1;const u=(d,f=!0)=>{c=!0,h(f,d)},h=(d,f)=>{if(o===(o=d))return;let p=!1;if(jt&&n!==-1){if(t===0){const g=i.data;g===jw?n=0:g===Lv?n=1/0:(n=parseInt(g.substring(1)),n!==n&&(n=o?1/0:-1))}const v=n>t;!!o===v&&(i=Hd(),sa(i),Nr(!1),p=!0,n=-1)}o?(s?aa(s):f&&(s=Yr(()=>f(i))),a&&oa(a,()=>{a=null})):(a?aa(a):f&&(a=Yr(()=>f(i,[t+1,n]))),s&&oa(s,()=>{s=null})),p&&Nr(!0)};Xu(()=>{c=!1,e(u),c||h(null,null)},l),jt&&(i=Ki)}function Ei(r,e){return e}function kT(r,e,t,n){for(var i=[],s=e.length,a=0;a<s;a++)Jw(e[a].e,i,!0);var o=s>0&&i.length===0&&t!==null;if(o){var l=t.parentNode;Kw(l),l.append(t),n.clear(),Ks(r,e[0].prev,e[s-1].next)}Qw(i,()=>{for(var c=0;c<s;c++){var u=e[c];o||(n.delete(u.k),Ks(r,u.prev,u.next)),YM(u.e,!o)}})}function pi(r,e,t,n,i,s=null){var a=r,o={flags:e,items:new Map,first:null},l=(e&KM)!==0;if(l){var c=r;a=jt?sa(ml(c)):c.appendChild(JM())}jt&&ha();var u=null,h=!1,d=zn(()=>{var f=t();return tT(f)?f:f==null?[]:ZM(f)});Xu(()=>{var f=E(d),p=f.length;if(h&&p===0)return;h=p===0;let v=!1;if(jt){var g=a.data===Lv;g!==(p===0)&&(a=Hd(),sa(a),Nr(!1),v=!0)}if(jt){for(var m=null,_,x=0;x<p;x++){if(Ki.nodeType===8&&Ki.data===nT){a=Ki,v=!0,Nr(!1);break}var y=f[x],b=n(y,x);_=sb(Ki,o,m,null,y,b,x,i,e,t),o.items.set(b,_),m=_}p>0&&sa(Hd())}jt||VT(f,o,a,i,e,n,t),s!==null&&(p===0?u?aa(u):u=Yr(()=>s(a)):u!==null&&oa(u,()=>{u=null})),v&&Nr(!0),E(d)}),jt&&(a=Ki)}function VT(r,e,t,n,i,s,a){var o=(i&iT)!==0,l=(i&(Dv|Iv))!==0,c=r.length,u=e.items,h=e.first,d=h,f,p=null,v,g=[],m=[],_,x,y,b;if(o)for(b=0;b<c;b+=1)_=r[b],x=s(_,b),y=u.get(x),y!==void 0&&(y.a?.measure(),(v??=new Set).add(y));for(b=0;b<c;b+=1){if(_=r[b],x=s(_,b),y=u.get(x),y===void 0){var M=d?d.e.nodes_start:t;p=sb(M,e,p,p===null?e.first:p.next,_,x,b,n,i,a),u.set(x,p),g=[],m=[],d=p.next;continue}if(l&&HT(y,_,b,i),(y.e.f&am)!==0&&(aa(y.e),o&&(y.a?.unfix(),(v??=new Set).delete(y))),y!==d){if(f!==void 0&&f.has(y)){if(g.length<m.length){var w=m[0],C;p=w.prev;var T=g[0],S=g[g.length-1];for(C=0;C<g.length;C+=1)u0(g[C],w,t);for(C=0;C<m.length;C+=1)f.delete(m[C]);Ks(e,T.prev,S.next),Ks(e,p,T),Ks(e,S,w),d=w,p=S,b-=1,g=[],m=[]}else f.delete(y),u0(y,d,t),Ks(e,y.prev,y.next),Ks(e,y,p===null?e.first:p.next),Ks(e,p,y),p=y;continue}for(g=[],m=[];d!==null&&d.k!==x;)(d.e.f&am)===0&&(f??=new Set).add(d),m.push(d),d=d.next;if(d===null)continue;y=d}g.push(y),p=y,d=y.next}if(d!==null||f!==void 0){for(var R=f===void 0?[]:ZM(f);d!==null;)(d.e.f&am)===0&&R.push(d),d=d.next;var H=R.length;if(H>0){var D=(i&KM)!==0&&c===0?t:null;if(o){for(b=0;b<H;b+=1)R[b].a?.measure();for(b=0;b<H;b+=1)R[b].a?.fix()}kT(e,R,D,u)}}o&&ep(()=>{if(v!==void 0)for(y of v)y.a?.apply()}),Gd.first=e.first&&e.first.e,Gd.last=p&&p.e}function HT(r,e,t,n){(n&Dv)!==0&&$c(r.v,e),(n&Iv)!==0?$c(r.i,t):r.i=t}function sb(r,e,t,n,i,s,a,o,l,c){var u=(l&Dv)!==0,h=(l&eT)===0,d=u?h?hu(i):fr(i):i,f=(l&Iv)===0?a:fr(a),p={i:f,v:d,k:s,a:null,e:null,prev:t,next:n};try{return p.e=Yr(()=>o(r,d,f,c),jt),p.e.prev=t&&t.e,p.e.next=n&&n.e,t===null?e.first=p:(t.next=p,t.e.next=p.e),n!==null&&(n.prev=p,n.e.prev=p.e),p}finally{}}function u0(r,e,t){for(var n=r.next?r.next.e.nodes_start:t,i=e?e.e.nodes_start:t,s=r.e.nodes_start;s!==n;){var a=jM(s);i.before(s),s=a}}function Ks(r,e,t){e===null?r.first=t:(e.next=t,e.e.next=t&&t.e),t!==null&&(t.prev=e,t.e.prev=e&&e.e)}function h0(r,e,t=!1,n=!1,i=!1){var s=r,a="";Bi(()=>{var o=Gd;if(a===(a=e()??"")){jt&&ha();return}if(o.nodes_start!==null&&(rT(o.nodes_start,o.nodes_end),o.nodes_start=o.nodes_end=null),a!==""){if(jt){Ki.data;for(var l=ha(),c=l;l!==null&&(l.nodeType!==8||l.data!=="");)c=l,l=jM(l);if(l===null)throw sT(),aT;Gg(Ki,c),s=sa(l);return}var u=a+"";t?u=`<svg>${u}</svg>`:n&&(u=`<math>${u}</math>`);var h=oT(u);if((t||n)&&(h=ml(h)),Gg(ml(h),h.lastChild),t||n)for(;ml(h);)s.before(ml(h));else s.before(h)}})}function Fe(r,e,t){jt&&ha();var n=r,i,s;Xu(()=>{i!==(i=e())&&(s&&(oa(s),s=null),i&&(s=Yr(()=>t(n,i))))},Pv),jt&&(n=Ki)}function GT(r,e,t,n,i,s){let a=jt;jt&&ha();var o,l,c=null;jt&&Ki.nodeType===1&&(c=Ki,ha());var u=jt?Ki:r,h;Xu(()=>{const d=e()||null;var f=d==="svg"?lT:null;d!==o&&(h&&(d===null?oa(h,()=>{h=null,l=null}):d===l?aa(h):YM(h)),d&&d!==l&&(h=Yr(()=>{if(c=jt?c:f?document.createElementNS(f,d):document.createElement(d),Gg(c,c),n){jt&&cT(d)&&c.append(document.createComment(""));var p=jt?ml(c):c.appendChild(JM());jt&&(p===null?Nr(!1):sa(p)),n(c,p)}Gd.nodes_end=c,u.before(c)})),o=d,o&&(l=o))},Pv),a&&(Nr(!0),sa(u))}function WT(r,e,t){QM(()=>{var n=_n(()=>e(r,t?.())||{});if(n?.destroy)return()=>n.destroy()})}function ab(r){var e,t,n="";if(typeof r=="string"||typeof r=="number")n+=r;else if(typeof r=="object")if(Array.isArray(r)){var i=r.length;for(e=0;e<i;e++)r[e]&&(t=ab(r[e]))&&(n&&(n+=" "),n+=t)}else for(t in r)r[t]&&(n&&(n+=" "),n+=t);return n}function $T(){for(var r,e,t=0,n="",i=arguments.length;t<i;t++)(r=arguments[t])&&(e=ab(r))&&(n&&(n+=" "),n+=e);return n}function qg(r){return typeof r=="object"?$T(r):r??""}const d0=[...` 	
\r\fÂ \v\uFEFF`];function XT(r,e,t){var n=r==null?"":""+r;if(t){for(var i in t)if(t[i])n=n?n+" "+i:i;else if(n.length)for(var s=i.length,a=0;(a=n.indexOf(i,a))>=0;){var o=a+s;(a===0||d0.includes(n[a-1]))&&(o===n.length||d0.includes(n[o]))?n=(a===0?"":n.substring(0,a))+n.substring(o+1):a=o}}return n===""?null:n}function f0(r,e=!1){var t=e?" !important;":";",n="";for(var i in r){var s=r[i];s!=null&&s!==""&&(n+=" "+i+": "+s+t)}return n}function cm(r){return r[0]!=="-"||r[1]!=="-"?r.toLowerCase():r}function qT(r,e){if(e){var t="",n,i;if(Array.isArray(e)?(n=e[0],i=e[1]):n=e,r){r=String(r).replaceAll(/\s*\/\*.*?\*\/\s*/g,"").trim();var s=!1,a=0,o=!1,l=[];n&&l.push(...Object.keys(n).map(cm)),i&&l.push(...Object.keys(i).map(cm));var c=0,u=-1;const v=r.length;for(var h=0;h<v;h++){var d=r[h];if(o?d==="/"&&r[h-1]==="*"&&(o=!1):s?s===d&&(s=!1):d==="/"&&r[h+1]==="*"?o=!0:d==='"'||d==="'"?s=d:d==="("?a++:d===")"&&a--,!o&&s===!1&&a===0){if(d===":"&&u===-1)u=h;else if(d===";"||h===v-1){if(u!==-1){var f=cm(r.substring(c,u).trim());if(!l.includes(f)){d!==";"&&h++;var p=r.substring(c,h).trim();t+=" "+p+";"}}c=h+1,u=-1}}}}return n&&(t+=f0(n)),i&&(t+=f0(i,!0)),t=t.trim(),t===""?null:t}return r==null?null:String(r)}function Zg(r,e,t,n,i,s){var a=r.__className;if(jt||a!==t||a===void 0){var o=XT(t,n,s);(!jt||o!==r.getAttribute("class"))&&(o==null?r.removeAttribute("class"):e?r.className=o:r.setAttribute("class",o)),r.__className=t}else if(s&&i!==s)for(var l in s){var c=!!s[l];(i==null||c!==!!i[l])&&r.classList.toggle(l,c)}return s}function um(r,e={},t,n){for(var i in t){var s=t[i];e[i]!==s&&(t[i]==null?r.style.removeProperty(i):r.style.setProperty(i,s,n))}}function ws(r,e,t,n){var i=r.__style;if(jt||i!==e){var s=qT(e,n);(!jt||s!==r.getAttribute("style"))&&(s==null?r.removeAttribute("style"):r.style.cssText=s),r.__style=e}else n&&(Array.isArray(n)?(um(r,t?.[0],n[0]),um(r,t?.[1],n[1],"important")):um(r,t,n));return n}const dc=Symbol("class"),ul=Symbol("style"),ob=Symbol("is custom element"),lb=Symbol("is html");function ZT(r,e){e?r.hasAttribute("selected")||r.setAttribute("selected",""):r.removeAttribute("selected")}function Ms(r,e,t,n){var i=cb(r);jt&&(i[e]=r.getAttribute(e),e==="src"||e==="srcset"||e==="href"&&r.nodeName==="LINK")||i[e]!==(i[e]=t)&&(e==="loading"&&(r[uT]=t),t==null?r.removeAttribute(e):typeof t!="string"&&ub(r).includes(e)?r[e]=t:r.setAttribute(e,t))}function YT(r,e,t,n,i=!1){var s=cb(r),a=s[ob],o=!s[lb];let l=jt&&a;l&&Nr(!1);var c=e||{},u=r.tagName==="OPTION";for(var h in e)h in t||(t[h]=null);t.class?t.class=qg(t.class):t[dc]&&(t.class=null),t[ul]&&(t.style??=null);var d=ub(r);for(const x in t){let y=t[x];if(u&&x==="value"&&y==null){r.value=r.__value="",c[x]=y;continue}if(x==="class"){var f=r.namespaceURI==="http://www.w3.org/1999/xhtml";Zg(r,f,y,n,e?.[dc],t[dc]),c[x]=y,c[dc]=t[dc];continue}if(x==="style"){ws(r,y,e?.[ul],t[ul]),c[x]=y,c[ul]=t[ul];continue}var p=c[x];if(y!==p){c[x]=y;var v=x[0]+x[1];if(v!=="$$")if(v==="on"){const b={},M="$$"+x;let w=x.slice(2);var g=vT(w);if(pT(w)&&(w=w.slice(0,-7),b.capture=!0),!g&&p){if(y!=null)continue;r.removeEventListener(w,c[M],b),c[M]=null}if(y!=null)if(g)r[`__${w}`]=y,eb([w]);else{let C=function(T){c[x].call(this,T)};c[M]=mT(w,r,C,b)}else g&&(r[`__${w}`]=void 0)}else if(x==="style")Ms(r,x,y);else if(x==="autofocus")zT(r,!!y);else if(!a&&(x==="__value"||x==="value"&&y!=null))r.value=r.__value=y;else if(x==="selected"&&u)ZT(r,y);else{var m=x;o||(m=gT(m));var _=m==="defaultValue"||m==="defaultChecked";if(y==null&&!a&&!_)if(s[x]=null,m==="value"||m==="checked"){let b=r;const M=e===void 0;if(m==="value"){let w=b.defaultValue;b.removeAttribute(m),b.defaultValue=w,b.value=b.__value=M?w:null}else{let w=b.defaultChecked;b.removeAttribute(m),b.defaultChecked=w,b.checked=M?w:!1}}else r.removeAttribute(x);else _||d.includes(m)&&(a||typeof y!="string")?r[m]=y:typeof y!="function"&&Ms(r,m,y)}}}return l&&Nr(!0),c}function cb(r){return r.__attributes??={[ob]:r.nodeName.includes("-"),[lb]:r.namespaceURI===hT}}var p0=new Map;function ub(r){var e=p0.get(r.nodeName);if(e)return e;p0.set(r.nodeName,e=[]);for(var t,n=r,i=Element.prototype;i!==n;){t=fT(n);for(var s in t)t[s].set&&e.push(s);n=dT(n)}return e}const jT=()=>performance.now(),Pr={tick:r=>requestAnimationFrame(r),now:()=>jT(),tasks:new Set};function hb(){const r=Pr.now();Pr.tasks.forEach(e=>{e.c(r)||(Pr.tasks.delete(e),e.f())}),Pr.tasks.size!==0&&Pr.tick(hb)}function db(r){let e;return Pr.tasks.size===0&&Pr.tick(hb),{promise:new Promise(t=>{Pr.tasks.add(e={c:r,f:t})}),abort(){Pr.tasks.delete(e)}}}function m0(r,e){return r===e||r?.[Nv]===e}function Xc(r={},e,t,n){return QM(()=>{var i,s;return tp(()=>{i=s,s=[],_n(()=>{r!==t(...s)&&(e(r,...s),i&&m0(t(...i),r)&&e(null,...i))})}),()=>{ep(()=>{s&&m0(t(...s),r)&&e(null,...s)})}}),r}function g0(r,e){_T(window,["resize"],()=>yT(()=>e(window[r])))}function JT(r=!1){const e=Sl,t=e.l.u;if(!t)return;let n=()=>MT(e.s);if(r){let i=0,s={};const a=$g(()=>{let o=!1;const l=e.s;for(const c in l)l[c]!==s[c]&&(s[c]=l[c],o=!0);return o&&i++,i});n=()=>E(a)}t.b.length&&fi(()=>{v0(e,n),Wg(t.b)}),nn(()=>{const i=_n(()=>t.m.map(xT));return()=>{for(const s of i)typeof s=="function"&&s()}}),t.a.length&&nn(()=>{v0(e,n),Wg(t.a)})}function v0(r,e){if(r.l.s)for(const t of r.l.s)E(t);e()}function ql(r){Sl===null&&tb(),nb&&Sl.l!==null?KT(Sl).m.push(r):nn(()=>{const e=_n(r);if(typeof e=="function")return e})}function Gi(r){Sl===null&&tb(),ql(()=>()=>_n(r))}function KT(r){var e=r.l;return e.u??={a:[],b:[],m:[]}}function Fv(r,e,t){if(r==null)return e(void 0),t&&t(void 0),Rt;const n=_n(()=>r.subscribe(e,t));return n.unsubscribe?()=>n.unsubscribe():n}const Eo=[];function ip(r,e){return{subscribe:ki(r,e).subscribe}}function ki(r,e=Rt){let t=null;const n=new Set;function i(o){if(bT(r,o)&&(r=o,t)){const l=!Eo.length;for(const c of n)c[1](),Eo.push(c,r);if(l){for(let c=0;c<Eo.length;c+=2)Eo[c][0](Eo[c+1]);Eo.length=0}}}function s(o){i(o(r))}function a(o,l=Rt){const c=[o,l];return n.add(c),n.size===1&&(t=e(i,s)||Rt),o(r),()=>{n.delete(c),n.size===0&&t&&(t(),t=null)}}return{set:i,update:s,subscribe:a}}function Zl(r,e,t){const n=!Array.isArray(r),i=n?[r]:r;if(!i.every(Boolean))throw new Error("derived() expects stores as input, got a falsy value");const s=e.length<2;return ip(t,(a,o)=>{let l=!1;const c=[];let u=0,h=Rt;const d=()=>{if(u)return;h();const p=e(n?c[0]:c,a,o);s?a(p):h=typeof p=="function"?p:Rt},f=i.map((p,v)=>Fv(p,g=>{c[v]=g,u&=~(1<<v),l&&d()},()=>{u|=1<<v}));return l=!0,d(),function(){Wg(f),h(),l=!1}})}function Wd(r){let e;return Fv(r,t=>e=t)(),e}let ch=!1,Yg=Symbol();function As(r,e,t){const n=t[e]??={store:null,source:hu(void 0),unsubscribe:Rt};if(n.store!==r&&!(Yg in t))if(n.unsubscribe(),n.store=r??null,r==null)n.source.v=void 0,n.unsubscribe=Rt;else{var i=!0;n.unsubscribe=Fv(r,s=>{i?n.source.v=s:Ne(n.source,s)}),i=!1}return r&&Yg in t?Wd(r):E(n.source)}function Yl(){const r={};function e(){ST(()=>{for(var t in r)r[t].unsubscribe();wT(r,Yg,{enumerable:!1,value:!0})})}return[r,e]}function Za(r,e,t){return r.set(t),e}function QT(r){var e=ch;try{return ch=!1,[r(),ch]}finally{ch=e}}const eE={get(r,e){if(!r.exclude.includes(e))return r.props[e]},set(r,e){return!1},getOwnPropertyDescriptor(r,e){if(!r.exclude.includes(e)&&e in r.props)return{enumerable:!0,configurable:!0,value:r.props[e]}},has(r,e){return r.exclude.includes(e)?!1:e in r.props},ownKeys(r){return Reflect.ownKeys(r.props).filter(e=>!r.exclude.includes(e))}};function ti(r,e,t){return new Proxy({props:r,exclude:e},eE)}const tE={get(r,e){let t=r.props.length;for(;t--;){let n=r.props[t];if(hc(n)&&(n=n()),typeof n=="object"&&n!==null&&e in n)return n[e]}},set(r,e,t){let n=r.props.length;for(;n--;){let i=r.props[n];hc(i)&&(i=i());const s=Xg(i,e);if(s&&s.set)return s.set(t),!0}return!1},getOwnPropertyDescriptor(r,e){let t=r.props.length;for(;t--;){let n=r.props[t];if(hc(n)&&(n=n()),typeof n=="object"&&n!==null&&e in n){const i=Xg(n,e);return i&&!i.configurable&&(i.configurable=!0),i}}},has(r,e){if(e===Nv||e===ib)return!1;for(let t of r.props)if(hc(t)&&(t=t()),t!=null&&e in t)return!0;return!1},ownKeys(r){const e=[];for(let t of r.props){hc(t)&&(t=t());for(const n in t)e.includes(n)||e.push(n)}return e}};function xi(...r){return new Proxy({props:r},tE)}function _0(r){return r.ctx?.d??!1}function st(r,e,t,n){var i=(t&RT)!==0,s=!nb||(t&PT)!==0,a=(t&CT)!==0,o=(t&LT)!==0,l=!1,c;a?[c,l]=QT(()=>r[e]):c=r[e];var u=Nv in r||ib in r,h=a&&(Xg(r,e)?.set??(u&&e in r&&(M=>r[e]=M)))||void 0,d=n,f=!0,p=!1,v=()=>(p=!0,f&&(f=!1,o?d=_n(n):d=n),d);c===void 0&&n!==void 0&&(h&&s&&TT(),c=v(),h&&h(c));var g;if(s)g=()=>{var M=r[e];return M===void 0?v():(f=!0,p=!1,M)};else{var m=(i?$g:zn)(()=>r[e]);m.f|=IT,g=()=>{var M=E(m);return M!==void 0&&(d=void 0),M===void 0?d:M}}if((t&ET)===0)return g;if(h){var _=r.$$legacy;return function(M,w){return arguments.length>0?((!s||!w||_||l)&&h(w?g():M),M):g()}}var x=!1,y=hu(c),b=$g(()=>{var M=g(),w=E(y);return x?(x=!1,w):y.v=M});return a&&E(b),i||(b.equals=AT),function(M,w){if(arguments.length>0){const C=w?E(b):s&&a?hr(M):M;if(!b.equals(C)){if(x=!0,Ne(y,C),p&&d!==void 0&&(d=C),_0(b))return M;_n(()=>E(b))}return M}return _0(b)?b.v:E(b)}}const y0=(r,e)=>{if(r===e)return!0;if(!r||!e)return!1;const t=r.length;if(e.length!==t)return!1;for(let n=0;n<t;n++)if(r[n]!==e[n])return!1;return!0},nE=()=>{const r=[],n={items:r,remember:(i,s)=>{for(let o=0;o<r.length;o++){const l=r[o];if(y0(s,l.keys)&&l.promise)return l.promise}const a={promise:i(),keys:s};return r.push(a),a.promise},clear:i=>{for(let s=0;s<r.length;s++){const a=r[s];if(y0(i,a.keys)){r.splice(s,1);return}}}};return Hi("threlte-cache",n),n},iE=()=>{const r=yi("threlte-cache");if(!r)throw new Error("No cache found. The cache can only be used in a child component to <Canvas>.");return r};/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const rp="176",rE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},sE={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},fb=0,jg=1,pb=2,aE=3,oE=0,Ov=1,qc=2,Xr=3,es=0,gi=1,Qi=2,jr=0,Cs=1,Rl=2,$d=3,Xd=4,mb=5,ta=100,gb=101,vb=102,_b=103,yb=104,xb=200,Mb=201,bb=202,Sb=203,qd=204,Zd=205,wb=206,Tb=207,Eb=208,Ab=209,Cb=210,Rb=211,Lb=212,Pb=213,Ib=214,Yd=0,jd=1,Jd=2,so=3,Kd=4,Qd=5,ef=6,tf=7,qu=0,Db=1,Nb=2,Rs=0,Fb=1,Ob=2,Ub=3,Bb=4,zb=5,nf=6,kb=7,Jg="attached",Vb="detached",sp=300,Ps=301,da=302,du=303,fu=304,jl=306,fa=1e3,tr=1001,Ll=1002,Wn=1003,ap=1004,lE=1004,Ya=1005,cE=1005,xn=1006,wl=1007,uE=1007,nr=1008,hE=1008,Ur=1009,Uv=1010,Bv=1011,Pl=1012,op=1013,Is=1014,zi=1015,_o=1016,lp=1017,cp=1018,Il=1020,zv=35902,kv=1021,Vv=1022,Ri=1023,Dl=1026,Nl=1027,up=1028,Zu=1029,Hv=1030,hp=1031,dE=1032,dp=1033,Zc=33776,Yc=33777,jc=33778,Jc=33779,rf=35840,sf=35841,af=35842,of=35843,lf=36196,cf=37492,uf=37496,hf=37808,df=37809,ff=37810,pf=37811,mf=37812,gf=37813,vf=37814,_f=37815,yf=37816,xf=37817,Mf=37818,bf=37819,Sf=37820,wf=37821,Kc=36492,Tf=36494,Ef=36495,Gv=36283,Af=36284,Cf=36285,Rf=36286,Hb=2200,Gb=2201,Wb=2202,Fl=2300,Ol=2301,Fd=2302,ja=2400,Ja=2401,pu=2402,fp=2500,Wv=2501,$b=0,$v=1,Lf=2,Xb=3200,qb=3201,fE=3202,pE=3203,xa=0,Zb=1,bs="",In="srgb",ai="srgb-linear",mu="linear",sn="srgb",mE=0,Wa=7680,gE=7681,vE=7682,_E=7683,yE=34055,xE=34056,ME=5386,bE=512,SE=513,wE=514,TE=515,EE=516,AE=517,CE=518,Kg=519,Yb=512,jb=513,Jb=514,Xv=515,Kb=516,Qb=517,eS=518,tS=519,gu=35044,RE=35048,LE=35040,PE=35045,IE=35049,DE=35041,NE=35046,FE=35050,OE=35042,UE="100",Qg="300 es",pr=2e3,vu=2001,BE={COMPUTE:"compute",RENDER:"render"},zE={PERSPECTIVE:"perspective",LINEAR:"linear",FLAT:"flat"},kE={NORMAL:"normal",CENTROID:"centroid",SAMPLE:"sample",FLAT_FIRST:"flat first",FLAT_EITHER:"flat either"};let ss=class{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){const n=this._listeners;return n===void 0?!1:n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){const n=this._listeners;if(n===void 0)return;const i=n[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){const t=this._listeners;if(t===void 0)return;const n=t[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,a=i.length;s<a;s++)i[s].call(this,e);e.target=null}}};const ci=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let x0=1234567;const Qa=Math.PI/180,Ul=180/Math.PI;function rr(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(ci[r&255]+ci[r>>8&255]+ci[r>>16&255]+ci[r>>24&255]+"-"+ci[e&255]+ci[e>>8&255]+"-"+ci[e>>16&15|64]+ci[e>>24&255]+"-"+ci[t&63|128]+ci[t>>8&255]+"-"+ci[t>>16&255]+ci[t>>24&255]+ci[n&255]+ci[n>>8&255]+ci[n>>16&255]+ci[n>>24&255]).toLowerCase()}function Ct(r,e,t){return Math.max(e,Math.min(t,r))}function qv(r,e){return(r%e+e)%e}function VE(r,e,t,n,i){return n+(r-e)*(i-n)/(t-e)}function HE(r,e,t){return r!==e?(t-r)/(e-r):0}function Qc(r,e,t){return(1-t)*r+t*e}function GE(r,e,t,n){return Qc(r,e,1-Math.exp(-t*n))}function WE(r,e=1){return e-Math.abs(qv(r,e*2)-e)}function $E(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*(3-2*r))}function XE(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*r*(r*(r*6-15)+10))}function qE(r,e){return r+Math.floor(Math.random()*(e-r+1))}function ZE(r,e){return r+Math.random()*(e-r)}function YE(r){return r*(.5-Math.random())}function jE(r){r!==void 0&&(x0=r);let e=x0+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function JE(r){return r*Qa}function KE(r){return r*Ul}function QE(r){return(r&r-1)===0&&r!==0}function eA(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function tA(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function nA(r,e,t,n,i){const s=Math.cos,a=Math.sin,o=s(t/2),l=a(t/2),c=s((e+n)/2),u=a((e+n)/2),h=s((e-n)/2),d=a((e-n)/2),f=s((n-e)/2),p=a((n-e)/2);switch(i){case"XYX":r.set(o*u,l*h,l*d,o*c);break;case"YZY":r.set(l*d,o*u,l*h,o*c);break;case"ZXZ":r.set(l*h,l*d,o*u,o*c);break;case"XZX":r.set(o*u,l*p,l*f,o*c);break;case"YXY":r.set(l*f,o*u,l*p,o*c);break;case"ZYZ":r.set(l*p,l*f,o*u,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Ai(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function It(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const er={DEG2RAD:Qa,RAD2DEG:Ul,generateUUID:rr,clamp:Ct,euclideanModulo:qv,mapLinear:VE,inverseLerp:HE,lerp:Qc,damp:GE,pingpong:WE,smoothstep:$E,smootherstep:XE,randInt:qE,randFloat:ZE,randFloatSpread:YE,seededRandom:jE,degToRad:JE,radToDeg:KE,isPowerOfTwo:QE,ceilPowerOfTwo:eA,floorPowerOfTwo:tA,setQuaternionFromProperEuler:nA,normalize:It,denormalize:Ai};let Pe=class nS{constructor(e=0,t=0){nS.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Ct(this.x,e.x,t.x),this.y=Ct(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=Ct(this.x,e,t),this.y=Ct(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Ct(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,a=this.y-e.y;return this.x=s*n-a*i+e.x,this.y=s*i+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Nt=class iS{constructor(e,t,n,i,s,a,o,l,c){iS.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,a,o,l,c)}set(e,t,n,i,s,a,o,l,c){const u=this.elements;return u[0]=e,u[1]=i,u[2]=o,u[3]=t,u[4]=s,u[5]=l,u[6]=n,u[7]=a,u[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,a=n[0],o=n[3],l=n[6],c=n[1],u=n[4],h=n[7],d=n[2],f=n[5],p=n[8],v=i[0],g=i[3],m=i[6],_=i[1],x=i[4],y=i[7],b=i[2],M=i[5],w=i[8];return s[0]=a*v+o*_+l*b,s[3]=a*g+o*x+l*M,s[6]=a*m+o*y+l*w,s[1]=c*v+u*_+h*b,s[4]=c*g+u*x+h*M,s[7]=c*m+u*y+h*w,s[2]=d*v+f*_+p*b,s[5]=d*g+f*x+p*M,s[8]=d*m+f*y+p*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8];return t*a*u-t*o*c-n*s*u+n*o*l+i*s*c-i*a*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8],h=u*a-o*c,d=o*l-u*s,f=c*s-a*l,p=t*h+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const v=1/p;return e[0]=h*v,e[1]=(i*c-u*n)*v,e[2]=(o*n-i*a)*v,e[3]=d*v,e[4]=(u*t-i*l)*v,e[5]=(i*s-o*t)*v,e[6]=f*v,e[7]=(n*l-c*t)*v,e[8]=(a*t-n*s)*v,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,a,o){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*a+c*o)+a+e,-i*c,i*l,-i*(-c*a+l*o)+o+t,0,0,1),this}scale(e,t){return this.premultiply(hm.makeScale(e,t)),this}rotate(e){return this.premultiply(hm.makeRotation(-e)),this}translate(e,t){return this.premultiply(hm.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}};const hm=new Nt;function rS(r){for(let e=r.length-1;e>=0;--e)if(r[e]>=65535)return!0;return!1}const iA={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function gl(r,e){return new iA[r](e)}function _u(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function sS(){const r=_u("canvas");return r.style.display="block",r}const M0={};function Od(r){r in M0||(M0[r]=!0,console.warn(r))}function rA(r,e,t){return new Promise(function(n,i){function s(){switch(r.clientWaitSync(e,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:i();break;case r.TIMEOUT_EXPIRED:setTimeout(s,t);break;default:n()}}setTimeout(s,t)})}function sA(r){const e=r.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function aA(r){const e=r.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const b0=new Nt().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),S0=new Nt().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function oA(){const r={enabled:!0,workingColorSpace:ai,spaces:{},convert:function(i,s,a){return this.enabled===!1||s===a||!s||!a||(this.spaces[s].transfer===sn&&(i.r=Ls(i.r),i.g=Ls(i.g),i.b=Ls(i.b)),this.spaces[s].primaries!==this.spaces[a].primaries&&(i.applyMatrix3(this.spaces[s].toXYZ),i.applyMatrix3(this.spaces[a].fromXYZ)),this.spaces[a].transfer===sn&&(i.r=Tl(i.r),i.g=Tl(i.g),i.b=Tl(i.b))),i},fromWorkingColorSpace:function(i,s){return this.convert(i,this.workingColorSpace,s)},toWorkingColorSpace:function(i,s){return this.convert(i,s,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===bs?mu:this.spaces[i].transfer},getLuminanceCoefficients:function(i,s=this.workingColorSpace){return i.fromArray(this.spaces[s].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,s,a){return i.copy(this.spaces[s].toXYZ).multiply(this.spaces[a].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return r.define({[ai]:{primaries:e,whitePoint:n,transfer:mu,toXYZ:b0,fromXYZ:S0,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:In},outputColorSpaceConfig:{drawingBufferColorSpace:In}},[In]:{primaries:e,whitePoint:n,transfer:sn,toXYZ:b0,fromXYZ:S0,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:In}}}),r}const Ut=oA();function Ls(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Tl(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let Ao,aS=class{static getDataURL(e,t="image/png"){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let n;if(e instanceof HTMLCanvasElement)n=e;else{Ao===void 0&&(Ao=_u("canvas")),Ao.width=e.width,Ao.height=e.height;const i=Ao.getContext("2d");e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0,e.width,e.height),n=Ao}return n.toDataURL(t)}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=_u("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),s=i.data;for(let a=0;a<s.length;a++)s[a]=Ls(s[a]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(Ls(t[n]/255)*255):t[n]=Ls(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}},lA=0;class ra{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:lA++}),this.uuid=rr(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let a=0,o=i.length;a<o;a++)i[a].isDataTexture?s.push(dm(i[a].image)):s.push(dm(i[a]))}else s=dm(i);n.url=s}return t||(e.images[this.uuid]=n),n}}function dm(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?aS.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let cA=0,Vn=class Ud extends ss{constructor(e=Ud.DEFAULT_IMAGE,t=Ud.DEFAULT_MAPPING,n=tr,i=tr,s=xn,a=nr,o=Ri,l=Ur,c=Ud.DEFAULT_ANISOTROPY,u=bs){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:cA++}),this.uuid=rr(),this.name="",this.source=new ra(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=a,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new Pe(0,0),this.repeat=new Pe(1,1),this.center=new Pe(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Nt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=u,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isTextureArray=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.isTextureArray=e.isTextureArray,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==sp)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case fa:e.x=e.x-Math.floor(e.x);break;case tr:e.x=e.x<0?0:1;break;case Ll:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case fa:e.y=e.y-Math.floor(e.y);break;case tr:e.y=e.y<0?0:1;break;case Ll:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}};Vn.DEFAULT_IMAGE=null;Vn.DEFAULT_MAPPING=sp;Vn.DEFAULT_ANISOTROPY=1;let Ht=class oS{constructor(e=0,t=0,n=0,i=1){oS.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*s,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*s,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*s,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*s,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],u=l[4],h=l[8],d=l[1],f=l[5],p=l[9],v=l[2],g=l[6],m=l[10];if(Math.abs(u-d)<.01&&Math.abs(h-v)<.01&&Math.abs(p-g)<.01){if(Math.abs(u+d)<.1&&Math.abs(h+v)<.1&&Math.abs(p+g)<.1&&Math.abs(c+f+m-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const x=(c+1)/2,y=(f+1)/2,b=(m+1)/2,M=(u+d)/4,w=(h+v)/4,C=(p+g)/4;return x>y&&x>b?x<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(x),i=M/n,s=w/n):y>b?y<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(y),n=M/i,s=C/i):b<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(b),n=w/s,i=C/s),this.set(n,i,s,t),this}let _=Math.sqrt((g-p)*(g-p)+(h-v)*(h-v)+(d-u)*(d-u));return Math.abs(_)<.001&&(_=1),this.x=(g-p)/_,this.y=(h-v)/_,this.z=(d-u)/_,this.w=Math.acos((c+f+m-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Ct(this.x,e.x,t.x),this.y=Ct(this.y,e.y,t.y),this.z=Ct(this.z,e.z,t.z),this.w=Ct(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=Ct(this.x,e,t),this.y=Ct(this.y,e,t),this.z=Ct(this.z,e,t),this.w=Ct(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}};class pp extends ss{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=n.depth?n.depth:1,this.scissor=new Ht(0,0,e,t),this.scissorTest=!1,this.viewport=new Ht(0,0,e,t);const i={width:e,height:t,depth:this.depth};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:xn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1,multiview:!1},n);const s=new Vn(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const a=n.count;for(let o=0;o<a;o++)this.textures[o]=s.clone(),this.textures[o].isRenderTargetTexture=!0,this.textures[o].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples,this.multiview=n.multiview}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=e,this.textures[i].image.height=t,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let t=0,n=e.textures.length;t<n;t++){this.textures[t]=e.textures[t].clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;const i=Object.assign({},e.textures[t].image);this.textures[t].source=new ra(i)}return this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}let ts=class extends pp{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}};class Yu extends Vn{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Wn,this.minFilter=Wn,this.wrapR=tr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class uA extends ts{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new Yu(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class mp extends Vn{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Wn,this.minFilter=Wn,this.wrapR=tr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class hA extends ts{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isWebGL3DRenderTarget=!0,this.depth=n,this.texture=new mp(null,e,t,n),this.texture.isRenderTargetTexture=!0}}let Dn=class{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,s,a,o){let l=n[i+0],c=n[i+1],u=n[i+2],h=n[i+3];const d=s[a+0],f=s[a+1],p=s[a+2],v=s[a+3];if(o===0){e[t+0]=l,e[t+1]=c,e[t+2]=u,e[t+3]=h;return}if(o===1){e[t+0]=d,e[t+1]=f,e[t+2]=p,e[t+3]=v;return}if(h!==v||l!==d||c!==f||u!==p){let g=1-o;const m=l*d+c*f+u*p+h*v,_=m>=0?1:-1,x=1-m*m;if(x>Number.EPSILON){const b=Math.sqrt(x),M=Math.atan2(b,m*_);g=Math.sin(g*M)/b,o=Math.sin(o*M)/b}const y=o*_;if(l=l*g+d*y,c=c*g+f*y,u=u*g+p*y,h=h*g+v*y,g===1-o){const b=1/Math.sqrt(l*l+c*c+u*u+h*h);l*=b,c*=b,u*=b,h*=b}}e[t]=l,e[t+1]=c,e[t+2]=u,e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,i,s,a){const o=n[i],l=n[i+1],c=n[i+2],u=n[i+3],h=s[a],d=s[a+1],f=s[a+2],p=s[a+3];return e[t]=o*p+u*h+l*f-c*d,e[t+1]=l*p+u*d+c*h-o*f,e[t+2]=c*p+u*f+o*d-l*h,e[t+3]=u*p-o*h-l*d-c*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,s=e._z,a=e._order,o=Math.cos,l=Math.sin,c=o(n/2),u=o(i/2),h=o(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(a){case"XYZ":this._x=d*u*h+c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h-d*f*p;break;case"YXZ":this._x=d*u*h+c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h+d*f*p;break;case"ZXY":this._x=d*u*h-c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h-d*f*p;break;case"ZYX":this._x=d*u*h-c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h+d*f*p;break;case"YZX":this._x=d*u*h+c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h-d*f*p;break;case"XZY":this._x=d*u*h-c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],a=t[1],o=t[5],l=t[9],c=t[2],u=t[6],h=t[10],d=n+o+h;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(u-l)*f,this._y=(s-c)*f,this._z=(a-i)*f}else if(n>o&&n>h){const f=2*Math.sqrt(1+n-o-h);this._w=(u-l)/f,this._x=.25*f,this._y=(i+a)/f,this._z=(s+c)/f}else if(o>h){const f=2*Math.sqrt(1+o-n-h);this._w=(s-c)/f,this._x=(i+a)/f,this._y=.25*f,this._z=(l+u)/f}else{const f=2*Math.sqrt(1+h-n-o);this._w=(a-i)/f,this._x=(s+c)/f,this._y=(l+u)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Ct(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,a=e._w,o=t._x,l=t._y,c=t._z,u=t._w;return this._x=n*u+a*o+i*c-s*l,this._y=i*u+a*l+s*o-n*c,this._z=s*u+a*c+n*l-i*o,this._w=a*u-n*o-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,a=this._w;let o=a*e._w+n*e._x+i*e._y+s*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=i,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const f=1-t;return this._w=f*a+t*this._w,this._x=f*n+t*this._x,this._y=f*i+t*this._y,this._z=f*s+t*this._z,this.normalize(),this}const c=Math.sqrt(l),u=Math.atan2(c,o),h=Math.sin((1-t)*u)/c,d=Math.sin(t*u)/c;return this._w=a*h+this._w*d,this._x=n*h+this._x*d,this._y=i*h+this._y*d,this._z=s*h+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),s*Math.sin(t),s*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},k=class lS{constructor(e=0,t=0,n=0){lS.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(w0.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(w0.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,a=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*a,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*a,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,a=e.y,o=e.z,l=e.w,c=2*(a*i-o*n),u=2*(o*t-s*i),h=2*(s*n-a*t);return this.x=t+l*c+a*h-o*u,this.y=n+l*u+o*c-s*h,this.z=i+l*h+s*u-a*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Ct(this.x,e.x,t.x),this.y=Ct(this.y,e.y,t.y),this.z=Ct(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=Ct(this.x,e,t),this.y=Ct(this.y,e,t),this.z=Ct(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,a=t.x,o=t.y,l=t.z;return this.x=i*l-s*o,this.y=s*a-n*l,this.z=n*o-i*a,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return fm.copy(this).projectOnVector(e),this.sub(fm)}reflect(e){return this.sub(fm.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Ct(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const fm=new k,w0=new Dn;let On=class{constructor(e=new k(1/0,1/0,1/0),t=new k(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(wr.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(wr.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=wr.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const s=n.getAttribute("position");if(t===!0&&s!==void 0&&e.isInstancedMesh!==!0)for(let a=0,o=s.count;a<o;a++)e.isMesh===!0?e.getVertexPosition(a,wr):wr.fromBufferAttribute(s,a),wr.applyMatrix4(e.matrixWorld),this.expandByPoint(wr);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),uh.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),uh.copy(n.boundingBox)),uh.applyMatrix4(e.matrixWorld),this.union(uh)}const i=e.children;for(let s=0,a=i.length;s<a;s++)this.expandByObject(i[s],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,wr),wr.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(fc),hh.subVectors(this.max,fc),Co.subVectors(e.a,fc),Ro.subVectors(e.b,fc),Lo.subVectors(e.c,fc),Os.subVectors(Ro,Co),Us.subVectors(Lo,Ro),Ea.subVectors(Co,Lo);let t=[0,-Os.z,Os.y,0,-Us.z,Us.y,0,-Ea.z,Ea.y,Os.z,0,-Os.x,Us.z,0,-Us.x,Ea.z,0,-Ea.x,-Os.y,Os.x,0,-Us.y,Us.x,0,-Ea.y,Ea.x,0];return!pm(t,Co,Ro,Lo,hh)||(t=[1,0,0,0,1,0,0,0,1],!pm(t,Co,Ro,Lo,hh))?!1:(dh.crossVectors(Os,Us),t=[dh.x,dh.y,dh.z],pm(t,Co,Ro,Lo,hh))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,wr).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(wr).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(os[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),os[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),os[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),os[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),os[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),os[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),os[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),os[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(os),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}};const os=[new k,new k,new k,new k,new k,new k,new k,new k],wr=new k,uh=new On,Co=new k,Ro=new k,Lo=new k,Os=new k,Us=new k,Ea=new k,fc=new k,hh=new k,dh=new k,Aa=new k;function pm(r,e,t,n,i){for(let s=0,a=r.length-3;s<=a;s+=3){Aa.fromArray(r,s);const o=i.x*Math.abs(Aa.x)+i.y*Math.abs(Aa.y)+i.z*Math.abs(Aa.z),l=e.dot(Aa),c=t.dot(Aa),u=n.dot(Aa);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>o)return!1}return!0}const dA=new On,pc=new k,mm=new k;let kn=class{constructor(e=new k,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):dA.setFromPoints(e).getCenter(n);let i=0;for(let s=0,a=e.length;s<a;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;pc.subVectors(e,this.center);const t=pc.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.addScaledVector(pc,i/n),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(mm.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(pc.copy(e.center).add(mm)),this.expandByPoint(pc.copy(e.center).sub(mm))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}};const ls=new k,gm=new k,fh=new k,Bs=new k,vm=new k,ph=new k,_m=new k;let yo=class{constructor(e=new k,t=new k(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ls)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ls.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ls.copy(this.origin).addScaledVector(this.direction,t),ls.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){gm.copy(e).add(t).multiplyScalar(.5),fh.copy(t).sub(e).normalize(),Bs.copy(this.origin).sub(gm);const s=e.distanceTo(t)*.5,a=-this.direction.dot(fh),o=Bs.dot(this.direction),l=-Bs.dot(fh),c=Bs.lengthSq(),u=Math.abs(1-a*a);let h,d,f,p;if(u>0)if(h=a*l-o,d=a*o-l,p=s*u,h>=0)if(d>=-p)if(d<=p){const v=1/u;h*=v,d*=v,f=h*(h+a*d+2*o)+d*(a*h+d+2*l)+c}else d=s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;else d=-s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;else d<=-p?(h=Math.max(0,-(-a*s+o)),d=h>0?-s:Math.min(Math.max(-s,-l),s),f=-h*h+d*(d+2*l)+c):d<=p?(h=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(h=Math.max(0,-(a*s+o)),d=h>0?s:Math.min(Math.max(-s,-l),s),f=-h*h+d*(d+2*l)+c);else d=a>0?-s:s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(gm).addScaledVector(fh,d),f}intersectSphere(e,t){ls.subVectors(e.center,this.origin);const n=ls.dot(this.direction),i=ls.dot(ls)-n*n,s=e.radius*e.radius;if(i>s)return null;const a=Math.sqrt(s-i),o=n-a,l=n+a;return l<0?null:o<0?this.at(l,t):this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,a,o,l;const c=1/this.direction.x,u=1/this.direction.y,h=1/this.direction.z,d=this.origin;return c>=0?(n=(e.min.x-d.x)*c,i=(e.max.x-d.x)*c):(n=(e.max.x-d.x)*c,i=(e.min.x-d.x)*c),u>=0?(s=(e.min.y-d.y)*u,a=(e.max.y-d.y)*u):(s=(e.max.y-d.y)*u,a=(e.min.y-d.y)*u),n>a||s>i||((s>n||isNaN(n))&&(n=s),(a<i||isNaN(i))&&(i=a),h>=0?(o=(e.min.z-d.z)*h,l=(e.max.z-d.z)*h):(o=(e.max.z-d.z)*h,l=(e.min.z-d.z)*h),n>l||o>i)||((o>n||n!==n)&&(n=o),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,ls)!==null}intersectTriangle(e,t,n,i,s){vm.subVectors(t,e),ph.subVectors(n,e),_m.crossVectors(vm,ph);let a=this.direction.dot(_m),o;if(a>0){if(i)return null;o=1}else if(a<0)o=-1,a=-a;else return null;Bs.subVectors(this.origin,e);const l=o*this.direction.dot(ph.crossVectors(Bs,ph));if(l<0)return null;const c=o*this.direction.dot(vm.cross(Bs));if(c<0||l+c>a)return null;const u=-o*Bs.dot(_m);return u<0?null:this.at(u/a,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},ft=class ev{constructor(e,t,n,i,s,a,o,l,c,u,h,d,f,p,v,g){ev.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,a,o,l,c,u,h,d,f,p,v,g)}set(e,t,n,i,s,a,o,l,c,u,h,d,f,p,v,g){const m=this.elements;return m[0]=e,m[4]=t,m[8]=n,m[12]=i,m[1]=s,m[5]=a,m[9]=o,m[13]=l,m[2]=c,m[6]=u,m[10]=h,m[14]=d,m[3]=f,m[7]=p,m[11]=v,m[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new ev().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Po.setFromMatrixColumn(e,0).length(),s=1/Po.setFromMatrixColumn(e,1).length(),a=1/Po.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,s=e.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(i),c=Math.sin(i),u=Math.cos(s),h=Math.sin(s);if(e.order==="XYZ"){const d=a*u,f=a*h,p=o*u,v=o*h;t[0]=l*u,t[4]=-l*h,t[8]=c,t[1]=f+p*c,t[5]=d-v*c,t[9]=-o*l,t[2]=v-d*c,t[6]=p+f*c,t[10]=a*l}else if(e.order==="YXZ"){const d=l*u,f=l*h,p=c*u,v=c*h;t[0]=d+v*o,t[4]=p*o-f,t[8]=a*c,t[1]=a*h,t[5]=a*u,t[9]=-o,t[2]=f*o-p,t[6]=v+d*o,t[10]=a*l}else if(e.order==="ZXY"){const d=l*u,f=l*h,p=c*u,v=c*h;t[0]=d-v*o,t[4]=-a*h,t[8]=p+f*o,t[1]=f+p*o,t[5]=a*u,t[9]=v-d*o,t[2]=-a*c,t[6]=o,t[10]=a*l}else if(e.order==="ZYX"){const d=a*u,f=a*h,p=o*u,v=o*h;t[0]=l*u,t[4]=p*c-f,t[8]=d*c+v,t[1]=l*h,t[5]=v*c+d,t[9]=f*c-p,t[2]=-c,t[6]=o*l,t[10]=a*l}else if(e.order==="YZX"){const d=a*l,f=a*c,p=o*l,v=o*c;t[0]=l*u,t[4]=v-d*h,t[8]=p*h+f,t[1]=h,t[5]=a*u,t[9]=-o*u,t[2]=-c*u,t[6]=f*h+p,t[10]=d-v*h}else if(e.order==="XZY"){const d=a*l,f=a*c,p=o*l,v=o*c;t[0]=l*u,t[4]=-h,t[8]=c*u,t[1]=d*h+v,t[5]=a*u,t[9]=f*h-p,t[2]=p*h-f,t[6]=o*u,t[10]=v*h+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(fA,e,pA)}lookAt(e,t,n){const i=this.elements;return Xi.subVectors(e,t),Xi.lengthSq()===0&&(Xi.z=1),Xi.normalize(),zs.crossVectors(n,Xi),zs.lengthSq()===0&&(Math.abs(n.z)===1?Xi.x+=1e-4:Xi.z+=1e-4,Xi.normalize(),zs.crossVectors(n,Xi)),zs.normalize(),mh.crossVectors(Xi,zs),i[0]=zs.x,i[4]=mh.x,i[8]=Xi.x,i[1]=zs.y,i[5]=mh.y,i[9]=Xi.y,i[2]=zs.z,i[6]=mh.z,i[10]=Xi.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,a=n[0],o=n[4],l=n[8],c=n[12],u=n[1],h=n[5],d=n[9],f=n[13],p=n[2],v=n[6],g=n[10],m=n[14],_=n[3],x=n[7],y=n[11],b=n[15],M=i[0],w=i[4],C=i[8],T=i[12],S=i[1],R=i[5],H=i[9],D=i[13],O=i[2],G=i[6],P=i[10],z=i[14],W=i[3],X=i[7],re=i[11],ne=i[15];return s[0]=a*M+o*S+l*O+c*W,s[4]=a*w+o*R+l*G+c*X,s[8]=a*C+o*H+l*P+c*re,s[12]=a*T+o*D+l*z+c*ne,s[1]=u*M+h*S+d*O+f*W,s[5]=u*w+h*R+d*G+f*X,s[9]=u*C+h*H+d*P+f*re,s[13]=u*T+h*D+d*z+f*ne,s[2]=p*M+v*S+g*O+m*W,s[6]=p*w+v*R+g*G+m*X,s[10]=p*C+v*H+g*P+m*re,s[14]=p*T+v*D+g*z+m*ne,s[3]=_*M+x*S+y*O+b*W,s[7]=_*w+x*R+y*G+b*X,s[11]=_*C+x*H+y*P+b*re,s[15]=_*T+x*D+y*z+b*ne,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],a=e[1],o=e[5],l=e[9],c=e[13],u=e[2],h=e[6],d=e[10],f=e[14],p=e[3],v=e[7],g=e[11],m=e[15];return p*(+s*l*h-i*c*h-s*o*d+n*c*d+i*o*f-n*l*f)+v*(+t*l*f-t*c*d+s*a*d-i*a*f+i*c*u-s*l*u)+g*(+t*c*h-t*o*f-s*a*h+n*a*f+s*o*u-n*c*u)+m*(-i*o*u-t*l*h+t*o*d+i*a*h-n*a*d+n*l*u)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8],h=e[9],d=e[10],f=e[11],p=e[12],v=e[13],g=e[14],m=e[15],_=h*g*c-v*d*c+v*l*f-o*g*f-h*l*m+o*d*m,x=p*d*c-u*g*c-p*l*f+a*g*f+u*l*m-a*d*m,y=u*v*c-p*h*c+p*o*f-a*v*f-u*o*m+a*h*m,b=p*h*l-u*v*l-p*o*d+a*v*d+u*o*g-a*h*g,M=t*_+n*x+i*y+s*b;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/M;return e[0]=_*w,e[1]=(v*d*s-h*g*s-v*i*f+n*g*f+h*i*m-n*d*m)*w,e[2]=(o*g*s-v*l*s+v*i*c-n*g*c-o*i*m+n*l*m)*w,e[3]=(h*l*s-o*d*s-h*i*c+n*d*c+o*i*f-n*l*f)*w,e[4]=x*w,e[5]=(u*g*s-p*d*s+p*i*f-t*g*f-u*i*m+t*d*m)*w,e[6]=(p*l*s-a*g*s-p*i*c+t*g*c+a*i*m-t*l*m)*w,e[7]=(a*d*s-u*l*s+u*i*c-t*d*c-a*i*f+t*l*f)*w,e[8]=y*w,e[9]=(p*h*s-u*v*s-p*n*f+t*v*f+u*n*m-t*h*m)*w,e[10]=(a*v*s-p*o*s+p*n*c-t*v*c-a*n*m+t*o*m)*w,e[11]=(u*o*s-a*h*s-u*n*c+t*h*c+a*n*f-t*o*f)*w,e[12]=b*w,e[13]=(u*v*i-p*h*i+p*n*d-t*v*d-u*n*g+t*h*g)*w,e[14]=(p*o*i-a*v*i-p*n*l+t*v*l+a*n*g-t*o*g)*w,e[15]=(a*h*i-u*o*i+u*n*l-t*h*l-a*n*d+t*o*d)*w,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,a=e.x,o=e.y,l=e.z,c=s*a,u=s*o;return this.set(c*a+n,c*o-i*l,c*l+i*o,0,c*o+i*l,u*o+n,u*l-i*a,0,c*l-i*o,u*l+i*a,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,a){return this.set(1,n,s,0,e,1,a,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,a=t._y,o=t._z,l=t._w,c=s+s,u=a+a,h=o+o,d=s*c,f=s*u,p=s*h,v=a*u,g=a*h,m=o*h,_=l*c,x=l*u,y=l*h,b=n.x,M=n.y,w=n.z;return i[0]=(1-(v+m))*b,i[1]=(f+y)*b,i[2]=(p-x)*b,i[3]=0,i[4]=(f-y)*M,i[5]=(1-(d+m))*M,i[6]=(g+_)*M,i[7]=0,i[8]=(p+x)*w,i[9]=(g-_)*w,i[10]=(1-(d+v))*w,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=Po.set(i[0],i[1],i[2]).length();const a=Po.set(i[4],i[5],i[6]).length(),o=Po.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Tr.copy(this);const c=1/s,u=1/a,h=1/o;return Tr.elements[0]*=c,Tr.elements[1]*=c,Tr.elements[2]*=c,Tr.elements[4]*=u,Tr.elements[5]*=u,Tr.elements[6]*=u,Tr.elements[8]*=h,Tr.elements[9]*=h,Tr.elements[10]*=h,t.setFromRotationMatrix(Tr),n.x=s,n.y=a,n.z=o,this}makePerspective(e,t,n,i,s,a,o=pr){const l=this.elements,c=2*s/(t-e),u=2*s/(n-i),h=(t+e)/(t-e),d=(n+i)/(n-i);let f,p;if(o===pr)f=-(a+s)/(a-s),p=-2*a*s/(a-s);else if(o===vu)f=-a/(a-s),p=-a*s/(a-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=c,l[4]=0,l[8]=h,l[12]=0,l[1]=0,l[5]=u,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,n,i,s,a,o=pr){const l=this.elements,c=1/(t-e),u=1/(n-i),h=1/(a-s),d=(t+e)*c,f=(n+i)*u;let p,v;if(o===pr)p=(a+s)*h,v=-2*h;else if(o===vu)p=s*h,v=-1*h;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*u,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=v,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}};const Po=new k,Tr=new ft,fA=new k(0,0,0),pA=new k(1,1,1),zs=new k,mh=new k,Xi=new k,T0=new ft,E0=new Dn;let Vi=class cS{constructor(e=0,t=0,n=0,i=cS.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],a=i[4],o=i[8],l=i[1],c=i[5],u=i[9],h=i[2],d=i[6],f=i[10];switch(t){case"XYZ":this._y=Math.asin(Ct(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-u,f),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Ct(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(o,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-h,s),this._z=0);break;case"ZXY":this._x=Math.asin(Ct(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,f),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Ct(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(Ct(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-u,c),this._y=Math.atan2(-h,s)):(this._x=0,this._y=Math.atan2(o,f));break;case"XZY":this._z=Math.asin(-Ct(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-u,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return T0.makeRotationFromQuaternion(e),this.setFromRotationMatrix(T0,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return E0.setFromEuler(this),this.setFromQuaternion(E0,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};Vi.DEFAULT_ORDER="XYZ";let gp=class{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}},mA=0;const A0=new k,Io=new Dn,cs=new ft,gh=new k,mc=new k,gA=new k,vA=new Dn,C0=new k(1,0,0),R0=new k(0,1,0),L0=new k(0,0,1),P0={type:"added"},_A={type:"removed"},Do={type:"childadded",child:null},ym={type:"childremoved",child:null};let Wt=class Bd extends ss{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:mA++}),this.uuid=rr(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Bd.DEFAULT_UP.clone();const e=new k,t=new Vi,n=new Dn,i=new k(1,1,1);function s(){n.setFromEuler(t,!1)}function a(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new ft},normalMatrix:{value:new Nt}}),this.matrix=new ft,this.matrixWorld=new ft,this.matrixAutoUpdate=Bd.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Bd.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new gp,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Io.setFromAxisAngle(e,t),this.quaternion.multiply(Io),this}rotateOnWorldAxis(e,t){return Io.setFromAxisAngle(e,t),this.quaternion.premultiply(Io),this}rotateX(e){return this.rotateOnAxis(C0,e)}rotateY(e){return this.rotateOnAxis(R0,e)}rotateZ(e){return this.rotateOnAxis(L0,e)}translateOnAxis(e,t){return A0.copy(e).applyQuaternion(this.quaternion),this.position.add(A0.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(C0,e)}translateY(e){return this.translateOnAxis(R0,e)}translateZ(e){return this.translateOnAxis(L0,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(cs.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?gh.copy(e):gh.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),mc.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?cs.lookAt(mc,gh,this.up):cs.lookAt(gh,mc,this.up),this.quaternion.setFromRotationMatrix(cs),i&&(cs.extractRotation(i.matrixWorld),Io.setFromRotationMatrix(cs),this.quaternion.premultiply(Io.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(P0),Do.child=e,this.dispatchEvent(Do),Do.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(_A),ym.child=e,this.dispatchEvent(ym),ym.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),cs.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),cs.multiply(e.parent.matrixWorld)),e.applyMatrix4(cs),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(P0),Do.child=e,this.dispatchEvent(Do),Do.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const a=this.children[n].getObjectByProperty(e,t);if(a!==void 0)return a}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let s=0,a=i.length;s<a;s++)i[s].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(mc,e,gA),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(mc,vA,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const i=this.children;for(let s=0,a=i.length;s<a;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.geometryInfo=this._geometryInfo.map(o=>({...o,boundingBox:o.boundingBox?{min:o.boundingBox.min.toArray(),max:o.boundingBox.max.toArray()}:void 0,boundingSphere:o.boundingSphere?{radius:o.boundingSphere.radius,center:o.boundingSphere.center.toArray()}:void 0})),i.instanceInfo=this._instanceInfo.map(o=>({...o})),i.availableInstanceIds=this._availableInstanceIds.slice(),i.availableGeometryIds=this._availableGeometryIds.slice(),i.nextIndexStart=this._nextIndexStart,i.nextVertexStart=this._nextVertexStart,i.geometryCount=this._geometryCount,i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.matricesTexture=this._matricesTexture.toJSON(e),i.indirectTexture=this._indirectTexture.toJSON(e),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(i.boundingSphere={center:this.boundingSphere.center.toArray(),radius:this.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:this.boundingBox.min.toArray(),max:this.boundingBox.max.toArray()}));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,u=l.length;c<u;c++){const h=l[c];s(e.shapes,h)}else s(e.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(e.materials,this.material[l]));i.material=o}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];i.animations.push(s(e.animations,l))}}if(t){const o=a(e.geometries),l=a(e.materials),c=a(e.textures),u=a(e.images),h=a(e.shapes),d=a(e.skeletons),f=a(e.animations),p=a(e.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),u.length>0&&(n.images=u),h.length>0&&(n.shapes=h),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f),p.length>0&&(n.nodes=p)}return n.object=i,n;function a(o){const l=[];for(const c in o){const u=o[c];delete u.metadata,l.push(u)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}};Wt.DEFAULT_UP=new k(0,1,0);Wt.DEFAULT_MATRIX_AUTO_UPDATE=!0;Wt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Er=new k,us=new k,xm=new k,hs=new k,No=new k,Fo=new k,I0=new k,Mm=new k,bm=new k,Sm=new k,wm=new Ht,Tm=new Ht,Em=new Ht;let na=class hl{constructor(e=new k,t=new k,n=new k){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Er.subVectors(e,t),i.cross(Er);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){Er.subVectors(i,t),us.subVectors(n,t),xm.subVectors(e,t);const a=Er.dot(Er),o=Er.dot(us),l=Er.dot(xm),c=us.dot(us),u=us.dot(xm),h=a*c-o*o;if(h===0)return s.set(0,0,0),null;const d=1/h,f=(c*l-o*u)*d,p=(a*u-o*l)*d;return s.set(1-f-p,p,f)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,hs)===null?!1:hs.x>=0&&hs.y>=0&&hs.x+hs.y<=1}static getInterpolation(e,t,n,i,s,a,o,l){return this.getBarycoord(e,t,n,i,hs)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,hs.x),l.addScaledVector(a,hs.y),l.addScaledVector(o,hs.z),l)}static getInterpolatedAttribute(e,t,n,i,s,a){return wm.setScalar(0),Tm.setScalar(0),Em.setScalar(0),wm.fromBufferAttribute(e,t),Tm.fromBufferAttribute(e,n),Em.fromBufferAttribute(e,i),a.setScalar(0),a.addScaledVector(wm,s.x),a.addScaledVector(Tm,s.y),a.addScaledVector(Em,s.z),a}static isFrontFacing(e,t,n,i){return Er.subVectors(n,t),us.subVectors(e,t),Er.cross(us).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Er.subVectors(this.c,this.b),us.subVectors(this.a,this.b),Er.cross(us).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return hl.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return hl.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,s){return hl.getInterpolation(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return hl.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return hl.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let a,o;No.subVectors(i,n),Fo.subVectors(s,n),Mm.subVectors(e,n);const l=No.dot(Mm),c=Fo.dot(Mm);if(l<=0&&c<=0)return t.copy(n);bm.subVectors(e,i);const u=No.dot(bm),h=Fo.dot(bm);if(u>=0&&h<=u)return t.copy(i);const d=l*h-u*c;if(d<=0&&l>=0&&u<=0)return a=l/(l-u),t.copy(n).addScaledVector(No,a);Sm.subVectors(e,s);const f=No.dot(Sm),p=Fo.dot(Sm);if(p>=0&&f<=p)return t.copy(s);const v=f*c-l*p;if(v<=0&&c>=0&&p<=0)return o=c/(c-p),t.copy(n).addScaledVector(Fo,o);const g=u*p-f*h;if(g<=0&&h-u>=0&&f-p>=0)return I0.subVectors(s,i),o=(h-u)/(h-u+(f-p)),t.copy(i).addScaledVector(I0,o);const m=1/(g+v+d);return a=v*m,o=d*m,t.copy(n).addScaledVector(No,a).addScaledVector(Fo,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}};const uS={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ks={h:0,s:0,l:0},vh={h:0,s:0,l:0};function Am(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}let Ye=class{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const i=e;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=In){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Ut.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=Ut.workingColorSpace){return this.r=e,this.g=t,this.b=n,Ut.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=Ut.workingColorSpace){if(e=qv(e,1),t=Ct(t,0,1),n=Ct(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,a=2*n-s;this.r=Am(a,s,e+1/3),this.g=Am(a,s,e),this.b=Am(a,s,e-1/3)}return Ut.toWorkingColorSpace(this,i),this}setStyle(e,t=In){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const a=i[1],o=i[2];switch(a){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=i[1],a=s.length;if(a===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(a===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=In){const n=uS[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ls(e.r),this.g=Ls(e.g),this.b=Ls(e.b),this}copyLinearToSRGB(e){return this.r=Tl(e.r),this.g=Tl(e.g),this.b=Tl(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=In){return Ut.fromWorkingColorSpace(ui.copy(this),e),Math.round(Ct(ui.r*255,0,255))*65536+Math.round(Ct(ui.g*255,0,255))*256+Math.round(Ct(ui.b*255,0,255))}getHexString(e=In){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Ut.workingColorSpace){Ut.fromWorkingColorSpace(ui.copy(this),t);const n=ui.r,i=ui.g,s=ui.b,a=Math.max(n,i,s),o=Math.min(n,i,s);let l,c;const u=(o+a)/2;if(o===a)l=0,c=0;else{const h=a-o;switch(c=u<=.5?h/(a+o):h/(2-a-o),a){case n:l=(i-s)/h+(i<s?6:0);break;case i:l=(s-n)/h+2;break;case s:l=(n-i)/h+4;break}l/=6}return e.h=l,e.s=c,e.l=u,e}getRGB(e,t=Ut.workingColorSpace){return Ut.fromWorkingColorSpace(ui.copy(this),t),e.r=ui.r,e.g=ui.g,e.b=ui.b,e}getStyle(e=In){Ut.fromWorkingColorSpace(ui.copy(this),e);const t=ui.r,n=ui.g,i=ui.b;return e!==In?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){return this.getHSL(ks),this.setHSL(ks.h+e,ks.s+t,ks.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(ks),e.getHSL(vh);const n=Qc(ks.h,vh.h,t),i=Qc(ks.s,vh.s,t),s=Qc(ks.l,vh.l,t);return this.setHSL(n,i,s),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,s=e.elements;return this.r=s[0]*t+s[3]*n+s[6]*i,this.g=s[1]*t+s[4]*n+s[7]*i,this.b=s[2]*t+s[5]*n+s[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const ui=new Ye;Ye.NAMES=uS;let yA=0,$n=class extends ss{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:yA++}),this.uuid=rr(),this.name="",this.type="Material",this.blending=Cs,this.side=es,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=qd,this.blendDst=Zd,this.blendEquation=ta,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ye(0,0,0),this.blendAlpha=0,this.depthFunc=so,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Kg,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Wa,this.stencilZFail=Wa,this.stencilZPass=Wa,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Cs&&(n.blending=this.blending),this.side!==es&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==qd&&(n.blendSrc=this.blendSrc),this.blendDst!==Zd&&(n.blendDst=this.blendDst),this.blendEquation!==ta&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==so&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Kg&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Wa&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Wa&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Wa&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const a=[];for(const o in s){const l=s[o];delete l.metadata,a.push(l)}return a}if(t){const s=i(e.textures),a=i(e.images);s.length>0&&(n.textures=s),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}},ir=class extends $n{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ye(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Vi,this.combine=qu,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}};const Ss=xA();function xA(){const r=new ArrayBuffer(4),e=new Float32Array(r),t=new Uint32Array(r),n=new Uint32Array(512),i=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(n[l]=0,n[l|256]=32768,i[l]=24,i[l|256]=24):c<-14?(n[l]=1024>>-c-14,n[l|256]=1024>>-c-14|32768,i[l]=-c-1,i[l|256]=-c-1):c<=15?(n[l]=c+15<<10,n[l|256]=c+15<<10|32768,i[l]=13,i[l|256]=13):c<128?(n[l]=31744,n[l|256]=64512,i[l]=24,i[l|256]=24):(n[l]=31744,n[l|256]=64512,i[l]=13,i[l|256]=13)}const s=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,u=0;for(;(c&8388608)===0;)c<<=1,u-=8388608;c&=-8388609,u+=947912704,s[l]=c|u}for(let l=1024;l<2048;++l)s[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)a[l]=l<<23;a[31]=1199570944,a[32]=2147483648;for(let l=33;l<63;++l)a[l]=2147483648+(l-32<<23);a[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(o[l]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:i,mantissaTable:s,exponentTable:a,offsetTable:o}}function Ui(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=Ct(r,-65504,65504),Ss.floatView[0]=r;const e=Ss.uint32View[0],t=e>>23&511;return Ss.baseTable[t]+((e&8388607)>>Ss.shiftTable[t])}function Uc(r){const e=r>>10;return Ss.uint32View[0]=Ss.mantissaTable[Ss.offsetTable[e]+(r&1023)]+Ss.exponentTable[e],Ss.floatView[0]}class MA{static toHalfFloat(e){return Ui(e)}static fromHalfFloat(e){return Uc(e)}}const Bn=new k,_h=new Pe;let bA=0,qt=class{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:bA++}),this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=gu,this.updateRanges=[],this.gpuType=zi,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)_h.fromBufferAttribute(this,t),_h.applyMatrix3(e),this.setXY(t,_h.x,_h.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Bn.fromBufferAttribute(this,t),Bn.applyMatrix3(e),this.setXYZ(t,Bn.x,Bn.y,Bn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Bn.fromBufferAttribute(this,t),Bn.applyMatrix4(e),this.setXYZ(t,Bn.x,Bn.y,Bn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Bn.fromBufferAttribute(this,t),Bn.applyNormalMatrix(e),this.setXYZ(t,Bn.x,Bn.y,Bn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Bn.fromBufferAttribute(this,t),Bn.transformDirection(e),this.setXYZ(t,Bn.x,Bn.y,Bn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=Ai(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=It(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Ai(t,this.array)),t}setX(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Ai(t,this.array)),t}setY(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Ai(t,this.array)),t}setZ(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Ai(t,this.array)),t}setW(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array),s=It(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==gu&&(e.usage=this.usage),e}};class SA extends qt{constructor(e,t,n){super(new Int8Array(e),t,n)}}class wA extends qt{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class TA extends qt{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class EA extends qt{constructor(e,t,n){super(new Int16Array(e),t,n)}}let Zv=class extends qt{constructor(e,t,n){super(new Uint16Array(e),t,n)}};class AA extends qt{constructor(e,t,n){super(new Int32Array(e),t,n)}}let Yv=class extends qt{constructor(e,t,n){super(new Uint32Array(e),t,n)}},CA=class extends qt{constructor(e,t,n){super(new Uint16Array(e),t,n),this.isFloat16BufferAttribute=!0}getX(e){let t=Uc(this.array[e*this.itemSize]);return this.normalized&&(t=Ai(t,this.array)),t}setX(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize]=Ui(t),this}getY(e){let t=Uc(this.array[e*this.itemSize+1]);return this.normalized&&(t=Ai(t,this.array)),t}setY(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+1]=Ui(t),this}getZ(e){let t=Uc(this.array[e*this.itemSize+2]);return this.normalized&&(t=Ai(t,this.array)),t}setZ(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+2]=Ui(t),this}getW(e){let t=Uc(this.array[e*this.itemSize+3]);return this.normalized&&(t=Ai(t,this.array)),t}setW(e,t){return this.normalized&&(t=It(t,this.array)),this.array[e*this.itemSize+3]=Ui(t),this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array)),this.array[e+0]=Ui(t),this.array[e+1]=Ui(n),this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array)),this.array[e+0]=Ui(t),this.array[e+1]=Ui(n),this.array[e+2]=Ui(i),this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array),s=It(s,this.array)),this.array[e+0]=Ui(t),this.array[e+1]=Ui(n),this.array[e+2]=Ui(i),this.array[e+3]=Ui(s),this}},rt=class extends qt{constructor(e,t,n){super(new Float32Array(e),t,n)}},RA=0;const cr=new ft,Cm=new Wt,Oo=new k,qi=new On,gc=new On,Zn=new k;let Lt=class hS extends ss{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:RA++}),this.uuid=rr(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(rS(e)?Yv:Zv)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new Nt().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return cr.makeRotationFromQuaternion(e),this.applyMatrix4(cr),this}rotateX(e){return cr.makeRotationX(e),this.applyMatrix4(cr),this}rotateY(e){return cr.makeRotationY(e),this.applyMatrix4(cr),this}rotateZ(e){return cr.makeRotationZ(e),this.applyMatrix4(cr),this}translate(e,t,n){return cr.makeTranslation(e,t,n),this.applyMatrix4(cr),this}scale(e,t,n){return cr.makeScale(e,t,n),this.applyMatrix4(cr),this}lookAt(e){return Cm.lookAt(e),Cm.updateMatrix(),this.applyMatrix4(Cm.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Oo).negate(),this.translate(Oo.x,Oo.y,Oo.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let i=0,s=e.length;i<s;i++){const a=e[i];n.push(a.x,a.y,a.z||0)}this.setAttribute("position",new rt(n,3))}else{const n=Math.min(e.length,t.count);for(let i=0;i<n;i++){const s=e[i];t.setXYZ(i,s.x,s.y,s.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new On);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new k(-1/0,-1/0,-1/0),new k(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];qi.setFromBufferAttribute(s),this.morphTargetsRelative?(Zn.addVectors(this.boundingBox.min,qi.min),this.boundingBox.expandByPoint(Zn),Zn.addVectors(this.boundingBox.max,qi.max),this.boundingBox.expandByPoint(Zn)):(this.boundingBox.expandByPoint(qi.min),this.boundingBox.expandByPoint(qi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new kn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new k,1/0);return}if(e){const n=this.boundingSphere.center;if(qi.setFromBufferAttribute(e),t)for(let s=0,a=t.length;s<a;s++){const o=t[s];gc.setFromBufferAttribute(o),this.morphTargetsRelative?(Zn.addVectors(qi.min,gc.min),qi.expandByPoint(Zn),Zn.addVectors(qi.max,gc.max),qi.expandByPoint(Zn)):(qi.expandByPoint(gc.min),qi.expandByPoint(gc.max))}qi.getCenter(n);let i=0;for(let s=0,a=e.count;s<a;s++)Zn.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(Zn));if(t)for(let s=0,a=t.length;s<a;s++){const o=t[s],l=this.morphTargetsRelative;for(let c=0,u=o.count;c<u;c++)Zn.fromBufferAttribute(o,c),l&&(Oo.fromBufferAttribute(e,c),Zn.add(Oo)),i=Math.max(i,n.distanceToSquared(Zn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,i=t.normal,s=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new qt(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),o=[],l=[];for(let C=0;C<n.count;C++)o[C]=new k,l[C]=new k;const c=new k,u=new k,h=new k,d=new Pe,f=new Pe,p=new Pe,v=new k,g=new k;function m(C,T,S){c.fromBufferAttribute(n,C),u.fromBufferAttribute(n,T),h.fromBufferAttribute(n,S),d.fromBufferAttribute(s,C),f.fromBufferAttribute(s,T),p.fromBufferAttribute(s,S),u.sub(c),h.sub(c),f.sub(d),p.sub(d);const R=1/(f.x*p.y-p.x*f.y);isFinite(R)&&(v.copy(u).multiplyScalar(p.y).addScaledVector(h,-f.y).multiplyScalar(R),g.copy(h).multiplyScalar(f.x).addScaledVector(u,-p.x).multiplyScalar(R),o[C].add(v),o[T].add(v),o[S].add(v),l[C].add(g),l[T].add(g),l[S].add(g))}let _=this.groups;_.length===0&&(_=[{start:0,count:e.count}]);for(let C=0,T=_.length;C<T;++C){const S=_[C],R=S.start,H=S.count;for(let D=R,O=R+H;D<O;D+=3)m(e.getX(D+0),e.getX(D+1),e.getX(D+2))}const x=new k,y=new k,b=new k,M=new k;function w(C){b.fromBufferAttribute(i,C),M.copy(b);const T=o[C];x.copy(T),x.sub(b.multiplyScalar(b.dot(T))).normalize(),y.crossVectors(M,T);const R=y.dot(l[C])<0?-1:1;a.setXYZW(C,x.x,x.y,x.z,R)}for(let C=0,T=_.length;C<T;++C){const S=_[C],R=S.start,H=S.count;for(let D=R,O=R+H;D<O;D+=3)w(e.getX(D+0)),w(e.getX(D+1)),w(e.getX(D+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new qt(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new k,s=new k,a=new k,o=new k,l=new k,c=new k,u=new k,h=new k;if(e)for(let d=0,f=e.count;d<f;d+=3){const p=e.getX(d+0),v=e.getX(d+1),g=e.getX(d+2);i.fromBufferAttribute(t,p),s.fromBufferAttribute(t,v),a.fromBufferAttribute(t,g),u.subVectors(a,s),h.subVectors(i,s),u.cross(h),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,v),c.fromBufferAttribute(n,g),o.add(u),l.add(u),c.add(u),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(v,l.x,l.y,l.z),n.setXYZ(g,c.x,c.y,c.z)}else for(let d=0,f=t.count;d<f;d+=3)i.fromBufferAttribute(t,d+0),s.fromBufferAttribute(t,d+1),a.fromBufferAttribute(t,d+2),u.subVectors(a,s),h.subVectors(i,s),u.cross(h),n.setXYZ(d+0,u.x,u.y,u.z),n.setXYZ(d+1,u.x,u.y,u.z),n.setXYZ(d+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Zn.fromBufferAttribute(e,t),Zn.normalize(),e.setXYZ(t,Zn.x,Zn.y,Zn.z)}toNonIndexed(){function e(o,l){const c=o.array,u=o.itemSize,h=o.normalized,d=new c.constructor(l.length*u);let f=0,p=0;for(let v=0,g=l.length;v<g;v++){o.isInterleavedBufferAttribute?f=l[v]*o.data.stride+o.offset:f=l[v]*u;for(let m=0;m<u;m++)d[p++]=c[f++]}return new qt(d,u,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new hS,n=this.index.array,i=this.attributes;for(const o in i){const l=i[o],c=e(l,n);t.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let u=0,h=c.length;u<h;u++){const d=c[u],f=e(d,n);l.push(f)}t.morphAttributes[o]=l}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const c=a[o];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],u=[];for(let h=0,d=c.length;h<d;h++){const f=c[h];u.push(f.toJSON(e.data))}u.length>0&&(i[l]=u,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone());const i=e.attributes;for(const c in i){const u=i[c];this.setAttribute(c,u.clone(t))}const s=e.morphAttributes;for(const c in s){const u=[],h=s[c];for(let d=0,f=h.length;d<f;d++)u.push(h[d].clone(t));this.morphAttributes[c]=u}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let c=0,u=a.length;c<u;c++){const h=a[c];this.addGroup(h.start,h.count,h.materialIndex)}const o=e.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}};const D0=new ft,Ca=new yo,yh=new kn,N0=new k,xh=new k,Mh=new k,bh=new k,Rm=new k,Sh=new k,F0=new k,wh=new k;let Mn=class extends Wt{constructor(e=new Lt,t=new ir){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,a=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const o=this.morphTargetInfluences;if(s&&o){Sh.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const u=o[l],h=s[l];u!==0&&(Rm.fromBufferAttribute(h,e),a?Sh.addScaledVector(Rm,u):Sh.addScaledVector(Rm.sub(t),u))}t.add(Sh)}return t}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),yh.copy(n.boundingSphere),yh.applyMatrix4(s),Ca.copy(e.ray).recast(e.near),!(yh.containsPoint(Ca.origin)===!1&&(Ca.intersectSphere(yh,N0)===null||Ca.origin.distanceToSquared(N0)>(e.far-e.near)**2))&&(D0.copy(s).invert(),Ca.copy(e.ray).applyMatrix4(D0),!(n.boundingBox!==null&&Ca.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,Ca)))}_computeIntersections(e,t,n){let i;const s=this.geometry,a=this.material,o=s.index,l=s.attributes.position,c=s.attributes.uv,u=s.attributes.uv1,h=s.attributes.normal,d=s.groups,f=s.drawRange;if(o!==null)if(Array.isArray(a))for(let p=0,v=d.length;p<v;p++){const g=d[p],m=a[g.materialIndex],_=Math.max(g.start,f.start),x=Math.min(o.count,Math.min(g.start+g.count,f.start+f.count));for(let y=_,b=x;y<b;y+=3){const M=o.getX(y),w=o.getX(y+1),C=o.getX(y+2);i=Th(this,m,e,n,c,u,h,M,w,C),i&&(i.faceIndex=Math.floor(y/3),i.face.materialIndex=g.materialIndex,t.push(i))}}else{const p=Math.max(0,f.start),v=Math.min(o.count,f.start+f.count);for(let g=p,m=v;g<m;g+=3){const _=o.getX(g),x=o.getX(g+1),y=o.getX(g+2);i=Th(this,a,e,n,c,u,h,_,x,y),i&&(i.faceIndex=Math.floor(g/3),t.push(i))}}else if(l!==void 0)if(Array.isArray(a))for(let p=0,v=d.length;p<v;p++){const g=d[p],m=a[g.materialIndex],_=Math.max(g.start,f.start),x=Math.min(l.count,Math.min(g.start+g.count,f.start+f.count));for(let y=_,b=x;y<b;y+=3){const M=y,w=y+1,C=y+2;i=Th(this,m,e,n,c,u,h,M,w,C),i&&(i.faceIndex=Math.floor(y/3),i.face.materialIndex=g.materialIndex,t.push(i))}}else{const p=Math.max(0,f.start),v=Math.min(l.count,f.start+f.count);for(let g=p,m=v;g<m;g+=3){const _=g,x=g+1,y=g+2;i=Th(this,a,e,n,c,u,h,_,x,y),i&&(i.faceIndex=Math.floor(g/3),t.push(i))}}}};function LA(r,e,t,n,i,s,a,o){let l;if(e.side===gi?l=n.intersectTriangle(a,s,i,!0,o):l=n.intersectTriangle(i,s,a,e.side===es,o),l===null)return null;wh.copy(o),wh.applyMatrix4(r.matrixWorld);const c=t.ray.origin.distanceTo(wh);return c<t.near||c>t.far?null:{distance:c,point:wh.clone(),object:r}}function Th(r,e,t,n,i,s,a,o,l,c){r.getVertexPosition(o,xh),r.getVertexPosition(l,Mh),r.getVertexPosition(c,bh);const u=LA(r,e,t,n,xh,Mh,bh,F0);if(u){const h=new k;na.getBarycoord(F0,xh,Mh,bh,h),i&&(u.uv=na.getInterpolatedAttribute(i,o,l,c,h,new Pe)),s&&(u.uv1=na.getInterpolatedAttribute(s,o,l,c,h,new Pe)),a&&(u.normal=na.getInterpolatedAttribute(a,o,l,c,h,new k),u.normal.dot(n.direction)>0&&u.normal.multiplyScalar(-1));const d={a:o,b:l,c,normal:new k,materialIndex:0};na.getNormal(xh,Mh,bh,d.normal),u.face=d,u.barycoord=h}return u}let Jl=class dS extends Lt{constructor(e=1,t=1,n=1,i=1,s=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:a};const o=this;i=Math.floor(i),s=Math.floor(s),a=Math.floor(a);const l=[],c=[],u=[],h=[];let d=0,f=0;p("z","y","x",-1,-1,n,t,e,a,s,0),p("z","y","x",1,-1,n,t,-e,a,s,1),p("x","z","y",1,1,e,n,t,i,a,2),p("x","z","y",1,-1,e,n,-t,i,a,3),p("x","y","z",1,-1,e,t,n,i,s,4),p("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new rt(c,3)),this.setAttribute("normal",new rt(u,3)),this.setAttribute("uv",new rt(h,2));function p(v,g,m,_,x,y,b,M,w,C,T){const S=y/w,R=b/C,H=y/2,D=b/2,O=M/2,G=w+1,P=C+1;let z=0,W=0;const X=new k;for(let re=0;re<P;re++){const ne=re*R-D;for(let be=0;be<G;be++){const _e=be*S-H;X[v]=_e*_,X[g]=ne*x,X[m]=O,c.push(X.x,X.y,X.z),X[v]=0,X[g]=0,X[m]=M>0?1:-1,u.push(X.x,X.y,X.z),h.push(be/w),h.push(1-re/C),z+=1}}for(let re=0;re<C;re++)for(let ne=0;ne<w;ne++){const be=d+ne+G*re,_e=d+ne+G*(re+1),$=d+(ne+1)+G*(re+1),K=d+(ne+1)+G*re;l.push(be,_e,K),l.push(_e,$,K),W+=6}o.addGroup(f,W,T),f+=W,d+=z}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new dS(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}};function Bl(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const i=r[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function Ti(r){const e={};for(let t=0;t<r.length;t++){const n=Bl(r[t]);for(const i in n)e[i]=n[i]}return e}function PA(r){const e=[];for(let t=0;t<r.length;t++)e.push(r[t].clone());return e}function fS(r){const e=r.getRenderTarget();return e===null?r.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:Ut.workingColorSpace}const vp={clone:Bl,merge:Ti};var IA=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,DA=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;let Pi=class extends $n{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=IA,this.fragmentShader=DA,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Bl(e.uniforms),this.uniformsGroups=PA(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const a=this.uniforms[i].value;a&&a.isTexture?t.uniforms[i]={type:"t",value:a.toJSON(e).uuid}:a&&a.isColor?t.uniforms[i]={type:"c",value:a.getHex()}:a&&a.isVector2?t.uniforms[i]={type:"v2",value:a.toArray()}:a&&a.isVector3?t.uniforms[i]={type:"v3",value:a.toArray()}:a&&a.isVector4?t.uniforms[i]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?t.uniforms[i]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?t.uniforms[i]={type:"m4",value:a.toArray()}:t.uniforms[i]={value:a}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}},_p=class extends Wt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ft,this.projectionMatrix=new ft,this.projectionMatrixInverse=new ft,this.coordinateSystem=pr}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const Vs=new k,O0=new Pe,U0=new Pe;let Hn=class extends _p{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Ul*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Qa*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Ul*2*Math.atan(Math.tan(Qa*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){Vs.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(Vs.x,Vs.y).multiplyScalar(-e/Vs.z),Vs.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Vs.x,Vs.y).multiplyScalar(-e/Vs.z)}getViewSize(e,t){return this.getViewBounds(e,O0,U0),t.subVectors(U0,O0)}setViewOffset(e,t,n,i,s,a){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Qa*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,c=a.fullHeight;s+=a.offsetX*i/l,t-=a.offsetY*n/c,i*=a.width/l,n*=a.height/c}const o=this.filmOffset;o!==0&&(s+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}};const Uo=-90,Bo=1;let jv=class extends Wt{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Hn(Uo,Bo,e,t);i.layers=this.layers,this.add(i);const s=new Hn(Uo,Bo,e,t);s.layers=this.layers,this.add(s);const a=new Hn(Uo,Bo,e,t);a.layers=this.layers,this.add(a);const o=new Hn(Uo,Bo,e,t);o.layers=this.layers,this.add(o);const l=new Hn(Uo,Bo,e,t);l.layers=this.layers,this.add(l);const c=new Hn(Uo,Bo,e,t);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,s,a,o,l]=t;for(const c of t)this.remove(c);if(e===pr)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(e===vu)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const c of t)this.add(c),c.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[s,a,o,l,c,u]=this.children,h=e.getRenderTarget(),d=e.getActiveCubeFace(),f=e.getActiveMipmapLevel(),p=e.xr.enabled;e.xr.enabled=!1;const v=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,s),e.setRenderTarget(n,1,i),e.render(t,a),e.setRenderTarget(n,2,i),e.render(t,o),e.setRenderTarget(n,3,i),e.render(t,l),e.setRenderTarget(n,4,i),e.render(t,c),n.texture.generateMipmaps=v,e.setRenderTarget(n,5,i),e.render(t,u),e.setRenderTarget(h,d,f),e.xr.enabled=p,n.texture.needsPMREMUpdate=!0}},ju=class extends Vn{constructor(e=[],t=Ps,n,i,s,a,o,l,c,u){super(e,t,n,i,s,a,o,l,c,u),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}},Jv=class extends ts{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new ju(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:xn}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Jl(5,5,5),s=new Pi({name:"CubemapFromEquirect",uniforms:Bl(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:gi,blending:jr});s.uniforms.tEquirect.value=t;const a=new Mn(i,s),o=t.minFilter;return t.minFilter===nr&&(t.minFilter=xn),new jv(1,10,this).update(e,a),t.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(e,t=!0,n=!0,i=!0){const s=e.getRenderTarget();for(let a=0;a<6;a++)e.setRenderTarget(this,a),e.clear(t,n,i);e.setRenderTarget(s)}},mr=class extends Wt{constructor(){super(),this.isGroup=!0,this.type="Group"}};const NA={type:"move"};let zd=class{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new mr,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new mr,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new k,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new k),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new mr,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new k,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new k),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,a=null;const o=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){a=!0;for(const v of e.hand.values()){const g=t.getJointPose(v,n),m=this._getHandJoint(c,v);g!==null&&(m.matrix.fromArray(g.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.matrixWorldNeedsUpdate=!0,m.jointRadius=g.radius),m.visible=g!==null}const u=c.joints["index-finger-tip"],h=c.joints["thumb-tip"],d=u.position.distanceTo(h.position),f=.02,p=.005;c.inputState.pinching&&d>f+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&d<=f-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(NA)))}return o!==null&&(o.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=a!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new mr;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}};class yp{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Ye(e),this.density=t}clone(){return new yp(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class xp{constructor(e,t=1,n=1e3){this.isFog=!0,this.name="",this.color=new Ye(e),this.near=t,this.far=n}clone(){return new xp(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}let Kv=class extends Wt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Vi,this.environmentIntensity=1,this.environmentRotation=new Vi,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}},Ju=class{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=gu,this.updateRanges=[],this.version=0,this.uuid=rr()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=rr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=rr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}};const wi=new k;let zl=class pS{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)wi.fromBufferAttribute(this,t),wi.applyMatrix4(e),this.setXYZ(t,wi.x,wi.y,wi.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)wi.fromBufferAttribute(this,t),wi.applyNormalMatrix(e),this.setXYZ(t,wi.x,wi.y,wi.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)wi.fromBufferAttribute(this,t),wi.transformDirection(e),this.setXYZ(t,wi.x,wi.y,wi.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=Ai(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=It(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=It(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=It(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=It(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=It(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=Ai(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=Ai(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=Ai(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=Ai(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=It(t,this.array),n=It(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=It(t,this.array),n=It(n,this.array),i=It(i,this.array),s=It(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new qt(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new pS(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},Qv=class extends $n{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Ye(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}},zo;const vc=new k,ko=new k,Vo=new k,Ho=new Pe,_c=new Pe,mS=new ft,Eh=new k,yc=new k,Ah=new k,B0=new Pe,Lm=new Pe,z0=new Pe;let gS=class extends Wt{constructor(e=new Qv){if(super(),this.isSprite=!0,this.type="Sprite",zo===void 0){zo=new Lt;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new Ju(t,5);zo.setIndex([0,1,2,0,2,3]),zo.setAttribute("position",new zl(n,3,0,!1)),zo.setAttribute("uv",new zl(n,2,3,!1))}this.geometry=zo,this.material=e,this.center=new Pe(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ko.setFromMatrixScale(this.matrixWorld),mS.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Vo.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&ko.multiplyScalar(-Vo.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const a=this.center;Ch(Eh.set(-.5,-.5,0),Vo,a,ko,i,s),Ch(yc.set(.5,-.5,0),Vo,a,ko,i,s),Ch(Ah.set(.5,.5,0),Vo,a,ko,i,s),B0.set(0,0),Lm.set(1,0),z0.set(1,1);let o=e.ray.intersectTriangle(Eh,yc,Ah,!1,vc);if(o===null&&(Ch(yc.set(-.5,.5,0),Vo,a,ko,i,s),Lm.set(0,1),o=e.ray.intersectTriangle(Eh,Ah,yc,!1,vc),o===null))return;const l=e.ray.origin.distanceTo(vc);l<e.near||l>e.far||t.push({distance:l,point:vc.clone(),uv:na.getInterpolation(vc,Eh,yc,Ah,B0,Lm,z0,new Pe),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}};function Ch(r,e,t,n,i,s){Ho.subVectors(r,t).addScalar(.5).multiply(n),i!==void 0?(_c.x=s*Ho.x-i*Ho.y,_c.y=i*Ho.x+s*Ho.y):_c.copy(Ho),r.copy(e),r.x+=_c.x,r.y+=_c.y,r.applyMatrix4(mS)}const Rh=new k,k0=new k;class vS extends Wt{constructor(){super(),this.isLOD=!0,this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const s=t[n];this.addLevel(s.object.clone(),s.distance,s.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0,n=0){t=Math.abs(t);const i=this.levels;let s;for(s=0;s<i.length&&!(t<i[s].distance);s++);return i.splice(s,0,{distance:t,hysteresis:n,object:e}),this.add(e),this}removeLevel(e){const t=this.levels;for(let n=0;n<t.length;n++)if(t[n].distance===e){const i=t.splice(n,1);return this.remove(i[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i;n++){let s=t[n].distance;if(t[n].object.visible&&(s-=s*t[n].hysteresis),e<s)break}return t[n-1].object}return null}raycast(e,t){if(this.levels.length>0){Rh.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(Rh);this.getObjectForDistance(i).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){Rh.setFromMatrixPosition(e.matrixWorld),k0.setFromMatrixPosition(this.matrixWorld);const n=Rh.distanceTo(k0)/e.zoom;t[0].object.visible=!0;let i,s;for(i=1,s=t.length;i<s;i++){let a=t[i].distance;if(t[i].object.visible&&(a-=a*t[i].hysteresis),n>=a)t[i-1].object.visible=!1,t[i].object.visible=!0;else break}for(this._currentLevel=i-1;i<s;i++)t[i].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,s=n.length;i<s;i++){const a=n[i];t.object.levels.push({object:a.object.uuid,distance:a.distance,hysteresis:a.hysteresis})}return t}}const V0=new k,H0=new Ht,G0=new Ht,FA=new k,W0=new ft,Lh=new k,Pm=new kn,$0=new ft,Im=new yo;let e_=class extends Mn{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=Jg,this.bindMatrix=new ft,this.bindMatrixInverse=new ft,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new On),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Lh),this.boundingBox.expandByPoint(Lh)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new kn),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,Lh),this.boundingSphere.expandByPoint(Lh)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const n=this.material,i=this.matrixWorld;n!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Pm.copy(this.boundingSphere),Pm.applyMatrix4(i),e.ray.intersectsSphere(Pm)!==!1&&($0.copy(i).invert(),Im.copy(e.ray).applyMatrix4($0),!(this.boundingBox!==null&&Im.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,Im)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new Ht,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.fromBufferAttribute(t,n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===Jg?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===Vb?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,i=this.geometry;H0.fromBufferAttribute(i.attributes.skinIndex,e),G0.fromBufferAttribute(i.attributes.skinWeight,e),V0.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const a=G0.getComponent(s);if(a!==0){const o=H0.getComponent(s);W0.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(FA.copy(V0).applyMatrix4(W0),a)}}return t.applyMatrix4(this.bindMatrixInverse)}},Mp=class extends Wt{constructor(){super(),this.isBone=!0,this.type="Bone"}},Jr=class extends Vn{constructor(e=null,t=1,n=1,i,s,a,o,l,c=Wn,u=Wn,h,d){super(null,a,o,l,c,u,i,s,h,d),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}};const X0=new ft,OA=new ft;class Ku{constructor(e=[],t=[]){this.uuid=rr(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new ft)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new ft;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let s=0,a=e.length;s<a;s++){const o=e[s]?e[s].matrixWorld:OA;X0.multiplyMatrices(o,t[s]),X0.toArray(n,s*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new Ku(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new Jr(t,e,e,Ri,zi);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const s=e.bones[n];let a=t[s];a===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",s),a=new Mp),this.bones.push(a),this.boneInverses.push(new ft().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,s=t.length;i<s;i++){const a=t[i];e.bones.push(a.uuid);const o=n[i];e.boneInverses.push(o.toArray())}return e}}let ao=class extends qt{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}};const Go=new ft,q0=new ft,Ph=[],Z0=new On,UA=new ft,xc=new Mn,Mc=new kn;let t_=class extends Mn{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new ao(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,UA)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new On),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,Go),Z0.copy(e.boundingBox).applyMatrix4(Go),this.boundingBox.union(Z0)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new kn),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,Go),Mc.copy(e.boundingSphere).applyMatrix4(Go),this.boundingSphere.union(Mc)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,i=this.morphTexture.source.data.data,s=n.length+1,a=e*s+1;for(let o=0;o<n.length;o++)n[o]=i[a+o]}raycast(e,t){const n=this.matrixWorld,i=this.count;if(xc.geometry=this.geometry,xc.material=this.material,xc.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Mc.copy(this.boundingSphere),Mc.applyMatrix4(n),e.ray.intersectsSphere(Mc)!==!1))for(let s=0;s<i;s++){this.getMatrixAt(s,Go),q0.multiplyMatrices(n,Go),xc.matrixWorld=q0,xc.raycast(e,Ph);for(let a=0,o=Ph.length;a<o;a++){const l=Ph[a];l.instanceId=s,l.object=this,t.push(l)}Ph.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new ao(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,i=n.length+1;this.morphTexture===null&&(this.morphTexture=new Jr(new Float32Array(i*this.count),i,this.count,up,zi));const s=this.morphTexture.source.data.data;let a=0;for(let c=0;c<n.length;c++)a+=n[c];const o=this.geometry.morphTargetsRelative?1:1-a,l=i*e;s[l]=o,s.set(n,l+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null)}};const Dm=new k,BA=new k,zA=new Nt;let Qs=class{constructor(e=new k(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Dm.subVectors(n,t).cross(BA.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Dm),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||zA.getNormalMatrix(e),i=this.coplanarPoint(Dm).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}};const Ra=new kn,Ih=new k;let Kl=class{constructor(e=new Qs,t=new Qs,n=new Qs,i=new Qs,s=new Qs,a=new Qs){this.planes=[e,t,n,i,s,a]}set(e,t,n,i,s,a){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(s),o[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=pr){const n=this.planes,i=e.elements,s=i[0],a=i[1],o=i[2],l=i[3],c=i[4],u=i[5],h=i[6],d=i[7],f=i[8],p=i[9],v=i[10],g=i[11],m=i[12],_=i[13],x=i[14],y=i[15];if(n[0].setComponents(l-s,d-c,g-f,y-m).normalize(),n[1].setComponents(l+s,d+c,g+f,y+m).normalize(),n[2].setComponents(l+a,d+u,g+p,y+_).normalize(),n[3].setComponents(l-a,d-u,g-p,y-_).normalize(),n[4].setComponents(l-o,d-h,g-v,y-x).normalize(),t===pr)n[5].setComponents(l+o,d+h,g+v,y+x).normalize();else if(t===vu)n[5].setComponents(o,h,v,x).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),Ra.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),Ra.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Ra)}intersectsSprite(e){return Ra.center.set(0,0,0),Ra.radius=.7071067811865476,Ra.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ra)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(Ih.x=i.normal.x>0?e.max.x:e.min.x,Ih.y=i.normal.y>0?e.max.y:e.min.y,Ih.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(Ih)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};const Hr=new ft,Gr=new Kl;class bp{constructor(){this.coordinateSystem=pr}intersectsObject(e,t){if(!t.isArrayCamera||t.cameras.length===0)return!1;for(let n=0;n<t.cameras.length;n++){const i=t.cameras[n];if(Hr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),Gr.setFromProjectionMatrix(Hr,this.coordinateSystem),Gr.intersectsObject(e))return!0}return!1}intersectsSprite(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let n=0;n<t.cameras.length;n++){const i=t.cameras[n];if(Hr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),Gr.setFromProjectionMatrix(Hr,this.coordinateSystem),Gr.intersectsSprite(e))return!0}return!1}intersectsSphere(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let n=0;n<t.cameras.length;n++){const i=t.cameras[n];if(Hr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),Gr.setFromProjectionMatrix(Hr,this.coordinateSystem),Gr.intersectsSphere(e))return!0}return!1}intersectsBox(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let n=0;n<t.cameras.length;n++){const i=t.cameras[n];if(Hr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),Gr.setFromProjectionMatrix(Hr,this.coordinateSystem),Gr.intersectsBox(e))return!0}return!1}containsPoint(e,t){if(!t||!t.cameras||t.cameras.length===0)return!1;for(let n=0;n<t.cameras.length;n++){const i=t.cameras[n];if(Hr.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),Gr.setFromProjectionMatrix(Hr,this.coordinateSystem),Gr.containsPoint(e))return!0}return!1}clone(){return new bp}}function Nm(r,e){return r-e}function kA(r,e){return r.z-e.z}function VA(r,e){return e.z-r.z}class HA{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,t,n,i){const s=this.pool,a=this.list;this.index>=s.length&&s.push({start:-1,count:-1,z:-1,index:-1});const o=s[this.index];a.push(o),this.index++,o.start=e,o.count=t,o.z=n,o.index=i}reset(){this.list.length=0,this.index=0}}const Fi=new ft,GA=new Ye(1,1,1),Y0=new Kl,WA=new bp,Dh=new On,La=new kn,bc=new k,j0=new k,$A=new k,Fm=new HA,hi=new Mn,Nh=[];function XA(r,e,t=0){const n=e.itemSize;if(r.isInterleavedBufferAttribute||r.array.constructor!==e.array.constructor){const i=r.count;for(let s=0;s<i;s++)for(let a=0;a<n;a++)e.setComponent(s+t,a,r.getComponent(s,a))}else e.array.set(r.array,t*n);e.needsUpdate=!0}function Pa(r,e){if(r.constructor!==e.constructor){const t=Math.min(r.length,e.length);for(let n=0;n<t;n++)e[n]=r[n]}else{const t=Math.min(r.length,e.length);e.set(new r.constructor(r.buffer,0,t))}}class _S extends Mn{constructor(e,t,n=t*2,i){super(new Lt,i),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=e,this._maxVertexCount=t,this._maxIndexCount=n,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}_initMatricesTexture(){let e=Math.sqrt(this._maxInstanceCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4),n=new Jr(t,e,e,Ri,zi);this._matricesTexture=n}_initIndirectTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Uint32Array(e*e),n=new Jr(t,e,e,Zu,Is);this._indirectTexture=n}_initColorsTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Float32Array(e*e*4).fill(1),n=new Jr(t,e,e,Ri,zi);n.colorSpace=Ut.workingColorSpace,this._colorsTexture=n}_initializeGeometry(e){const t=this.geometry,n=this._maxVertexCount,i=this._maxIndexCount;if(this._geometryInitialized===!1){for(const s in e.attributes){const a=e.getAttribute(s),{array:o,itemSize:l,normalized:c}=a,u=new o.constructor(n*l),h=new qt(u,l,c);t.setAttribute(s,h)}if(e.getIndex()!==null){const s=n>65535?new Uint32Array(i):new Uint16Array(i);t.setIndex(new qt(s,1))}this._geometryInitialized=!0}}_validateGeometry(e){const t=this.geometry;if(!!e.getIndex()!=!!t.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const n in t.attributes){if(!e.hasAttribute(n))throw new Error(`THREE.BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);const i=e.getAttribute(n),s=t.getAttribute(n);if(i.itemSize!==s.itemSize||i.normalized!==s.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(e){const t=this._instanceInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`)}validateGeometryId(e){const t=this._geometryInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`)}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new On);const e=this.boundingBox,t=this._instanceInfo;e.makeEmpty();for(let n=0,i=t.length;n<i;n++){if(t[n].active===!1)continue;const s=t[n].geometryIndex;this.getMatrixAt(n,Fi),this.getBoundingBoxAt(s,Dh).applyMatrix4(Fi),e.union(Dh)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new kn);const e=this.boundingSphere,t=this._instanceInfo;e.makeEmpty();for(let n=0,i=t.length;n<i;n++){if(t[n].active===!1)continue;const s=t[n].geometryIndex;this.getMatrixAt(n,Fi),this.getBoundingSphereAt(s,La).applyMatrix4(Fi),e.union(La)}}addInstance(e){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const n={visible:!0,active:!0,geometryIndex:e};let i=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(Nm),i=this._availableInstanceIds.shift(),this._instanceInfo[i]=n):(i=this._instanceInfo.length,this._instanceInfo.push(n));const s=this._matricesTexture;Fi.identity().toArray(s.image.data,i*16),s.needsUpdate=!0;const a=this._colorsTexture;return a&&(GA.toArray(a.image.data,i*4),a.needsUpdate=!0),this._visibilityChanged=!0,i}addGeometry(e,t=-1,n=-1){this._initializeGeometry(e),this._validateGeometry(e);const i={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},s=this._geometryInfo;i.vertexStart=this._nextVertexStart,i.reservedVertexCount=t===-1?e.getAttribute("position").count:t;const a=e.getIndex();if(a!==null&&(i.indexStart=this._nextIndexStart,i.reservedIndexCount=n===-1?a.count:n),i.indexStart!==-1&&i.indexStart+i.reservedIndexCount>this._maxIndexCount||i.vertexStart+i.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let l;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(Nm),l=this._availableGeometryIds.shift(),s[l]=i):(l=this._geometryCount,this._geometryCount++,s.push(i)),this.setGeometryAt(l,e),this._nextIndexStart=i.indexStart+i.reservedIndexCount,this._nextVertexStart=i.vertexStart+i.reservedVertexCount,l}setGeometryAt(e,t){if(e>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(t);const n=this.geometry,i=n.getIndex()!==null,s=n.getIndex(),a=t.getIndex(),o=this._geometryInfo[e];if(i&&a.count>o.reservedIndexCount||t.attributes.position.count>o.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const l=o.vertexStart,c=o.reservedVertexCount;o.vertexCount=t.getAttribute("position").count;for(const u in n.attributes){const h=t.getAttribute(u),d=n.getAttribute(u);XA(h,d,l);const f=h.itemSize;for(let p=h.count,v=c;p<v;p++){const g=l+p;for(let m=0;m<f;m++)d.setComponent(g,m,0)}d.needsUpdate=!0,d.addUpdateRange(l*f,c*f)}if(i){const u=o.indexStart,h=o.reservedIndexCount;o.indexCount=t.getIndex().count;for(let d=0;d<a.count;d++)s.setX(u+d,l+a.getX(d));for(let d=a.count,f=h;d<f;d++)s.setX(u+d,l);s.needsUpdate=!0,s.addUpdateRange(u,o.reservedIndexCount)}return o.start=i?o.indexStart:o.vertexStart,o.count=i?o.indexCount:o.vertexCount,o.boundingBox=null,t.boundingBox!==null&&(o.boundingBox=t.boundingBox.clone()),o.boundingSphere=null,t.boundingSphere!==null&&(o.boundingSphere=t.boundingSphere.clone()),this._visibilityChanged=!0,e}deleteGeometry(e){const t=this._geometryInfo;if(e>=t.length||t[e].active===!1)return this;const n=this._instanceInfo;for(let i=0,s=n.length;i<s;i++)n[i].active&&n[i].geometryIndex===e&&this.deleteInstance(i);return t[e].active=!1,this._availableGeometryIds.push(e),this._visibilityChanged=!0,this}deleteInstance(e){return this.validateInstanceId(e),this._instanceInfo[e].active=!1,this._availableInstanceIds.push(e),this._visibilityChanged=!0,this}optimize(){let e=0,t=0;const n=this._geometryInfo,i=n.map((a,o)=>o).sort((a,o)=>n[a].vertexStart-n[o].vertexStart),s=this.geometry;for(let a=0,o=n.length;a<o;a++){const l=i[a],c=n[l];if(c.active!==!1){if(s.index!==null){if(c.indexStart!==t){const{indexStart:u,vertexStart:h,reservedIndexCount:d}=c,f=s.index,p=f.array,v=e-h;for(let g=u;g<u+d;g++)p[g]=p[g]+v;f.array.copyWithin(t,u,u+d),f.addUpdateRange(t,d),c.indexStart=t}t+=c.reservedIndexCount}if(c.vertexStart!==e){const{vertexStart:u,reservedVertexCount:h}=c,d=s.attributes;for(const f in d){const p=d[f],{array:v,itemSize:g}=p;v.copyWithin(e*g,u*g,(u+h)*g),p.addUpdateRange(e*g,h*g)}c.vertexStart=e}e+=c.reservedVertexCount,c.start=s.index?c.indexStart:c.vertexStart,this._nextIndexStart=s.index?c.indexStart+c.reservedIndexCount:0,this._nextVertexStart=c.vertexStart+c.reservedVertexCount}}return this}getBoundingBoxAt(e,t){if(e>=this._geometryCount)return null;const n=this.geometry,i=this._geometryInfo[e];if(i.boundingBox===null){const s=new On,a=n.index,o=n.attributes.position;for(let l=i.start,c=i.start+i.count;l<c;l++){let u=l;a&&(u=a.getX(u)),s.expandByPoint(bc.fromBufferAttribute(o,u))}i.boundingBox=s}return t.copy(i.boundingBox),t}getBoundingSphereAt(e,t){if(e>=this._geometryCount)return null;const n=this.geometry,i=this._geometryInfo[e];if(i.boundingSphere===null){const s=new kn;this.getBoundingBoxAt(e,Dh),Dh.getCenter(s.center);const a=n.index,o=n.attributes.position;let l=0;for(let c=i.start,u=i.start+i.count;c<u;c++){let h=c;a&&(h=a.getX(h)),bc.fromBufferAttribute(o,h),l=Math.max(l,s.center.distanceToSquared(bc))}s.radius=Math.sqrt(l),i.boundingSphere=s}return t.copy(i.boundingSphere),t}setMatrixAt(e,t){this.validateInstanceId(e);const n=this._matricesTexture,i=this._matricesTexture.image.data;return t.toArray(i,e*16),n.needsUpdate=!0,this}getMatrixAt(e,t){return this.validateInstanceId(e),t.fromArray(this._matricesTexture.image.data,e*16)}setColorAt(e,t){return this.validateInstanceId(e),this._colorsTexture===null&&this._initColorsTexture(),t.toArray(this._colorsTexture.image.data,e*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(e,t){return this.validateInstanceId(e),t.fromArray(this._colorsTexture.image.data,e*4)}setVisibleAt(e,t){return this.validateInstanceId(e),this._instanceInfo[e].visible===t?this:(this._instanceInfo[e].visible=t,this._visibilityChanged=!0,this)}getVisibleAt(e){return this.validateInstanceId(e),this._instanceInfo[e].visible}setGeometryIdAt(e,t){return this.validateInstanceId(e),this.validateGeometryId(t),this._instanceInfo[e].geometryIndex=t,this}getGeometryIdAt(e){return this.validateInstanceId(e),this._instanceInfo[e].geometryIndex}getGeometryRangeAt(e,t={}){this.validateGeometryId(e);const n=this._geometryInfo[e];return t.vertexStart=n.vertexStart,t.vertexCount=n.vertexCount,t.reservedVertexCount=n.reservedVertexCount,t.indexStart=n.indexStart,t.indexCount=n.indexCount,t.reservedIndexCount=n.reservedIndexCount,t.start=n.start,t.count=n.count,t}setInstanceCount(e){const t=this._availableInstanceIds,n=this._instanceInfo;for(t.sort(Nm);t[t.length-1]===n.length;)n.pop(),t.pop();if(e<n.length)throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);const i=new Int32Array(e),s=new Int32Array(e);Pa(this._multiDrawCounts,i),Pa(this._multiDrawStarts,s),this._multiDrawCounts=i,this._multiDrawStarts=s,this._maxInstanceCount=e;const a=this._indirectTexture,o=this._matricesTexture,l=this._colorsTexture;a.dispose(),this._initIndirectTexture(),Pa(a.image.data,this._indirectTexture.image.data),o.dispose(),this._initMatricesTexture(),Pa(o.image.data,this._matricesTexture.image.data),l&&(l.dispose(),this._initColorsTexture(),Pa(l.image.data,this._colorsTexture.image.data))}setGeometrySize(e,t){const n=[...this._geometryInfo].filter(o=>o.active);if(Math.max(...n.map(o=>o.vertexStart+o.reservedVertexCount))>e)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...n.map(l=>l.indexStart+l.reservedIndexCount))>t)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);const s=this.geometry;s.dispose(),this._maxVertexCount=e,this._maxIndexCount=t,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new Lt,this._initializeGeometry(s));const a=this.geometry;s.index&&Pa(s.index.array,a.index.array);for(const o in s.attributes)Pa(s.attributes[o].array,a.attributes[o].array)}raycast(e,t){const n=this._instanceInfo,i=this._geometryInfo,s=this.matrixWorld,a=this.geometry;hi.material=this.material,hi.geometry.index=a.index,hi.geometry.attributes=a.attributes,hi.geometry.boundingBox===null&&(hi.geometry.boundingBox=new On),hi.geometry.boundingSphere===null&&(hi.geometry.boundingSphere=new kn);for(let o=0,l=n.length;o<l;o++){if(!n[o].visible||!n[o].active)continue;const c=n[o].geometryIndex,u=i[c];hi.geometry.setDrawRange(u.start,u.count),this.getMatrixAt(o,hi.matrixWorld).premultiply(s),this.getBoundingBoxAt(c,hi.geometry.boundingBox),this.getBoundingSphereAt(c,hi.geometry.boundingSphere),hi.raycast(e,Nh);for(let h=0,d=Nh.length;h<d;h++){const f=Nh[h];f.object=this,f.batchId=o,t.push(f)}Nh.length=0}hi.material=null,hi.geometry.index=null,hi.geometry.attributes={},hi.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._geometryInfo=e._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox!==null?t.boundingBox.clone():null,boundingSphere:t.boundingSphere!==null?t.boundingSphere.clone():null})),this._instanceInfo=e._instanceInfo.map(t=>({...t})),this._availableInstanceIds=e._availableInstanceIds.slice(),this._availableGeometryIds=e._availableGeometryIds.slice(),this._nextIndexStart=e._nextIndexStart,this._nextVertexStart=e._nextVertexStart,this._geometryCount=e._geometryCount,this._maxInstanceCount=e._maxInstanceCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._indirectTexture=e._indirectTexture.clone(),this._indirectTexture.image.data=this._indirectTexture.image.data.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=e._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null)}onBeforeRender(e,t,n,i,s){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const a=i.getIndex(),o=a===null?1:a.array.BYTES_PER_ELEMENT,l=this._instanceInfo,c=this._multiDrawStarts,u=this._multiDrawCounts,h=this._geometryInfo,d=this.perObjectFrustumCulled,f=this._indirectTexture,p=f.image.data,v=n.isArrayCamera?WA:Y0;d&&!n.isArrayCamera&&(Fi.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld),Y0.setFromProjectionMatrix(Fi,e.coordinateSystem));let g=0;if(this.sortObjects){Fi.copy(this.matrixWorld).invert(),bc.setFromMatrixPosition(n.matrixWorld).applyMatrix4(Fi),j0.set(0,0,-1).transformDirection(n.matrixWorld).transformDirection(Fi);for(let x=0,y=l.length;x<y;x++)if(l[x].visible&&l[x].active){const b=l[x].geometryIndex;this.getMatrixAt(x,Fi),this.getBoundingSphereAt(b,La).applyMatrix4(Fi);let M=!1;if(d&&(M=!v.intersectsSphere(La,n)),!M){const w=h[b],C=$A.subVectors(La.center,bc).dot(j0);Fm.push(w.start,w.count,C,x)}}const m=Fm.list,_=this.customSort;_===null?m.sort(s.transparent?VA:kA):_.call(this,m,n);for(let x=0,y=m.length;x<y;x++){const b=m[x];c[g]=b.start*o,u[g]=b.count,p[g]=b.index,g++}Fm.reset()}else for(let m=0,_=l.length;m<_;m++)if(l[m].visible&&l[m].active){const x=l[m].geometryIndex;let y=!1;if(d&&(this.getMatrixAt(m,Fi),this.getBoundingSphereAt(x,La).applyMatrix4(Fi),y=!v.intersectsSphere(La,n)),!y){const b=h[x];c[g]=b.start*o,u[g]=b.count,p[g]=m,g++}}f.needsUpdate=!0,this._multiDrawCount=g,this._visibilityChanged=!1}onBeforeShadow(e,t,n,i,s,a){this.onBeforeRender(e,null,i,s,a)}}let Mi=class extends $n{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Ye(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}};const Pf=new k,If=new k,J0=new ft,Sc=new yo,Fh=new kn,Om=new k,K0=new k;let Ds=class extends Wt{constructor(e=new Lt,t=new Mi){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)Pf.fromBufferAttribute(t,i-1),If.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=Pf.distanceTo(If);e.setAttribute("lineDistance",new rt(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Fh.copy(n.boundingSphere),Fh.applyMatrix4(i),Fh.radius+=s,e.ray.intersectsSphere(Fh)===!1)return;J0.copy(i).invert(),Sc.copy(e.ray).applyMatrix4(J0);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=this.isLineSegments?2:1,u=n.index,d=n.attributes.position;if(u!==null){const f=Math.max(0,a.start),p=Math.min(u.count,a.start+a.count);for(let v=f,g=p-1;v<g;v+=c){const m=u.getX(v),_=u.getX(v+1),x=Oh(this,e,Sc,l,m,_,v);x&&t.push(x)}if(this.isLineLoop){const v=u.getX(p-1),g=u.getX(f),m=Oh(this,e,Sc,l,v,g,p-1);m&&t.push(m)}}else{const f=Math.max(0,a.start),p=Math.min(d.count,a.start+a.count);for(let v=f,g=p-1;v<g;v+=c){const m=Oh(this,e,Sc,l,v,v+1,v);m&&t.push(m)}if(this.isLineLoop){const v=Oh(this,e,Sc,l,p-1,f,p-1);v&&t.push(v)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}};function Oh(r,e,t,n,i,s,a){const o=r.geometry.attributes.position;if(Pf.fromBufferAttribute(o,i),If.fromBufferAttribute(o,s),t.distanceSqToSegment(Pf,If,Om,K0)>n)return;Om.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(Om);if(!(c<e.near||c>e.far))return{distance:c,point:K0.clone().applyMatrix4(r.matrixWorld),index:a,face:null,faceIndex:null,barycoord:null,object:r}}const Q0=new k,ey=new k;let kr=class extends Ds{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)Q0.fromBufferAttribute(t,i),ey.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+Q0.distanceTo(ey);e.setAttribute("lineDistance",new rt(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}},n_=class extends Ds{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}},Sp=class extends $n{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Ye(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}};const ty=new ft,tv=new yo,Uh=new kn,Bh=new k;let wp=class extends Wt{constructor(e=new Lt,t=new Sp){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Uh.copy(n.boundingSphere),Uh.applyMatrix4(i),Uh.radius+=s,e.ray.intersectsSphere(Uh)===!1)return;ty.copy(i).invert(),tv.copy(e.ray).applyMatrix4(ty);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=n.index,h=n.attributes.position;if(c!==null){const d=Math.max(0,a.start),f=Math.min(c.count,a.start+a.count);for(let p=d,v=f;p<v;p++){const g=c.getX(p);Bh.fromBufferAttribute(h,g),ny(Bh,g,l,i,e,t,this)}}else{const d=Math.max(0,a.start),f=Math.min(h.count,a.start+a.count);for(let p=d,v=f;p<v;p++)Bh.fromBufferAttribute(h,p),ny(Bh,p,l,i,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}};function ny(r,e,t,n,i,s,a){const o=tv.distanceSqToPoint(r);if(o<t){const l=new k;tv.closestPointToPoint(r,l),l.applyMatrix4(n);const c=i.ray.origin.distanceTo(l);if(c<i.near||c>i.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,faceIndex:null,barycoord:null,object:a})}}let yS=class extends Vn{constructor(e,t,n,i,s=xn,a=xn,o,l,c){super(e,t,n,i,s,a,o,l,c),this.isVideoTexture=!0,this.generateMipmaps=!1;const u=this;function h(){u.needsUpdate=!0,e.requestVideoFrameCallback(h)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(h)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}};class qA extends yS{constructor(e,t,n,i,s,a,o,l){super({},e,t,n,i,s,a,o,l),this.isVideoFrameTexture=!0}update(){}clone(){return new this.constructor().copy(this)}setFrame(e){this.image=e,this.needsUpdate=!0}}class ZA extends Vn{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=Wn,this.minFilter=Wn,this.generateMipmaps=!1,this.needsUpdate=!0}}let Tp=class extends Vn{constructor(e,t,n,i,s,a,o,l,c,u,h,d){super(null,a,o,l,c,u,i,s,h,d),this.isCompressedTexture=!0,this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}};class YA extends Tp{constructor(e,t,n,i,s,a){super(e,t,n,s,a),this.isCompressedArrayTexture=!0,this.image.depth=i,this.wrapR=tr,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class jA extends Tp{constructor(e,t,n){super(void 0,e[0].width,e[0].height,t,n,Ps),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}let xS=class extends Vn{constructor(e,t,n,i,s,a,o,l,c){super(e,t,n,i,s,a,o,l,c),this.isCanvasTexture=!0,this.needsUpdate=!0}},Ep=class extends Vn{constructor(e,t,n=Is,i,s,a,o=Wn,l=Wn,c,u=Dl){if(u!==Dl&&u!==Nl)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");super(null,i,s,a,o,l,u,n,c),this.isDepthTexture=!0,this.image={width:e,height:t},this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.source=new ra(Object.assign({},e.image)),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}};class JA extends Ep{constructor(e=1,t=1,n=1){super(e,t),this.isDepthArrayTexture=!0,this.image={width:e,height:t,depth:n},this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class Ap extends Lt{constructor(e=1,t=1,n=4,i=8,s=1){super(),this.type="CapsuleGeometry",this.parameters={radius:e,height:t,capSegments:n,radialSegments:i,heightSegments:s},t=Math.max(0,t),n=Math.max(1,Math.floor(n)),i=Math.max(3,Math.floor(i)),s=Math.max(1,Math.floor(s));const a=[],o=[],l=[],c=[],u=t/2,h=Math.PI/2*e,d=t,f=2*h+d,p=n*2+s,v=i+1,g=new k,m=new k;for(let _=0;_<=p;_++){let x=0,y=0,b=0,M=0;if(_<=n){const T=_/n,S=T*Math.PI/2;y=-u-e*Math.cos(S),b=e*Math.sin(S),M=-e*Math.cos(S),x=T*h}else if(_<=n+s){const T=(_-n)/s;y=-u+T*t,b=e,M=0,x=h+T*d}else{const T=(_-n-s)/n,S=T*Math.PI/2;y=u+e*Math.sin(S),b=e*Math.cos(S),M=e*Math.sin(S),x=h+d+T*h}const w=Math.max(0,Math.min(1,x/f));let C=0;_===0?C=.5/i:_===p&&(C=-.5/i);for(let T=0;T<=i;T++){const S=T/i,R=S*Math.PI*2,H=Math.sin(R),D=Math.cos(R);m.x=-b*D,m.y=y,m.z=b*H,o.push(m.x,m.y,m.z),g.set(-b*D,M,b*H),g.normalize(),l.push(g.x,g.y,g.z),c.push(S+C,w)}if(_>0){const T=(_-1)*v;for(let S=0;S<i;S++){const R=T+S,H=T+S+1,D=_*v+S,O=_*v+S+1;a.push(R,H,D),a.push(H,O,D)}}}this.setIndex(a),this.setAttribute("position",new rt(o,3)),this.setAttribute("normal",new rt(l,3)),this.setAttribute("uv",new rt(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ap(e.radius,e.height,e.capSegments,e.radialSegments,e.heightSegments)}}class Cp extends Lt{constructor(e=1,t=32,n=0,i=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const s=[],a=[],o=[],l=[],c=new k,u=new Pe;a.push(0,0,0),o.push(0,0,1),l.push(.5,.5);for(let h=0,d=3;h<=t;h++,d+=3){const f=n+h/t*i;c.x=e*Math.cos(f),c.y=e*Math.sin(f),a.push(c.x,c.y,c.z),o.push(0,0,1),u.x=(a[d]/e+1)/2,u.y=(a[d+1]/e+1)/2,l.push(u.x,u.y)}for(let h=1;h<=t;h++)s.push(h,h+1,0);this.setIndex(s),this.setAttribute("position",new rt(a,3)),this.setAttribute("normal",new rt(o,3)),this.setAttribute("uv",new rt(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Cp(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class Qu extends Lt{constructor(e=1,t=1,n=1,i=32,s=1,a=!1,o=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:a,thetaStart:o,thetaLength:l};const c=this;i=Math.floor(i),s=Math.floor(s);const u=[],h=[],d=[],f=[];let p=0;const v=[],g=n/2;let m=0;_(),a===!1&&(e>0&&x(!0),t>0&&x(!1)),this.setIndex(u),this.setAttribute("position",new rt(h,3)),this.setAttribute("normal",new rt(d,3)),this.setAttribute("uv",new rt(f,2));function _(){const y=new k,b=new k;let M=0;const w=(t-e)/n;for(let C=0;C<=s;C++){const T=[],S=C/s,R=S*(t-e)+e;for(let H=0;H<=i;H++){const D=H/i,O=D*l+o,G=Math.sin(O),P=Math.cos(O);b.x=R*G,b.y=-S*n+g,b.z=R*P,h.push(b.x,b.y,b.z),y.set(G,w,P).normalize(),d.push(y.x,y.y,y.z),f.push(D,1-S),T.push(p++)}v.push(T)}for(let C=0;C<i;C++)for(let T=0;T<s;T++){const S=v[T][C],R=v[T+1][C],H=v[T+1][C+1],D=v[T][C+1];(e>0||T!==0)&&(u.push(S,R,D),M+=3),(t>0||T!==s-1)&&(u.push(R,H,D),M+=3)}c.addGroup(m,M,0),m+=M}function x(y){const b=p,M=new Pe,w=new k;let C=0;const T=y===!0?e:t,S=y===!0?1:-1;for(let H=1;H<=i;H++)h.push(0,g*S,0),d.push(0,S,0),f.push(.5,.5),p++;const R=p;for(let H=0;H<=i;H++){const O=H/i*l+o,G=Math.cos(O),P=Math.sin(O);w.x=T*P,w.y=g*S,w.z=T*G,h.push(w.x,w.y,w.z),d.push(0,S,0),M.x=G*.5+.5,M.y=P*.5*S+.5,f.push(M.x,M.y),p++}for(let H=0;H<i;H++){const D=b+H,O=R+H;y===!0?u.push(O,O+1,D):u.push(O+1,O,D),C+=3}c.addGroup(m,C,y===!0?1:2),m+=C}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Qu(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class eh extends Qu{constructor(e=1,t=1,n=32,i=1,s=!1,a=0,o=Math.PI*2){super(0,e,t,n,i,s,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:s,thetaStart:a,thetaLength:o}}static fromJSON(e){return new eh(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Ma extends Lt{constructor(e=[],t=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const s=[],a=[];o(i),c(n),u(),this.setAttribute("position",new rt(s,3)),this.setAttribute("normal",new rt(s.slice(),3)),this.setAttribute("uv",new rt(a,2)),i===0?this.computeVertexNormals():this.normalizeNormals();function o(_){const x=new k,y=new k,b=new k;for(let M=0;M<t.length;M+=3)f(t[M+0],x),f(t[M+1],y),f(t[M+2],b),l(x,y,b,_)}function l(_,x,y,b){const M=b+1,w=[];for(let C=0;C<=M;C++){w[C]=[];const T=_.clone().lerp(y,C/M),S=x.clone().lerp(y,C/M),R=M-C;for(let H=0;H<=R;H++)H===0&&C===M?w[C][H]=T:w[C][H]=T.clone().lerp(S,H/R)}for(let C=0;C<M;C++)for(let T=0;T<2*(M-C)-1;T++){const S=Math.floor(T/2);T%2===0?(d(w[C][S+1]),d(w[C+1][S]),d(w[C][S])):(d(w[C][S+1]),d(w[C+1][S+1]),d(w[C+1][S]))}}function c(_){const x=new k;for(let y=0;y<s.length;y+=3)x.x=s[y+0],x.y=s[y+1],x.z=s[y+2],x.normalize().multiplyScalar(_),s[y+0]=x.x,s[y+1]=x.y,s[y+2]=x.z}function u(){const _=new k;for(let x=0;x<s.length;x+=3){_.x=s[x+0],_.y=s[x+1],_.z=s[x+2];const y=g(_)/2/Math.PI+.5,b=m(_)/Math.PI+.5;a.push(y,1-b)}p(),h()}function h(){for(let _=0;_<a.length;_+=6){const x=a[_+0],y=a[_+2],b=a[_+4],M=Math.max(x,y,b),w=Math.min(x,y,b);M>.9&&w<.1&&(x<.2&&(a[_+0]+=1),y<.2&&(a[_+2]+=1),b<.2&&(a[_+4]+=1))}}function d(_){s.push(_.x,_.y,_.z)}function f(_,x){const y=_*3;x.x=e[y+0],x.y=e[y+1],x.z=e[y+2]}function p(){const _=new k,x=new k,y=new k,b=new k,M=new Pe,w=new Pe,C=new Pe;for(let T=0,S=0;T<s.length;T+=9,S+=6){_.set(s[T+0],s[T+1],s[T+2]),x.set(s[T+3],s[T+4],s[T+5]),y.set(s[T+6],s[T+7],s[T+8]),M.set(a[S+0],a[S+1]),w.set(a[S+2],a[S+3]),C.set(a[S+4],a[S+5]),b.copy(_).add(x).add(y).divideScalar(3);const R=g(b);v(M,S+0,_,R),v(w,S+2,x,R),v(C,S+4,y,R)}}function v(_,x,y,b){b<0&&_.x===1&&(a[x]=_.x-1),y.x===0&&y.z===0&&(a[x]=b/2/Math.PI+.5)}function g(_){return Math.atan2(_.z,-_.x)}function m(_){return Math.atan2(-_.y,Math.sqrt(_.x*_.x+_.z*_.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ma(e.vertices,e.indices,e.radius,e.details)}}class Rp extends Ma{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=1/n,s=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(s,a,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Rp(e.radius,e.detail)}}const zh=new k,kh=new k,Um=new k,Vh=new na;class MS extends Lt{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),s=Math.cos(Qa*t),a=e.getIndex(),o=e.getAttribute("position"),l=a?a.count:o.count,c=[0,0,0],u=["a","b","c"],h=new Array(3),d={},f=[];for(let p=0;p<l;p+=3){a?(c[0]=a.getX(p),c[1]=a.getX(p+1),c[2]=a.getX(p+2)):(c[0]=p,c[1]=p+1,c[2]=p+2);const{a:v,b:g,c:m}=Vh;if(v.fromBufferAttribute(o,c[0]),g.fromBufferAttribute(o,c[1]),m.fromBufferAttribute(o,c[2]),Vh.getNormal(Um),h[0]=`${Math.round(v.x*i)},${Math.round(v.y*i)},${Math.round(v.z*i)}`,h[1]=`${Math.round(g.x*i)},${Math.round(g.y*i)},${Math.round(g.z*i)}`,h[2]=`${Math.round(m.x*i)},${Math.round(m.y*i)},${Math.round(m.z*i)}`,!(h[0]===h[1]||h[1]===h[2]||h[2]===h[0]))for(let _=0;_<3;_++){const x=(_+1)%3,y=h[_],b=h[x],M=Vh[u[_]],w=Vh[u[x]],C=`${y}_${b}`,T=`${b}_${y}`;T in d&&d[T]?(Um.dot(d[T].normal)<=s&&(f.push(M.x,M.y,M.z),f.push(w.x,w.y,w.z)),d[T]=null):C in d||(d[C]={index0:c[_],index1:c[x],normal:Um.clone()})}}for(const p in d)if(d[p]){const{index0:v,index1:g}=d[p];zh.fromBufferAttribute(o,v),kh.fromBufferAttribute(o,g),f.push(zh.x,zh.y,zh.z),f.push(kh.x,kh.y,kh.z)}this.setAttribute("position",new rt(f,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}let Vr=class{constructor(){this.type="Curve",this.arcLengthDivisions=200,this.needsUpdate=!1,this.cacheArcLengths=null}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.")}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let a=1;a<=e;a++)n=this.getPoint(a/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t=null){const n=this.getLengths();let i=0;const s=n.length;let a;t?a=t:a=e*n[s-1];let o=0,l=s-1,c;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),c=n[i]-a,c<0)o=i+1;else if(c>0)l=i-1;else{l=i;break}if(i=l,n[i]===a)return i/(s-1);const u=n[i],d=n[i+1]-u,f=(a-u)/d;return(i+f)/(s-1)}getTangent(e,t){let i=e-1e-4,s=e+1e-4;i<0&&(i=0),s>1&&(s=1);const a=this.getPoint(i),o=this.getPoint(s),l=t||(a.isVector2?new Pe:new k);return l.copy(o).sub(a).normalize(),l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t=!1){const n=new k,i=[],s=[],a=[],o=new k,l=new ft;for(let f=0;f<=e;f++){const p=f/e;i[f]=this.getTangentAt(p,new k)}s[0]=new k,a[0]=new k;let c=Number.MAX_VALUE;const u=Math.abs(i[0].x),h=Math.abs(i[0].y),d=Math.abs(i[0].z);u<=c&&(c=u,n.set(1,0,0)),h<=c&&(c=h,n.set(0,1,0)),d<=c&&n.set(0,0,1),o.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],o),a[0].crossVectors(i[0],s[0]);for(let f=1;f<=e;f++){if(s[f]=s[f-1].clone(),a[f]=a[f-1].clone(),o.crossVectors(i[f-1],i[f]),o.length()>Number.EPSILON){o.normalize();const p=Math.acos(Ct(i[f-1].dot(i[f]),-1,1));s[f].applyMatrix4(l.makeRotationAxis(o,p))}a[f].crossVectors(i[f],s[f])}if(t===!0){let f=Math.acos(Ct(s[0].dot(s[e]),-1,1));f/=e,i[0].dot(o.crossVectors(s[0],s[e]))>0&&(f=-f);for(let p=1;p<=e;p++)s[p].applyMatrix4(l.makeRotationAxis(i[p],f*p)),a[p].crossVectors(i[p],s[p])}return{tangents:i,normals:s,binormals:a}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}},Lp=class extends Vr{constructor(e=0,t=0,n=1,i=1,s=0,a=Math.PI*2,o=!1,l=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=a,this.aClockwise=o,this.aRotation=l}getPoint(e,t=new Pe){const n=t,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const a=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(a?s=0:s=i),this.aClockwise===!0&&!a&&(s===i?s=-i:s=s-i);const o=this.aStartAngle+e*s;let l=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const u=Math.cos(this.aRotation),h=Math.sin(this.aRotation),d=l-this.aX,f=c-this.aY;l=d*u-f*h+this.aX,c=d*h+f*u+this.aY}return n.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}},bS=class extends Lp{constructor(e,t,n,i,s,a){super(e,t,n,n,i,s,a),this.isArcCurve=!0,this.type="ArcCurve"}};function i_(){let r=0,e=0,t=0,n=0;function i(s,a,o,l){r=s,e=o,t=-3*s+3*a-2*o-l,n=2*s-2*a+o+l}return{initCatmullRom:function(s,a,o,l,c){i(a,o,c*(o-s),c*(l-a))},initNonuniformCatmullRom:function(s,a,o,l,c,u,h){let d=(a-s)/c-(o-s)/(c+u)+(o-a)/u,f=(o-a)/u-(l-a)/(u+h)+(l-o)/h;d*=u,f*=u,i(a,o,d,f)},calc:function(s){const a=s*s,o=a*s;return r+e*s+t*a+n*o}}}const Hh=new k,Bm=new i_,zm=new i_,km=new i_;let SS=class extends Vr{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new k){const n=t,i=this.points,s=i.length,a=(s-(this.closed?0:1))*e;let o=Math.floor(a),l=a-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/s)+1)*s:l===0&&o===s-1&&(o=s-2,l=1);let c,u;this.closed||o>0?c=i[(o-1)%s]:(Hh.subVectors(i[0],i[1]).add(i[0]),c=Hh);const h=i[o%s],d=i[(o+1)%s];if(this.closed||o+2<s?u=i[(o+2)%s]:(Hh.subVectors(i[s-1],i[s-2]).add(i[s-1]),u=Hh),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let p=Math.pow(c.distanceToSquared(h),f),v=Math.pow(h.distanceToSquared(d),f),g=Math.pow(d.distanceToSquared(u),f);v<1e-4&&(v=1),p<1e-4&&(p=v),g<1e-4&&(g=v),Bm.initNonuniformCatmullRom(c.x,h.x,d.x,u.x,p,v,g),zm.initNonuniformCatmullRom(c.y,h.y,d.y,u.y,p,v,g),km.initNonuniformCatmullRom(c.z,h.z,d.z,u.z,p,v,g)}else this.curveType==="catmullrom"&&(Bm.initCatmullRom(c.x,h.x,d.x,u.x,this.tension),zm.initCatmullRom(c.y,h.y,d.y,u.y,this.tension),km.initCatmullRom(c.z,h.z,d.z,u.z,this.tension));return n.set(Bm.calc(l),zm.calc(l),km.calc(l)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new k().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}};function iy(r,e,t,n,i){const s=(n-e)*.5,a=(i-t)*.5,o=r*r,l=r*o;return(2*t-2*n+s+a)*l+(-3*t+3*n-2*s-a)*o+s*r+t}function KA(r,e){const t=1-r;return t*t*e}function QA(r,e){return 2*(1-r)*r*e}function eC(r,e){return r*r*e}function eu(r,e,t,n){return KA(r,e)+QA(r,t)+eC(r,n)}function tC(r,e){const t=1-r;return t*t*t*e}function nC(r,e){const t=1-r;return 3*t*t*r*e}function iC(r,e){return 3*(1-r)*r*r*e}function rC(r,e){return r*r*r*e}function tu(r,e,t,n,i){return tC(r,e)+nC(r,t)+iC(r,n)+rC(r,i)}let r_=class extends Vr{constructor(e=new Pe,t=new Pe,n=new Pe,i=new Pe){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new Pe){const n=t,i=this.v0,s=this.v1,a=this.v2,o=this.v3;return n.set(tu(e,i.x,s.x,a.x,o.x),tu(e,i.y,s.y,a.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}},wS=class extends Vr{constructor(e=new k,t=new k,n=new k,i=new k){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new k){const n=t,i=this.v0,s=this.v1,a=this.v2,o=this.v3;return n.set(tu(e,i.x,s.x,a.x,o.x),tu(e,i.y,s.y,a.y,o.y),tu(e,i.z,s.z,a.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}},s_=class extends Vr{constructor(e=new Pe,t=new Pe){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new Pe){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new Pe){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},TS=class extends Vr{constructor(e=new k,t=new k){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new k){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new k){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},a_=class extends Vr{constructor(e=new Pe,t=new Pe,n=new Pe){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new Pe){const n=t,i=this.v0,s=this.v1,a=this.v2;return n.set(eu(e,i.x,s.x,a.x),eu(e,i.y,s.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},o_=class extends Vr{constructor(e=new k,t=new k,n=new k){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new k){const n=t,i=this.v0,s=this.v1,a=this.v2;return n.set(eu(e,i.x,s.x,a.x),eu(e,i.y,s.y,a.y),eu(e,i.z,s.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}},l_=class extends Vr{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new Pe){const n=t,i=this.points,s=(i.length-1)*e,a=Math.floor(s),o=s-a,l=i[a===0?a:a-1],c=i[a],u=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(iy(o,l.x,c.x,u.x,h.x),iy(o,l.y,c.y,u.y,h.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new Pe().fromArray(i))}return this}};var Df=Object.freeze({__proto__:null,ArcCurve:bS,CatmullRomCurve3:SS,CubicBezierCurve:r_,CubicBezierCurve3:wS,EllipseCurve:Lp,LineCurve:s_,LineCurve3:TS,QuadraticBezierCurve:a_,QuadraticBezierCurve3:o_,SplineCurve:l_});let ES=class extends Vr{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const n=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new Df[n](t,e))}return this}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const a=i[s]-n,o=this.curves[s],l=o.getLength(),c=l===0?0:1-a/l;return o.getPointAt(c,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const a=s[i],o=a.isEllipseCurve?e*2:a.isLineCurve||a.isLineCurve3?1:a.isSplineCurve?e*a.points.length:e,l=a.getPoints(o);for(let c=0;c<l.length;c++){const u=l[c];n&&n.equals(u)||(t.push(u),n=u)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new Df[i.type]().fromJSON(i))}return this}},Nf=class extends ES{constructor(e){super(),this.type="Path",this.currentPoint=new Pe,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new s_(this.currentPoint.clone(),new Pe(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new a_(this.currentPoint.clone(),new Pe(e,t),new Pe(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,a){const o=new r_(this.currentPoint.clone(),new Pe(e,t),new Pe(n,i),new Pe(s,a));return this.curves.push(o),this.currentPoint.set(s,a),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new l_(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,a){const o=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+o,t+l,n,i,s,a),this}absarc(e,t,n,i,s,a){return this.absellipse(e,t,n,n,i,s,a),this}ellipse(e,t,n,i,s,a,o,l){const c=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(e+c,t+u,n,i,s,a,o,l),this}absellipse(e,t,n,i,s,a,o,l){const c=new Lp(e,t,n,i,s,a,o,l);if(this.curves.length>0){const h=c.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(c);const u=c.getPoint(1);return this.currentPoint.copy(u),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}},eo=class extends Nf{constructor(e){super(e),this.uuid=rr(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new Nf().fromJSON(i))}return this}};function sC(r,e,t=2){const n=e&&e.length,i=n?e[0]*t:r.length;let s=AS(r,0,i,t,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c;if(n&&(s=uC(r,e,s,t)),r.length>80*t){o=1/0,l=1/0;let u=-1/0,h=-1/0;for(let d=t;d<i;d+=t){const f=r[d],p=r[d+1];f<o&&(o=f),p<l&&(l=p),f>u&&(u=f),p>h&&(h=p)}c=Math.max(u-o,h-l),c=c!==0?32767/c:0}return yu(s,a,t,o,l,c,0),a}function AS(r,e,t,n,i){let s;if(i===MC(r,e,t,n)>0)for(let a=e;a<t;a+=n)s=ry(a/n|0,r[a],r[a+1],s);else for(let a=t-n;a>=e;a-=n)s=ry(a/n|0,r[a],r[a+1],s);return s&&kl(s,s.next)&&(Mu(s),s=s.next),s}function oo(r,e){if(!r)return r;e||(e=r);let t=r,n;do if(n=!1,!t.steiner&&(kl(t,t.next)||wn(t.prev,t,t.next)===0)){if(Mu(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function yu(r,e,t,n,i,s,a){if(!r)return;!a&&s&&mC(r,n,i,s);let o=r;for(;r.prev!==r.next;){const l=r.prev,c=r.next;if(s?oC(r,n,i,s):aC(r)){e.push(l.i,r.i,c.i),Mu(r),r=c.next,o=c.next;continue}if(r=c,r===o){a?a===1?(r=lC(oo(r),e),yu(r,e,t,n,i,s,2)):a===2&&cC(r,e,t,n,i,s):yu(oo(r),e,t,n,i,s,1);break}}}function aC(r){const e=r.prev,t=r,n=r.next;if(wn(e,t,n)>=0)return!1;const i=e.x,s=t.x,a=n.x,o=e.y,l=t.y,c=n.y,u=Math.min(i,s,a),h=Math.min(o,l,c),d=Math.max(i,s,a),f=Math.max(o,l,c);let p=n.next;for(;p!==e;){if(p.x>=u&&p.x<=d&&p.y>=h&&p.y<=f&&Bc(i,o,s,l,a,c,p.x,p.y)&&wn(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function oC(r,e,t,n){const i=r.prev,s=r,a=r.next;if(wn(i,s,a)>=0)return!1;const o=i.x,l=s.x,c=a.x,u=i.y,h=s.y,d=a.y,f=Math.min(o,l,c),p=Math.min(u,h,d),v=Math.max(o,l,c),g=Math.max(u,h,d),m=nv(f,p,e,t,n),_=nv(v,g,e,t,n);let x=r.prevZ,y=r.nextZ;for(;x&&x.z>=m&&y&&y.z<=_;){if(x.x>=f&&x.x<=v&&x.y>=p&&x.y<=g&&x!==i&&x!==a&&Bc(o,u,l,h,c,d,x.x,x.y)&&wn(x.prev,x,x.next)>=0||(x=x.prevZ,y.x>=f&&y.x<=v&&y.y>=p&&y.y<=g&&y!==i&&y!==a&&Bc(o,u,l,h,c,d,y.x,y.y)&&wn(y.prev,y,y.next)>=0))return!1;y=y.nextZ}for(;x&&x.z>=m;){if(x.x>=f&&x.x<=v&&x.y>=p&&x.y<=g&&x!==i&&x!==a&&Bc(o,u,l,h,c,d,x.x,x.y)&&wn(x.prev,x,x.next)>=0)return!1;x=x.prevZ}for(;y&&y.z<=_;){if(y.x>=f&&y.x<=v&&y.y>=p&&y.y<=g&&y!==i&&y!==a&&Bc(o,u,l,h,c,d,y.x,y.y)&&wn(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function lC(r,e){let t=r;do{const n=t.prev,i=t.next.next;!kl(n,i)&&RS(n,t,t.next,i)&&xu(n,i)&&xu(i,n)&&(e.push(n.i,t.i,i.i),Mu(t),Mu(t.next),t=r=i),t=t.next}while(t!==r);return oo(t)}function cC(r,e,t,n,i,s){let a=r;do{let o=a.next.next;for(;o!==a.prev;){if(a.i!==o.i&&_C(a,o)){let l=LS(a,o);a=oo(a,a.next),l=oo(l,l.next),yu(a,e,t,n,i,s,0),yu(l,e,t,n,i,s,0);return}o=o.next}a=a.next}while(a!==r)}function uC(r,e,t,n){const i=[];for(let s=0,a=e.length;s<a;s++){const o=e[s]*n,l=s<a-1?e[s+1]*n:r.length,c=AS(r,o,l,n,!1);c===c.next&&(c.steiner=!0),i.push(vC(c))}i.sort(hC);for(let s=0;s<i.length;s++)t=dC(i[s],t);return t}function hC(r,e){let t=r.x-e.x;if(t===0&&(t=r.y-e.y,t===0)){const n=(r.next.y-r.y)/(r.next.x-r.x),i=(e.next.y-e.y)/(e.next.x-e.x);t=n-i}return t}function dC(r,e){const t=fC(r,e);if(!t)return e;const n=LS(t,r);return oo(n,n.next),oo(t,t.next)}function fC(r,e){let t=e;const n=r.x,i=r.y;let s=-1/0,a;if(kl(r,t))return t;do{if(kl(r,t.next))return t.next;if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const h=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(h<=n&&h>s&&(s=h,a=t.x<t.next.x?t:t.next,h===n))return a}t=t.next}while(t!==e);if(!a)return null;const o=a,l=a.x,c=a.y;let u=1/0;t=a;do{if(n>=t.x&&t.x>=l&&n!==t.x&&CS(i<c?n:s,i,l,c,i<c?s:n,i,t.x,t.y)){const h=Math.abs(i-t.y)/(n-t.x);xu(t,r)&&(h<u||h===u&&(t.x>a.x||t.x===a.x&&pC(a,t)))&&(a=t,u=h)}t=t.next}while(t!==o);return a}function pC(r,e){return wn(r.prev,r,e.prev)<0&&wn(e.next,r,r.next)<0}function mC(r,e,t,n){let i=r;do i.z===0&&(i.z=nv(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==r);i.prevZ.nextZ=null,i.prevZ=null,gC(i)}function gC(r){let e,t=1;do{let n=r,i;r=null;let s=null;for(e=0;n;){e++;let a=n,o=0;for(let c=0;c<t&&(o++,a=a.nextZ,!!a);c++);let l=t;for(;o>0||l>0&&a;)o!==0&&(l===0||!a||n.z<=a.z)?(i=n,n=n.nextZ,o--):(i=a,a=a.nextZ,l--),s?s.nextZ=i:r=i,i.prevZ=s,s=i;n=a}s.nextZ=null,t*=2}while(e>1);return r}function nv(r,e,t,n,i){return r=(r-t)*i|0,e=(e-n)*i|0,r=(r|r<<8)&16711935,r=(r|r<<4)&252645135,r=(r|r<<2)&858993459,r=(r|r<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,r|e<<1}function vC(r){let e=r,t=r;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==r);return t}function CS(r,e,t,n,i,s,a,o){return(i-a)*(e-o)>=(r-a)*(s-o)&&(r-a)*(n-o)>=(t-a)*(e-o)&&(t-a)*(s-o)>=(i-a)*(n-o)}function Bc(r,e,t,n,i,s,a,o){return!(r===a&&e===o)&&CS(r,e,t,n,i,s,a,o)}function _C(r,e){return r.next.i!==e.i&&r.prev.i!==e.i&&!yC(r,e)&&(xu(r,e)&&xu(e,r)&&xC(r,e)&&(wn(r.prev,r,e.prev)||wn(r,e.prev,e))||kl(r,e)&&wn(r.prev,r,r.next)>0&&wn(e.prev,e,e.next)>0)}function wn(r,e,t){return(e.y-r.y)*(t.x-e.x)-(e.x-r.x)*(t.y-e.y)}function kl(r,e){return r.x===e.x&&r.y===e.y}function RS(r,e,t,n){const i=Wh(wn(r,e,t)),s=Wh(wn(r,e,n)),a=Wh(wn(t,n,r)),o=Wh(wn(t,n,e));return!!(i!==s&&a!==o||i===0&&Gh(r,t,e)||s===0&&Gh(r,n,e)||a===0&&Gh(t,r,n)||o===0&&Gh(t,e,n))}function Gh(r,e,t){return e.x<=Math.max(r.x,t.x)&&e.x>=Math.min(r.x,t.x)&&e.y<=Math.max(r.y,t.y)&&e.y>=Math.min(r.y,t.y)}function Wh(r){return r>0?1:r<0?-1:0}function yC(r,e){let t=r;do{if(t.i!==r.i&&t.next.i!==r.i&&t.i!==e.i&&t.next.i!==e.i&&RS(t,t.next,r,e))return!0;t=t.next}while(t!==r);return!1}function xu(r,e){return wn(r.prev,r,r.next)<0?wn(r,e,r.next)>=0&&wn(r,r.prev,e)>=0:wn(r,e,r.prev)<0||wn(r,r.next,e)<0}function xC(r,e){let t=r,n=!1;const i=(r.x+e.x)/2,s=(r.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==r);return n}function LS(r,e){const t=iv(r.i,r.x,r.y),n=iv(e.i,e.x,e.y),i=r.next,s=e.prev;return r.next=e,e.prev=r,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function ry(r,e,t,n){const i=iv(r,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function Mu(r){r.next.prev=r.prev,r.prev.next=r.next,r.prevZ&&(r.prevZ.nextZ=r.nextZ),r.nextZ&&(r.nextZ.prevZ=r.prevZ)}function iv(r,e,t){return{i:r,x:e,y:t,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}function MC(r,e,t,n){let i=0;for(let s=e,a=t-n;s<t;s+=n)i+=(r[a]-r[s])*(r[s+1]+r[a+1]),a=s;return i}let bC=class{static triangulate(e,t,n=2){return sC(e,t,n)}},Ts=class PS{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return PS.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];sy(e),ay(n,e);let a=e.length;t.forEach(sy);for(let l=0;l<t.length;l++)i.push(a),a+=t[l].length,ay(n,t[l]);const o=bC.triangulate(n,i);for(let l=0;l<o.length;l+=3)s.push(o.slice(l,l+3));return s}};function sy(r){const e=r.length;e>2&&r[e-1].equals(r[0])&&r.pop()}function ay(r,e){for(let t=0;t<e.length;t++)r.push(e[t].x),r.push(e[t].y)}let IS=class DS extends Lt{constructor(e=new eo([new Pe(.5,.5),new Pe(-.5,.5),new Pe(-.5,-.5),new Pe(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let o=0,l=e.length;o<l;o++){const c=e[o];a(c)}this.setAttribute("position",new rt(i,3)),this.setAttribute("uv",new rt(s,2)),this.computeVertexNormals();function a(o){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,u=t.steps!==void 0?t.steps:1,h=t.depth!==void 0?t.depth:1;let d=t.bevelEnabled!==void 0?t.bevelEnabled:!0,f=t.bevelThickness!==void 0?t.bevelThickness:.2,p=t.bevelSize!==void 0?t.bevelSize:f-.1,v=t.bevelOffset!==void 0?t.bevelOffset:0,g=t.bevelSegments!==void 0?t.bevelSegments:3;const m=t.extrudePath,_=t.UVGenerator!==void 0?t.UVGenerator:SC;let x,y=!1,b,M,w,C;m&&(x=m.getSpacedPoints(u),y=!0,d=!1,b=m.computeFrenetFrames(u,!1),M=new k,w=new k,C=new k),d||(g=0,f=0,p=0,v=0);const T=o.extractPoints(c);let S=T.shape;const R=T.holes;if(!Ts.isClockWise(S)){S=S.reverse();for(let N=0,pe=R.length;N<pe;N++){const ie=R[N];Ts.isClockWise(ie)&&(R[N]=ie.reverse())}}function D(N){const ie=10000000000000001e-36;let F=N[0];for(let I=1;I<=N.length;I++){const oe=I%N.length,j=N[oe],L=j.x-F.x,A=j.y-F.y,Z=L*L+A*A,ee=Math.max(Math.abs(j.x),Math.abs(j.y),Math.abs(F.x),Math.abs(F.y)),V=ie*ee*ee;if(Z<=V){N.splice(oe,1),I--;continue}F=j}}D(S),R.forEach(D);const O=R.length,G=S;for(let N=0;N<O;N++){const pe=R[N];S=S.concat(pe)}function P(N,pe,ie){return pe||console.error("THREE.ExtrudeGeometry: vec does not exist"),N.clone().addScaledVector(pe,ie)}const z=S.length;function W(N,pe,ie){let F,I,oe;const j=N.x-pe.x,L=N.y-pe.y,A=ie.x-N.x,Z=ie.y-N.y,ee=j*j+L*L,V=j*Z-L*A;if(Math.abs(V)>Number.EPSILON){const Y=Math.sqrt(ee),se=Math.sqrt(A*A+Z*Z),le=pe.x-L/Y,ce=pe.y+j/Y,Ie=ie.x-Z/se,Se=ie.y+A/se,De=((Ie-le)*Z-(Se-ce)*A)/(j*Z-L*A);F=le+j*De-N.x,I=ce+L*De-N.y;const nt=F*F+I*I;if(nt<=2)return new Pe(F,I);oe=Math.sqrt(nt/2)}else{let Y=!1;j>Number.EPSILON?A>Number.EPSILON&&(Y=!0):j<-Number.EPSILON?A<-Number.EPSILON&&(Y=!0):Math.sign(L)===Math.sign(Z)&&(Y=!0),Y?(F=-L,I=j,oe=Math.sqrt(ee)):(F=j,I=L,oe=Math.sqrt(ee/2))}return new Pe(F/oe,I/oe)}const X=[];for(let N=0,pe=G.length,ie=pe-1,F=N+1;N<pe;N++,ie++,F++)ie===pe&&(ie=0),F===pe&&(F=0),X[N]=W(G[N],G[ie],G[F]);const re=[];let ne,be=X.concat();for(let N=0,pe=O;N<pe;N++){const ie=R[N];ne=[];for(let F=0,I=ie.length,oe=I-1,j=F+1;F<I;F++,oe++,j++)oe===I&&(oe=0),j===I&&(j=0),ne[F]=W(ie[F],ie[oe],ie[j]);re.push(ne),be=be.concat(ne)}let _e;if(g===0)_e=Ts.triangulateShape(G,R);else{const N=[],pe=[];for(let ie=0;ie<g;ie++){const F=ie/g,I=f*Math.cos(F*Math.PI/2),oe=p*Math.sin(F*Math.PI/2)+v;for(let j=0,L=G.length;j<L;j++){const A=P(G[j],X[j],oe);Ce(A.x,A.y,-I),F===0&&N.push(A)}for(let j=0,L=O;j<L;j++){const A=R[j];ne=re[j];const Z=[];for(let ee=0,V=A.length;ee<V;ee++){const Y=P(A[ee],ne[ee],oe);Ce(Y.x,Y.y,-I),F===0&&Z.push(Y)}F===0&&pe.push(Z)}}_e=Ts.triangulateShape(N,pe)}const $=_e.length,K=p+v;for(let N=0;N<z;N++){const pe=d?P(S[N],be[N],K):S[N];y?(w.copy(b.normals[0]).multiplyScalar(pe.x),M.copy(b.binormals[0]).multiplyScalar(pe.y),C.copy(x[0]).add(w).add(M),Ce(C.x,C.y,C.z)):Ce(pe.x,pe.y,0)}for(let N=1;N<=u;N++)for(let pe=0;pe<z;pe++){const ie=d?P(S[pe],be[pe],K):S[pe];y?(w.copy(b.normals[N]).multiplyScalar(ie.x),M.copy(b.binormals[N]).multiplyScalar(ie.y),C.copy(x[N]).add(w).add(M),Ce(C.x,C.y,C.z)):Ce(ie.x,ie.y,h/u*N)}for(let N=g-1;N>=0;N--){const pe=N/g,ie=f*Math.cos(pe*Math.PI/2),F=p*Math.sin(pe*Math.PI/2)+v;for(let I=0,oe=G.length;I<oe;I++){const j=P(G[I],X[I],F);Ce(j.x,j.y,h+ie)}for(let I=0,oe=R.length;I<oe;I++){const j=R[I];ne=re[I];for(let L=0,A=j.length;L<A;L++){const Z=P(j[L],ne[L],F);y?Ce(Z.x,Z.y+x[u-1].y,x[u-1].x+ie):Ce(Z.x,Z.y,h+ie)}}}ge(),J();function ge(){const N=i.length/3;if(d){let pe=0,ie=z*pe;for(let F=0;F<$;F++){const I=_e[F];Ee(I[2]+ie,I[1]+ie,I[0]+ie)}pe=u+g*2,ie=z*pe;for(let F=0;F<$;F++){const I=_e[F];Ee(I[0]+ie,I[1]+ie,I[2]+ie)}}else{for(let pe=0;pe<$;pe++){const ie=_e[pe];Ee(ie[2],ie[1],ie[0])}for(let pe=0;pe<$;pe++){const ie=_e[pe];Ee(ie[0]+z*u,ie[1]+z*u,ie[2]+z*u)}}n.addGroup(N,i.length/3-N,0)}function J(){const N=i.length/3;let pe=0;ue(G,pe),pe+=G.length;for(let ie=0,F=R.length;ie<F;ie++){const I=R[ie];ue(I,pe),pe+=I.length}n.addGroup(N,i.length/3-N,1)}function ue(N,pe){let ie=N.length;for(;--ie>=0;){const F=ie;let I=ie-1;I<0&&(I=N.length-1);for(let oe=0,j=u+g*2;oe<j;oe++){const L=z*oe,A=z*(oe+1),Z=pe+F+L,ee=pe+I+L,V=pe+I+A,Y=pe+F+A;Ue(Z,ee,V,Y)}}}function Ce(N,pe,ie){l.push(N),l.push(pe),l.push(ie)}function Ee(N,pe,ie){xe(N),xe(pe),xe(ie);const F=i.length/3,I=_.generateTopUV(n,i,F-3,F-2,F-1);ye(I[0]),ye(I[1]),ye(I[2])}function Ue(N,pe,ie,F){xe(N),xe(pe),xe(F),xe(pe),xe(ie),xe(F);const I=i.length/3,oe=_.generateSideWallUV(n,i,I-6,I-3,I-2,I-1);ye(oe[0]),ye(oe[1]),ye(oe[3]),ye(oe[1]),ye(oe[2]),ye(oe[3])}function xe(N){i.push(l[N*3+0]),i.push(l[N*3+1]),i.push(l[N*3+2])}function ye(N){s.push(N.x),s.push(N.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return wC(t,n,e)}static fromJSON(e,t){const n=[];for(let s=0,a=e.shapes.length;s<a;s++){const o=t[e.shapes[s]];n.push(o)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new Df[i.type]().fromJSON(i)),new DS(n,e.options)}};const SC={generateTopUV:function(r,e,t,n,i){const s=e[t*3],a=e[t*3+1],o=e[n*3],l=e[n*3+1],c=e[i*3],u=e[i*3+1];return[new Pe(s,a),new Pe(o,l),new Pe(c,u)]},generateSideWallUV:function(r,e,t,n,i,s){const a=e[t*3],o=e[t*3+1],l=e[t*3+2],c=e[n*3],u=e[n*3+1],h=e[n*3+2],d=e[i*3],f=e[i*3+1],p=e[i*3+2],v=e[s*3],g=e[s*3+1],m=e[s*3+2];return Math.abs(o-u)<Math.abs(a-c)?[new Pe(a,1-l),new Pe(c,1-h),new Pe(d,1-p),new Pe(v,1-m)]:[new Pe(o,1-l),new Pe(u,1-h),new Pe(f,1-p),new Pe(g,1-m)]}};function wC(r,e,t){if(t.shapes=[],Array.isArray(r))for(let n=0,i=r.length;n<i;n++){const s=r[n];t.shapes.push(s.uuid)}else t.shapes.push(r.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class Pp extends Ma{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],s=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,s,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Pp(e.radius,e.detail)}}class Ip extends Lt{constructor(e=[new Pe(0,-.5),new Pe(.5,0),new Pe(0,.5)],t=12,n=0,i=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=Ct(i,0,Math.PI*2);const s=[],a=[],o=[],l=[],c=[],u=1/t,h=new k,d=new Pe,f=new k,p=new k,v=new k;let g=0,m=0;for(let _=0;_<=e.length-1;_++)switch(_){case 0:g=e[_+1].x-e[_].x,m=e[_+1].y-e[_].y,f.x=m*1,f.y=-g,f.z=m*0,v.copy(f),f.normalize(),l.push(f.x,f.y,f.z);break;case e.length-1:l.push(v.x,v.y,v.z);break;default:g=e[_+1].x-e[_].x,m=e[_+1].y-e[_].y,f.x=m*1,f.y=-g,f.z=m*0,p.copy(f),f.x+=v.x,f.y+=v.y,f.z+=v.z,f.normalize(),l.push(f.x,f.y,f.z),v.copy(p)}for(let _=0;_<=t;_++){const x=n+_*u*i,y=Math.sin(x),b=Math.cos(x);for(let M=0;M<=e.length-1;M++){h.x=e[M].x*y,h.y=e[M].y,h.z=e[M].x*b,a.push(h.x,h.y,h.z),d.x=_/t,d.y=M/(e.length-1),o.push(d.x,d.y);const w=l[3*M+0]*y,C=l[3*M+1],T=l[3*M+0]*b;c.push(w,C,T)}}for(let _=0;_<t;_++)for(let x=0;x<e.length-1;x++){const y=x+_*e.length,b=y,M=y+e.length,w=y+e.length+1,C=y+1;s.push(b,M,C),s.push(w,C,M)}this.setIndex(s),this.setAttribute("position",new rt(a,3)),this.setAttribute("uv",new rt(o,2)),this.setAttribute("normal",new rt(c,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ip(e.points,e.segments,e.phiStart,e.phiLength)}}class th extends Ma{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new th(e.radius,e.detail)}}let Dp=class NS extends Lt{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,a=t/2,o=Math.floor(n),l=Math.floor(i),c=o+1,u=l+1,h=e/o,d=t/l,f=[],p=[],v=[],g=[];for(let m=0;m<u;m++){const _=m*d-a;for(let x=0;x<c;x++){const y=x*h-s;p.push(y,-_,0),v.push(0,0,1),g.push(x/o),g.push(1-m/l)}}for(let m=0;m<l;m++)for(let _=0;_<o;_++){const x=_+c*m,y=_+c*(m+1),b=_+1+c*(m+1),M=_+1+c*m;f.push(x,y,M),f.push(y,b,M)}this.setIndex(f),this.setAttribute("position",new rt(p,3)),this.setAttribute("normal",new rt(v,3)),this.setAttribute("uv",new rt(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new NS(e.width,e.height,e.widthSegments,e.heightSegments)}};class Np extends Lt{constructor(e=.5,t=1,n=32,i=1,s=0,a=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:s,thetaLength:a},n=Math.max(3,n),i=Math.max(1,i);const o=[],l=[],c=[],u=[];let h=e;const d=(t-e)/i,f=new k,p=new Pe;for(let v=0;v<=i;v++){for(let g=0;g<=n;g++){const m=s+g/n*a;f.x=h*Math.cos(m),f.y=h*Math.sin(m),l.push(f.x,f.y,f.z),c.push(0,0,1),p.x=(f.x/t+1)/2,p.y=(f.y/t+1)/2,u.push(p.x,p.y)}h+=d}for(let v=0;v<i;v++){const g=v*(n+1);for(let m=0;m<n;m++){const _=m+g,x=_,y=_+n+1,b=_+n+2,M=_+1;o.push(x,y,M),o.push(y,b,M)}}this.setIndex(o),this.setAttribute("position",new rt(l,3)),this.setAttribute("normal",new rt(c,3)),this.setAttribute("uv",new rt(u,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Np(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}let FS=class OS extends Lt{constructor(e=new eo([new Pe(0,.5),new Pe(-.5,-.5),new Pe(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],a=[];let o=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let u=0;u<e.length;u++)c(e[u]),this.addGroup(o,l,u),o+=l,l=0;this.setIndex(n),this.setAttribute("position",new rt(i,3)),this.setAttribute("normal",new rt(s,3)),this.setAttribute("uv",new rt(a,2));function c(u){const h=i.length/3,d=u.extractPoints(t);let f=d.shape;const p=d.holes;Ts.isClockWise(f)===!1&&(f=f.reverse());for(let g=0,m=p.length;g<m;g++){const _=p[g];Ts.isClockWise(_)===!0&&(p[g]=_.reverse())}const v=Ts.triangulateShape(f,p);for(let g=0,m=p.length;g<m;g++){const _=p[g];f=f.concat(_)}for(let g=0,m=f.length;g<m;g++){const _=f[g];i.push(_.x,_.y,0),s.push(0,0,1),a.push(_.x,_.y)}for(let g=0,m=v.length;g<m;g++){const _=v[g],x=_[0]+h,y=_[1]+h,b=_[2]+h;n.push(x,y,b),l+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return TC(t,e)}static fromJSON(e,t){const n=[];for(let i=0,s=e.shapes.length;i<s;i++){const a=t[e.shapes[i]];n.push(a)}return new OS(n,e.curveSegments)}};function TC(r,e){if(e.shapes=[],Array.isArray(r))for(let t=0,n=r.length;t<n;t++){const i=r[t];e.shapes.push(i.uuid)}else e.shapes.push(r.uuid);return e}class nh extends Lt{constructor(e=1,t=32,n=16,i=0,s=Math.PI*2,a=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:a,thetaLength:o},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(a+o,Math.PI);let c=0;const u=[],h=new k,d=new k,f=[],p=[],v=[],g=[];for(let m=0;m<=n;m++){const _=[],x=m/n;let y=0;m===0&&a===0?y=.5/t:m===n&&l===Math.PI&&(y=-.5/t);for(let b=0;b<=t;b++){const M=b/t;h.x=-e*Math.cos(i+M*s)*Math.sin(a+x*o),h.y=e*Math.cos(a+x*o),h.z=e*Math.sin(i+M*s)*Math.sin(a+x*o),p.push(h.x,h.y,h.z),d.copy(h).normalize(),v.push(d.x,d.y,d.z),g.push(M+y,1-x),_.push(c++)}u.push(_)}for(let m=0;m<n;m++)for(let _=0;_<t;_++){const x=u[m][_+1],y=u[m][_],b=u[m+1][_],M=u[m+1][_+1];(m!==0||a>0)&&f.push(x,y,M),(m!==n-1||l<Math.PI)&&f.push(y,b,M)}this.setIndex(f),this.setAttribute("position",new rt(p,3)),this.setAttribute("normal",new rt(v,3)),this.setAttribute("uv",new rt(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new nh(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Fp extends Ma{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Fp(e.radius,e.detail)}}class Op extends Lt{constructor(e=1,t=.4,n=12,i=48,s=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const a=[],o=[],l=[],c=[],u=new k,h=new k,d=new k;for(let f=0;f<=n;f++)for(let p=0;p<=i;p++){const v=p/i*s,g=f/n*Math.PI*2;h.x=(e+t*Math.cos(g))*Math.cos(v),h.y=(e+t*Math.cos(g))*Math.sin(v),h.z=t*Math.sin(g),o.push(h.x,h.y,h.z),u.x=e*Math.cos(v),u.y=e*Math.sin(v),d.subVectors(h,u).normalize(),l.push(d.x,d.y,d.z),c.push(p/i),c.push(f/n)}for(let f=1;f<=n;f++)for(let p=1;p<=i;p++){const v=(i+1)*f+p-1,g=(i+1)*(f-1)+p-1,m=(i+1)*(f-1)+p,_=(i+1)*f+p;a.push(v,g,_),a.push(g,m,_)}this.setIndex(a),this.setAttribute("position",new rt(o,3)),this.setAttribute("normal",new rt(l,3)),this.setAttribute("uv",new rt(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Op(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class Up extends Lt{constructor(e=1,t=.4,n=64,i=8,s=2,a=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:s,q:a},n=Math.floor(n),i=Math.floor(i);const o=[],l=[],c=[],u=[],h=new k,d=new k,f=new k,p=new k,v=new k,g=new k,m=new k;for(let x=0;x<=n;++x){const y=x/n*s*Math.PI*2;_(y,s,a,e,f),_(y+.01,s,a,e,p),g.subVectors(p,f),m.addVectors(p,f),v.crossVectors(g,m),m.crossVectors(v,g),v.normalize(),m.normalize();for(let b=0;b<=i;++b){const M=b/i*Math.PI*2,w=-t*Math.cos(M),C=t*Math.sin(M);h.x=f.x+(w*m.x+C*v.x),h.y=f.y+(w*m.y+C*v.y),h.z=f.z+(w*m.z+C*v.z),l.push(h.x,h.y,h.z),d.subVectors(h,f).normalize(),c.push(d.x,d.y,d.z),u.push(x/n),u.push(b/i)}}for(let x=1;x<=n;x++)for(let y=1;y<=i;y++){const b=(i+1)*(x-1)+(y-1),M=(i+1)*x+(y-1),w=(i+1)*x+y,C=(i+1)*(x-1)+y;o.push(b,M,C),o.push(M,w,C)}this.setIndex(o),this.setAttribute("position",new rt(l,3)),this.setAttribute("normal",new rt(c,3)),this.setAttribute("uv",new rt(u,2));function _(x,y,b,M,w){const C=Math.cos(x),T=Math.sin(x),S=b/y*x,R=Math.cos(S);w.x=M*(2+R)*.5*C,w.y=M*(2+R)*T*.5,w.z=M*Math.sin(S)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Up(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class Bp extends Lt{constructor(e=new o_(new k(-1,-1,0),new k(-1,1,0),new k(1,1,0)),t=64,n=1,i=8,s=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:s};const a=e.computeFrenetFrames(t,s);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;const o=new k,l=new k,c=new Pe;let u=new k;const h=[],d=[],f=[],p=[];v(),this.setIndex(p),this.setAttribute("position",new rt(h,3)),this.setAttribute("normal",new rt(d,3)),this.setAttribute("uv",new rt(f,2));function v(){for(let x=0;x<t;x++)g(x);g(s===!1?t:0),_(),m()}function g(x){u=e.getPointAt(x/t,u);const y=a.normals[x],b=a.binormals[x];for(let M=0;M<=i;M++){const w=M/i*Math.PI*2,C=Math.sin(w),T=-Math.cos(w);l.x=T*y.x+C*b.x,l.y=T*y.y+C*b.y,l.z=T*y.z+C*b.z,l.normalize(),d.push(l.x,l.y,l.z),o.x=u.x+n*l.x,o.y=u.y+n*l.y,o.z=u.z+n*l.z,h.push(o.x,o.y,o.z)}}function m(){for(let x=1;x<=t;x++)for(let y=1;y<=i;y++){const b=(i+1)*(x-1)+(y-1),M=(i+1)*x+(y-1),w=(i+1)*x+y,C=(i+1)*(x-1)+y;p.push(b,M,C),p.push(M,w,C)}}function _(){for(let x=0;x<=t;x++)for(let y=0;y<=i;y++)c.x=x/t,c.y=y/i,f.push(c.x,c.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new Bp(new Df[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class US extends Lt{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],n=new Set,i=new k,s=new k;if(e.index!==null){const a=e.attributes.position,o=e.index;let l=e.groups;l.length===0&&(l=[{start:0,count:o.count,materialIndex:0}]);for(let c=0,u=l.length;c<u;++c){const h=l[c],d=h.start,f=h.count;for(let p=d,v=d+f;p<v;p+=3)for(let g=0;g<3;g++){const m=o.getX(p+g),_=o.getX(p+(g+1)%3);i.fromBufferAttribute(a,m),s.fromBufferAttribute(a,_),oy(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}}else{const a=e.attributes.position;for(let o=0,l=a.count/3;o<l;o++)for(let c=0;c<3;c++){const u=3*o+c,h=3*o+(c+1)%3;i.fromBufferAttribute(a,u),s.fromBufferAttribute(a,h),oy(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}this.setAttribute("position",new rt(t,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function oy(r,e,t){const n=`${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`,i=`${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;return t.has(n)===!0||t.has(i)===!0?!1:(t.add(n),t.add(i),!0)}var ly=Object.freeze({__proto__:null,BoxGeometry:Jl,CapsuleGeometry:Ap,CircleGeometry:Cp,ConeGeometry:eh,CylinderGeometry:Qu,DodecahedronGeometry:Rp,EdgesGeometry:MS,ExtrudeGeometry:IS,IcosahedronGeometry:Pp,LatheGeometry:Ip,OctahedronGeometry:th,PlaneGeometry:Dp,PolyhedronGeometry:Ma,RingGeometry:Np,ShapeGeometry:FS,SphereGeometry:nh,TetrahedronGeometry:Fp,TorusGeometry:Op,TorusKnotGeometry:Up,TubeGeometry:Bp,WireframeGeometry:US});let BS=class extends $n{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Ye(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}},zS=class extends Pi{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}},ih=class extends $n{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new Ye(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ye(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Vi,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}},yr=class extends ih{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Pe(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Ct(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Ye(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Ye(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Ye(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}},kS=class extends $n{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Ye(16777215),this.specular=new Ye(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ye(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Vi,this.combine=qu,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}},VS=class extends $n{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ye(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ye(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}},HS=class extends $n{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}},GS=class extends $n{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Ye(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ye(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Vi,this.combine=qu,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}},c_=class extends $n{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Xb,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}},u_=class extends $n{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}},WS=class extends $n{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ye(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=xa,this.normalScale=new Pe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}},$S=class extends Mi{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}};function Ka(r,e){return!r||r.constructor===e?r:typeof e.BYTES_PER_ELEMENT=="number"?new e(r):Array.prototype.slice.call(r)}function XS(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)}function qS(r){function e(i,s){return r[i]-r[s]}const t=r.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n}function rv(r,e,t){const n=r.length,i=new r.constructor(n);for(let s=0,a=0;a!==n;++s){const o=t[s]*e;for(let l=0;l!==e;++l)i[a++]=r[o+l]}return i}function h_(r,e,t,n){let i=1,s=r[0];for(;s!==void 0&&s[n]===void 0;)s=r[i++];if(s===void 0)return;let a=s[n];if(a!==void 0)if(Array.isArray(a))do a=s[n],a!==void 0&&(e.push(s.time),t.push(...a)),s=r[i++];while(s!==void 0);else if(a.toArray!==void 0)do a=s[n],a!==void 0&&(e.push(s.time),a.toArray(t,t.length)),s=r[i++];while(s!==void 0);else do a=s[n],a!==void 0&&(e.push(s.time),t.push(a)),s=r[i++];while(s!==void 0)}function EC(r,e,t,n,i=30){const s=r.clone();s.name=e;const a=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],u=c.getValueSize(),h=[],d=[];for(let f=0;f<c.times.length;++f){const p=c.times[f]*i;if(!(p<t||p>=n)){h.push(c.times[f]);for(let v=0;v<u;++v)d.push(c.values[f*u+v])}}h.length!==0&&(c.times=Ka(h,c.times.constructor),c.values=Ka(d,c.values.constructor),a.push(c))}s.tracks=a;let o=1/0;for(let l=0;l<s.tracks.length;++l)o>s.tracks[l].times[0]&&(o=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*o);return s.resetDuration(),s}function AC(r,e=0,t=r,n=30){n<=0&&(n=30);const i=t.tracks.length,s=e/n;for(let a=0;a<i;++a){const o=t.tracks[a],l=o.ValueTypeName;if(l==="bool"||l==="string")continue;const c=r.tracks.find(function(m){return m.name===o.name&&m.ValueTypeName===l});if(c===void 0)continue;let u=0;const h=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=h/3);let d=0;const f=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const p=o.times.length-1;let v;if(s<=o.times[0]){const m=u,_=h-u;v=o.values.slice(m,_)}else if(s>=o.times[p]){const m=p*h+u,_=m+h-u;v=o.values.slice(m,_)}else{const m=o.createInterpolant(),_=u,x=h-u;m.evaluate(s),v=m.resultBuffer.slice(_,x)}l==="quaternion"&&new Dn().fromArray(v).normalize().conjugate().toArray(v);const g=c.times.length;for(let m=0;m<g;++m){const _=m*f+d;if(l==="quaternion")Dn.multiplyQuaternionsFlat(c.values,_,v,0,c.values,_);else{const x=f-d*2;for(let y=0;y<x;++y)c.values[_+y]-=v[y]}}}return r.blendMode=Wv,r}let CC=class{static convertArray(e,t){return Ka(e,t)}static isTypedArray(e){return XS(e)}static getKeyframeOrder(e){return qS(e)}static sortedArray(e,t,n){return rv(e,t,n)}static flattenJSON(e,t,n,i){h_(e,t,n,i)}static subclip(e,t,n,i,s=30){return EC(e,t,n,i,s)}static makeClipAdditive(e,t=0,n=e,i=30){return AC(e,t,n,i)}},Ql=class{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];e:{t:{let a;n:{i:if(!(e<i)){for(let o=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===o)break;if(s=i,i=t[++n],e<i)break t}a=t.length;break n}if(!(e>=s)){const o=t[1];e<o&&(n=2,s=o);for(let l=n-2;;){if(s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(i=s,s=t[--n-1],e>=s)break t}a=n,n=0;break n}break e}for(;n<a;){const o=n+a>>>1;e<t[o]?a=o:n=o+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let a=0;a!==i;++a)t[a]=n[s+a];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}},ZS=class extends Ql{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:ja,endingEnd:ja}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,a=e+1,o=i[s],l=i[a];if(o===void 0)switch(this.getSettings_().endingStart){case Ja:s=e,o=2*t-n;break;case pu:s=i.length-2,o=t+i[s]-i[s+1];break;default:s=e,o=n}if(l===void 0)switch(this.getSettings_().endingEnd){case Ja:a=e,l=2*n-t;break;case pu:a=1,l=n+i[1]-i[0];break;default:a=e-1,l=t}const c=(n-t)*.5,u=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(l-n),this._offsetPrev=s*u,this._offsetNext=a*u}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,u=this._offsetPrev,h=this._offsetNext,d=this._weightPrev,f=this._weightNext,p=(n-t)/(i-t),v=p*p,g=v*p,m=-d*g+2*d*v-d*p,_=(1+d)*g+(-1.5-2*d)*v+(-.5+d)*p+1,x=(-1-f)*g+(1.5+f)*v+.5*p,y=f*g-f*v;for(let b=0;b!==o;++b)s[b]=m*a[u+b]+_*a[c+b]+x*a[l+b]+y*a[h+b];return s}},d_=class extends Ql{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,u=(n-t)/(i-t),h=1-u;for(let d=0;d!==o;++d)s[d]=a[c+d]*h+a[l+d]*u;return s}},YS=class extends Ql{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}},xr=class{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Ka(t,this.TimeBufferType),this.values=Ka(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:Ka(e.times,Array),values:Ka(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new YS(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new d_(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new ZS(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case Fl:t=this.InterpolantFactoryMethodDiscrete;break;case Ol:t=this.InterpolantFactoryMethodLinear;break;case Fd:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Fl;case this.InterpolantFactoryMethodLinear:return Ol;case this.InterpolantFactoryMethodSmooth:return Fd}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,a=i-1;for(;s!==i&&n[s]<e;)++s;for(;a!==-1&&n[a]>t;)--a;if(++a,s!==0||a!==i){s>=a&&(a=Math.max(a,1),s=a-1);const o=this.getValueSize();this.times=n.slice(s,a),this.values=this.values.slice(s*o,a*o)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let o=0;o!==s;o++){const l=n[o];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,l),e=!1;break}if(a!==null&&a>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,l,a),e=!1;break}a=l}if(i!==void 0&&XS(i))for(let o=0,l=i.length;o!==l;++o){const c=i[o];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,c),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===Fd,s=e.length-1;let a=1;for(let o=1;o<s;++o){let l=!1;const c=e[o],u=e[o+1];if(c!==u&&(o!==1||c!==e[0]))if(i)l=!0;else{const h=o*n,d=h-n,f=h+n;for(let p=0;p!==n;++p){const v=t[h+p];if(v!==t[d+p]||v!==t[f+p]){l=!0;break}}}if(l){if(o!==a){e[a]=e[o];const h=o*n,d=a*n;for(let f=0;f!==n;++f)t[d+f]=t[h+f]}++a}}if(s>0){e[a]=e[s];for(let o=s*n,l=a*n,c=0;c!==n;++c)t[l+c]=t[o+c];++a}return a!==e.length?(this.times=e.slice(0,a),this.values=t.slice(0,a*n)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}};xr.prototype.ValueTypeName="";xr.prototype.TimeBufferType=Float32Array;xr.prototype.ValueBufferType=Float32Array;xr.prototype.DefaultInterpolation=Ol;let xo=class extends xr{constructor(e,t,n){super(e,t,n)}};xo.prototype.ValueTypeName="bool";xo.prototype.ValueBufferType=Array;xo.prototype.DefaultInterpolation=Fl;xo.prototype.InterpolantFactoryMethodLinear=void 0;xo.prototype.InterpolantFactoryMethodSmooth=void 0;let f_=class extends xr{constructor(e,t,n,i){super(e,t,n,i)}};f_.prototype.ValueTypeName="color";let lo=class extends xr{constructor(e,t,n,i){super(e,t,n,i)}};lo.prototype.ValueTypeName="number";let jS=class extends Ql{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=(n-t)/(i-t);let c=e*o;for(let u=c+o;c!==u;c+=4)Dn.slerpFlat(s,0,a,c-o,a,c,l);return s}},co=class extends xr{constructor(e,t,n,i){super(e,t,n,i)}InterpolantFactoryMethodLinear(e){return new jS(this.times,this.values,this.getValueSize(),e)}};co.prototype.ValueTypeName="quaternion";co.prototype.InterpolantFactoryMethodSmooth=void 0;let Mo=class extends xr{constructor(e,t,n){super(e,t,n)}};Mo.prototype.ValueTypeName="string";Mo.prototype.ValueBufferType=Array;Mo.prototype.DefaultInterpolation=Fl;Mo.prototype.InterpolantFactoryMethodLinear=void 0;Mo.prototype.InterpolantFactoryMethodSmooth=void 0;let uo=class extends xr{constructor(e,t,n,i){super(e,t,n,i)}};uo.prototype.ValueTypeName="vector";let Vl=class{constructor(e="",t=-1,n=[],i=fp){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=rr(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let a=0,o=n.length;a!==o;++a)t.push(LC(n[a]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,a=n.length;s!==a;++s)t.push(xr.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,a=[];for(let o=0;o<s;o++){let l=[],c=[];l.push((o+s-1)%s,o,(o+1)%s),c.push(0,1,0);const u=qS(l);l=rv(l,1,u),c=rv(c,1,u),!i&&l[0]===0&&(l.push(s),c.push(c[0])),a.push(new lo(".morphTargetInfluences["+t[o].name+"]",l,c).scale(1/n))}return new this(e,-1,a)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let o=0,l=e.length;o<l;o++){const c=e[o],u=c.name.match(s);if(u&&u.length>1){const h=u[1];let d=i[h];d||(i[h]=d=[]),d.push(c)}}const a=[];for(const o in i)a.push(this.CreateFromMorphTargetSequence(o,i[o],t,n));return a}static parseAnimation(e,t){if(console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"),!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(h,d,f,p,v){if(f.length!==0){const g=[],m=[];h_(f,g,m,p),g.length!==0&&v.push(new h(d,g,m))}},i=[],s=e.name||"default",a=e.fps||30,o=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let h=0;h<c.length;h++){const d=c[h].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const f={};let p;for(p=0;p<d.length;p++)if(d[p].morphTargets)for(let v=0;v<d[p].morphTargets.length;v++)f[d[p].morphTargets[v]]=-1;for(const v in f){const g=[],m=[];for(let _=0;_!==d[p].morphTargets.length;++_){const x=d[p];g.push(x.time),m.push(x.morphTarget===v?1:0)}i.push(new lo(".morphTargetInfluence["+v+"]",g,m))}l=f.length*a}else{const f=".bones["+t[h].name+"]";n(uo,f+".position",d,"pos",i),n(co,f+".quaternion",d,"rot",i),n(uo,f+".scale",d,"scl",i)}}return i.length===0?null:new this(s,l,i,o)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}};function RC(r){switch(r.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return lo;case"vector":case"vector2":case"vector3":case"vector4":return uo;case"color":return f_;case"quaternion":return co;case"bool":case"boolean":return xo;case"string":return Mo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+r)}function LC(r){if(r.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=RC(r.type);if(r.times===void 0){const t=[],n=[];h_(r.keys,t,n,"value"),r.times=t,r.values=n}return e.parse!==void 0?e.parse(r):new e(r.name,r.times,r.values,r.interpolation)}const Es={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};let p_=class{constructor(e,t,n){const i=this;let s=!1,a=0,o=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(u){o++,s===!1&&i.onStart!==void 0&&i.onStart(u,a,o),s=!0},this.itemEnd=function(u){a++,i.onProgress!==void 0&&i.onProgress(u,a,o),a===o&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(u){i.onError!==void 0&&i.onError(u)},this.resolveURL=function(u){return l?l(u):u},this.setURLModifier=function(u){return l=u,this},this.addHandler=function(u,h){return c.push(u,h),this},this.removeHandler=function(u){const h=c.indexOf(u);return h!==-1&&c.splice(h,2),this},this.getHandler=function(u){for(let h=0,d=c.length;h<d;h+=2){const f=c[h],p=c[h+1];if(f.global&&(f.lastIndex=0),f.test(u))return p}return null}}};const bo=new p_;let bi=class{constructor(e){this.manager=e!==void 0?e:bo,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}};bi.DEFAULT_MATERIAL_NAME="__DEFAULT";const ds={};class PC extends Error{constructor(e,t){super(e),this.response=t}}let ar=class extends bi{constructor(e){super(e),this.mimeType="",this.responseType=""}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=Es.get(e);if(s!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(s),this.manager.itemEnd(e)},0),s;if(ds[e]!==void 0){ds[e].push({onLoad:t,onProgress:n,onError:i});return}ds[e]=[],ds[e].push({onLoad:t,onProgress:n,onError:i});const a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),o=this.mimeType,l=this.responseType;fetch(a).then(c=>{if(c.status===200||c.status===0){if(c.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||c.body===void 0||c.body.getReader===void 0)return c;const u=ds[e],h=c.body.getReader(),d=c.headers.get("X-File-Size")||c.headers.get("Content-Length"),f=d?parseInt(d):0,p=f!==0;let v=0;const g=new ReadableStream({start(m){_();function _(){h.read().then(({done:x,value:y})=>{if(x)m.close();else{v+=y.byteLength;const b=new ProgressEvent("progress",{lengthComputable:p,loaded:v,total:f});for(let M=0,w=u.length;M<w;M++){const C=u[M];C.onProgress&&C.onProgress(b)}m.enqueue(y),_()}},x=>{m.error(x)})}}});return new Response(g)}else throw new PC(`fetch for "${c.url}" responded with ${c.status}: ${c.statusText}`,c)}).then(c=>{switch(l){case"arraybuffer":return c.arrayBuffer();case"blob":return c.blob();case"document":return c.text().then(u=>new DOMParser().parseFromString(u,o));case"json":return c.json();default:if(o==="")return c.text();{const h=/charset="?([^;"\s]*)"?/i.exec(o),d=h&&h[1]?h[1].toLowerCase():void 0,f=new TextDecoder(d);return c.arrayBuffer().then(p=>f.decode(p))}}}).then(c=>{Es.add(e,c);const u=ds[e];delete ds[e];for(let h=0,d=u.length;h<d;h++){const f=u[h];f.onLoad&&f.onLoad(c)}}).catch(c=>{const u=ds[e];if(u===void 0)throw this.manager.itemError(e),c;delete ds[e];for(let h=0,d=u.length;h<d;h++){const f=u[h];f.onError&&f.onError(c)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}};class IC extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=new ar(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(o){try{t(s.parse(JSON.parse(o)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=[];for(let n=0;n<e.length;n++){const i=Vl.parse(e[n]);t.push(i)}return t}}class DC extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=[],o=new Tp,l=new ar(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(s.withCredentials);let c=0;function u(h){l.load(e[h],function(d){const f=s.parse(d,!0);a[h]={width:f.width,height:f.height,format:f.format,mipmaps:f.mipmaps},c+=1,c===6&&(f.mipmapCount===1&&(o.minFilter=xn),o.image=a,o.format=f.format,o.needsUpdate=!0,t&&t(o))},n,i)}if(Array.isArray(e))for(let h=0,d=e.length;h<d;++h)u(h);else l.load(e,function(h){const d=s.parse(h,!0);if(d.isCubemap){const f=d.mipmaps.length/d.mipmapCount;for(let p=0;p<f;p++){a[p]={mipmaps:[]};for(let v=0;v<d.mipmapCount;v++)a[p].mipmaps.push(d.mipmaps[p*d.mipmapCount+v]),a[p].format=d.format,a[p].width=d.width,a[p].height=d.height}o.image=a}else o.image.width=d.width,o.image.height=d.height,o.mipmaps=d.mipmaps;d.mipmapCount===1&&(o.minFilter=xn),o.format=d.format,o.needsUpdate=!0,t&&t(o)},n,i);return o}}let bu=class extends bi{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,a=Es.get(e);if(a!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(a),s.manager.itemEnd(e)},0),a;const o=_u("img");function l(){u(),Es.add(e,this),t&&t(this),s.manager.itemEnd(e)}function c(h){u(),i&&i(h),s.manager.itemError(e),s.manager.itemEnd(e)}function u(){o.removeEventListener("load",l,!1),o.removeEventListener("error",c,!1)}return o.addEventListener("load",l,!1),o.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),s.manager.itemStart(e),o.src=e,o}},NC=class extends bi{constructor(e){super(e)}load(e,t,n,i){const s=new ju;s.colorSpace=In;const a=new bu(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let o=0;function l(c){a.load(e[c],function(u){s.images[c]=u,o++,o===6&&(s.needsUpdate=!0,t&&t(s))},void 0,i)}for(let c=0;c<e.length;++c)l(c);return s}};class FC extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=new Jr,o=new ar(this.manager);return o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setPath(this.path),o.setWithCredentials(s.withCredentials),o.load(e,function(l){let c;try{c=s.parse(l)}catch(u){if(i!==void 0)i(u);else{console.error(u);return}}c.image!==void 0?a.image=c.image:c.data!==void 0&&(a.image.width=c.width,a.image.height=c.height,a.image.data=c.data),a.wrapS=c.wrapS!==void 0?c.wrapS:tr,a.wrapT=c.wrapT!==void 0?c.wrapT:tr,a.magFilter=c.magFilter!==void 0?c.magFilter:xn,a.minFilter=c.minFilter!==void 0?c.minFilter:xn,a.anisotropy=c.anisotropy!==void 0?c.anisotropy:1,c.colorSpace!==void 0&&(a.colorSpace=c.colorSpace),c.flipY!==void 0&&(a.flipY=c.flipY),c.format!==void 0&&(a.format=c.format),c.type!==void 0&&(a.type=c.type),c.mipmaps!==void 0&&(a.mipmaps=c.mipmaps,a.minFilter=nr),c.mipmapCount===1&&(a.minFilter=xn),c.generateMipmaps!==void 0&&(a.generateMipmaps=c.generateMipmaps),a.needsUpdate=!0,t&&t(a,c)},n,i),a}}let m_=class extends bi{constructor(e){super(e)}load(e,t,n,i){const s=new Vn,a=new bu(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(o){s.image=o,s.needsUpdate=!0,t!==void 0&&t(s)},n,i),s}},ba=class extends Wt{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Ye(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}},JS=class extends ba{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Wt.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Ye(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}};const Vm=new ft,cy=new k,uy=new k;let g_=class{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Pe(512,512),this.mapType=Ur,this.map=null,this.mapPass=null,this.matrix=new ft,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Kl,this._frameExtents=new Pe(1,1),this._viewportCount=1,this._viewports=[new Ht(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;cy.setFromMatrixPosition(e.matrixWorld),t.position.copy(cy),uy.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(uy),t.updateMatrixWorld(),Vm.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Vm),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Vm)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.autoUpdate=e.autoUpdate,this.needsUpdate=e.needsUpdate,this.normalBias=e.normalBias,this.blurSamples=e.blurSamples,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}},OC=class extends g_{constructor(){super(new Hn(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=Ul*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}},v_=class extends ba{constructor(e,t,n=0,i=Math.PI/3,s=0,a=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Wt.DEFAULT_UP),this.updateMatrix(),this.target=new Wt,this.distance=n,this.angle=i,this.penumbra=s,this.decay=a,this.map=null,this.shadow=new OC}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}};const hy=new ft,wc=new k,Hm=new k;let UC=class extends g_{constructor(){super(new Hn(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Pe(4,2),this._viewportCount=6,this._viewports=[new Ht(2,1,1,1),new Ht(0,1,1,1),new Ht(3,1,1,1),new Ht(1,1,1,1),new Ht(3,0,1,1),new Ht(1,0,1,1)],this._cubeDirections=[new k(1,0,0),new k(-1,0,0),new k(0,0,1),new k(0,0,-1),new k(0,1,0),new k(0,-1,0)],this._cubeUps=[new k(0,1,0),new k(0,1,0),new k(0,1,0),new k(0,1,0),new k(0,0,1),new k(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),wc.setFromMatrixPosition(e.matrixWorld),n.position.copy(wc),Hm.copy(n.position),Hm.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Hm),n.updateMatrixWorld(),i.makeTranslation(-wc.x,-wc.y,-wc.z),hy.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(hy)}},__=class extends ba{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new UC}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}},ec=class extends _p{constructor(e=-1,t=1,n=1,i=-1,s=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,a=n+e,o=i+t,l=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,a=s+c*this.view.width,o-=u*this.view.offsetY,l=o-u*this.view.height}this.projectionMatrix.makeOrthographic(s,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}},BC=class extends g_{constructor(){super(new ec(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},y_=class extends ba{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Wt.DEFAULT_UP),this.updateMatrix(),this.target=new Wt,this.shadow=new BC}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}},KS=class extends ba{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}},QS=class extends ba{constructor(e,t,n=10,i=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}},e1=class{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new k)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScaledVector(a[1],.488603*i),t.addScaledVector(a[2],.488603*s),t.addScaledVector(a[3],.488603*n),t.addScaledVector(a[4],1.092548*(n*i)),t.addScaledVector(a[5],1.092548*(i*s)),t.addScaledVector(a[6],.315392*(3*s*s-1)),t.addScaledVector(a[7],1.092548*(n*s)),t.addScaledVector(a[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScaledVector(a[1],2*.511664*i),t.addScaledVector(a[2],2*.511664*s),t.addScaledVector(a[3],2*.511664*n),t.addScaledVector(a[4],2*.429043*n*i),t.addScaledVector(a[5],2*.429043*i*s),t.addScaledVector(a[6],.743125*s*s-.247708),t.addScaledVector(a[7],2*.429043*n*s),t.addScaledVector(a[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}},t1=class extends ba{constructor(e=new e1,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}};class zp extends bi{constructor(e){super(e),this.textures={}}load(e,t,n,i){const s=this,a=new ar(s.manager);a.setPath(s.path),a.setRequestHeader(s.requestHeader),a.setWithCredentials(s.withCredentials),a.load(e,function(o){try{t(s.parse(JSON.parse(o)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=this.textures;function n(s){return t[s]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",s),t[s]}const i=this.createMaterialFromType(e.type);if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=e.sheen),e.sheenColor!==void 0&&(i.sheenColor=new Ye().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(i.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(e.specular),e.specularIntensity!==void 0&&(i.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&i.specularColor!==void 0&&i.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.dispersion!==void 0&&(i.dispersion=e.dispersion),e.iridescence!==void 0&&(i.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(i.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(i.transmission=e.transmission),e.thickness!==void 0&&(i.thickness=e.thickness),e.attenuationDistance!==void 0&&(i.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&i.attenuationColor!==void 0&&i.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(i.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(i.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.shadowSide!==void 0&&(i.shadowSide=e.shadowSide),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(i.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(i.depthFunc=e.depthFunc),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(i.blendSrc=e.blendSrc),e.blendDst!==void 0&&(i.blendDst=e.blendDst),e.blendEquation!==void 0&&(i.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(i.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(i.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(i.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&i.blendColor!==void 0&&i.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(i.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==void 0&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(i.dithering=e.dithering),e.alphaToCoverage!==void 0&&(i.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(i.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(i.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const s in e.uniforms){const a=e.uniforms[s];switch(i.uniforms[s]={},a.type){case"t":i.uniforms[s].value=n(a.value);break;case"c":i.uniforms[s].value=new Ye().setHex(a.value);break;case"v2":i.uniforms[s].value=new Pe().fromArray(a.value);break;case"v3":i.uniforms[s].value=new k().fromArray(a.value);break;case"v4":i.uniforms[s].value=new Ht().fromArray(a.value);break;case"m3":i.uniforms[s].value=new Nt().fromArray(a.value);break;case"m4":i.uniforms[s].value=new ft().fromArray(a.value);break;default:i.uniforms[s].value=a.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(i.glslVersion=e.glslVersion),e.extensions!==void 0)for(const s in e.extensions)i.extensions[s]=e.extensions[s];if(e.lights!==void 0&&(i.lights=e.lights),e.clipping!==void 0&&(i.clipping=e.clipping),e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let s=e.normalScale;Array.isArray(s)===!1&&(s=[s,s]),i.normalScale=new Pe().fromArray(s)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.specularIntensityMap!==void 0&&(i.specularIntensityMap=n(e.specularIntensityMap)),e.specularColorMap!==void 0&&(i.specularColorMap=n(e.specularColorMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapRotation!==void 0&&i.envMapRotation.fromArray(e.envMapRotation),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new Pe().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(i.iridescenceMap=n(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(i.iridescenceThicknessMap=n(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),e.thicknessMap!==void 0&&(i.thicknessMap=n(e.thicknessMap)),e.anisotropyMap!==void 0&&(i.anisotropyMap=n(e.anisotropyMap)),e.sheenColorMap!==void 0&&(i.sheenColorMap=n(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(i.sheenRoughnessMap=n(e.sheenRoughnessMap)),i}setTextures(e){return this.textures=e,this}createMaterialFromType(e){return zp.createMaterialFromType(e)}static createMaterialFromType(e){const t={ShadowMaterial:BS,SpriteMaterial:Qv,RawShaderMaterial:zS,ShaderMaterial:Pi,PointsMaterial:Sp,MeshPhysicalMaterial:yr,MeshStandardMaterial:ih,MeshPhongMaterial:kS,MeshToonMaterial:VS,MeshNormalMaterial:HS,MeshLambertMaterial:GS,MeshDepthMaterial:c_,MeshDistanceMaterial:u_,MeshBasicMaterial:ir,MeshMatcapMaterial:WS,LineDashedMaterial:$S,LineBasicMaterial:Mi,Material:$n};return new t[e]}}let la=class{static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}},n1=class extends Lt{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}};class i1 extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=new ar(s.manager);a.setPath(s.path),a.setRequestHeader(s.requestHeader),a.setWithCredentials(s.withCredentials),a.load(e,function(o){try{t(s.parse(JSON.parse(o)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t={},n={};function i(f,p){if(t[p]!==void 0)return t[p];const g=f.interleavedBuffers[p],m=s(f,g.buffer),_=gl(g.type,m),x=new Ju(_,g.stride);return x.uuid=g.uuid,t[p]=x,x}function s(f,p){if(n[p]!==void 0)return n[p];const g=f.arrayBuffers[p],m=new Uint32Array(g).buffer;return n[p]=m,m}const a=e.isInstancedBufferGeometry?new n1:new Lt,o=e.data.index;if(o!==void 0){const f=gl(o.type,o.array);a.setIndex(new qt(f,1))}const l=e.data.attributes;for(const f in l){const p=l[f];let v;if(p.isInterleavedBufferAttribute){const g=i(e.data,p.data);v=new zl(g,p.itemSize,p.offset,p.normalized)}else{const g=gl(p.type,p.array),m=p.isInstancedBufferAttribute?ao:qt;v=new m(g,p.itemSize,p.normalized)}p.name!==void 0&&(v.name=p.name),p.usage!==void 0&&v.setUsage(p.usage),a.setAttribute(f,v)}const c=e.data.morphAttributes;if(c)for(const f in c){const p=c[f],v=[];for(let g=0,m=p.length;g<m;g++){const _=p[g];let x;if(_.isInterleavedBufferAttribute){const y=i(e.data,_.data);x=new zl(y,_.itemSize,_.offset,_.normalized)}else{const y=gl(_.type,_.array);x=new qt(y,_.itemSize,_.normalized)}_.name!==void 0&&(x.name=_.name),v.push(x)}a.morphAttributes[f]=v}e.data.morphTargetsRelative&&(a.morphTargetsRelative=!0);const h=e.data.groups||e.data.drawcalls||e.data.offsets;if(h!==void 0)for(let f=0,p=h.length;f!==p;++f){const v=h[f];a.addGroup(v.start,v.count,v.materialIndex)}const d=e.data.boundingSphere;if(d!==void 0){const f=new k;d.center!==void 0&&f.fromArray(d.center),a.boundingSphere=new kn(f,d.radius)}return e.name&&(a.name=e.name),e.userData&&(a.userData=e.userData),a}}class zC extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=this.path===""?la.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const o=new ar(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(l){let c=null;try{c=JSON.parse(l)}catch(h){i!==void 0&&i(h),console.error("THREE:ObjectLoader: Can't parse "+e+".",h.message);return}const u=c.metadata;if(u===void 0||u.type===void 0||u.type.toLowerCase()==="geometry"){i!==void 0&&i(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}s.parse(c,t)},n,i)}async loadAsync(e,t){const n=this,i=this.path===""?la.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const s=new ar(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials);const a=await s.loadAsync(e,t),o=JSON.parse(a),l=o.metadata;if(l===void 0||l.type===void 0||l.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await n.parseAsync(o)}parse(e,t){const n=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),a=this.parseImages(e.images,function(){t!==void 0&&t(c)}),o=this.parseTextures(e.textures,a),l=this.parseMaterials(e.materials,o),c=this.parseObject(e.object,s,l,o,n),u=this.parseSkeletons(e.skeletons,c);if(this.bindSkeletons(c,u),this.bindLightTargets(c),t!==void 0){let h=!1;for(const d in a)if(a[d].data instanceof HTMLImageElement){h=!0;break}h===!1&&t(c)}return c}async parseAsync(e){const t=this.parseAnimations(e.animations),n=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,n),s=await this.parseImagesAsync(e.images),a=this.parseTextures(e.textures,s),o=this.parseMaterials(e.materials,a),l=this.parseObject(e.object,i,o,a,t),c=this.parseSkeletons(e.skeletons,l);return this.bindSkeletons(l,c),this.bindLightTargets(l),l}parseShapes(e){const t={};if(e!==void 0)for(let n=0,i=e.length;n<i;n++){const s=new eo().fromJSON(e[n]);t[s.uuid]=s}return t}parseSkeletons(e,t){const n={},i={};if(t.traverse(function(s){s.isBone&&(i[s.uuid]=s)}),e!==void 0)for(let s=0,a=e.length;s<a;s++){const o=new Ku().fromJSON(e[s],i);n[o.uuid]=o}return n}parseGeometries(e,t){const n={};if(e!==void 0){const i=new i1;for(let s=0,a=e.length;s<a;s++){let o;const l=e[s];switch(l.type){case"BufferGeometry":case"InstancedBufferGeometry":o=i.parse(l);break;default:l.type in ly?o=ly[l.type].fromJSON(l,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${l.type}"`)}o.uuid=l.uuid,l.name!==void 0&&(o.name=l.name),l.userData!==void 0&&(o.userData=l.userData),n[l.uuid]=o}}return n}parseMaterials(e,t){const n={},i={};if(e!==void 0){const s=new zp;s.setTextures(t);for(let a=0,o=e.length;a<o;a++){const l=e[a];n[l.uuid]===void 0&&(n[l.uuid]=s.parse(l)),i[l.uuid]=n[l.uuid]}}return i}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const i=e[n],s=Vl.parse(i);t[s.uuid]=s}return t}parseImages(e,t){const n=this,i={};let s;function a(l){return n.manager.itemStart(l),s.load(l,function(){n.manager.itemEnd(l)},void 0,function(){n.manager.itemError(l),n.manager.itemEnd(l)})}function o(l){if(typeof l=="string"){const c=l,u=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:n.resourcePath+c;return a(u)}else return l.data?{data:gl(l.type,l.data),width:l.width,height:l.height}:null}if(e!==void 0&&e.length>0){const l=new p_(t);s=new bu(l),s.setCrossOrigin(this.crossOrigin);for(let c=0,u=e.length;c<u;c++){const h=e[c],d=h.url;if(Array.isArray(d)){const f=[];for(let p=0,v=d.length;p<v;p++){const g=d[p],m=o(g);m!==null&&(m instanceof HTMLImageElement?f.push(m):f.push(new Jr(m.data,m.width,m.height)))}i[h.uuid]=new ra(f)}else{const f=o(h.url);i[h.uuid]=new ra(f)}}}return i}async parseImagesAsync(e){const t=this,n={};let i;async function s(a){if(typeof a=="string"){const o=a,l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(o)?o:t.resourcePath+o;return await i.loadAsync(l)}else return a.data?{data:gl(a.type,a.data),width:a.width,height:a.height}:null}if(e!==void 0&&e.length>0){i=new bu(this.manager),i.setCrossOrigin(this.crossOrigin);for(let a=0,o=e.length;a<o;a++){const l=e[a],c=l.url;if(Array.isArray(c)){const u=[];for(let h=0,d=c.length;h<d;h++){const f=c[h],p=await s(f);p!==null&&(p instanceof HTMLImageElement?u.push(p):u.push(new Jr(p.data,p.width,p.height)))}n[l.uuid]=new ra(u)}else{const u=await s(l.url);n[l.uuid]=new ra(u)}}}return n}parseTextures(e,t){function n(s,a){return typeof s=="number"?s:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",s),a[s])}const i={};if(e!==void 0)for(let s=0,a=e.length;s<a;s++){const o=e[s];o.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),t[o.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",o.image);const l=t[o.image],c=l.data;let u;Array.isArray(c)?(u=new ju,c.length===6&&(u.needsUpdate=!0)):(c&&c.data?u=new Jr:u=new Vn,c&&(u.needsUpdate=!0)),u.source=l,u.uuid=o.uuid,o.name!==void 0&&(u.name=o.name),o.mapping!==void 0&&(u.mapping=n(o.mapping,kC)),o.channel!==void 0&&(u.channel=o.channel),o.offset!==void 0&&u.offset.fromArray(o.offset),o.repeat!==void 0&&u.repeat.fromArray(o.repeat),o.center!==void 0&&u.center.fromArray(o.center),o.rotation!==void 0&&(u.rotation=o.rotation),o.wrap!==void 0&&(u.wrapS=n(o.wrap[0],dy),u.wrapT=n(o.wrap[1],dy)),o.format!==void 0&&(u.format=o.format),o.internalFormat!==void 0&&(u.internalFormat=o.internalFormat),o.type!==void 0&&(u.type=o.type),o.colorSpace!==void 0&&(u.colorSpace=o.colorSpace),o.minFilter!==void 0&&(u.minFilter=n(o.minFilter,fy)),o.magFilter!==void 0&&(u.magFilter=n(o.magFilter,fy)),o.anisotropy!==void 0&&(u.anisotropy=o.anisotropy),o.flipY!==void 0&&(u.flipY=o.flipY),o.generateMipmaps!==void 0&&(u.generateMipmaps=o.generateMipmaps),o.premultiplyAlpha!==void 0&&(u.premultiplyAlpha=o.premultiplyAlpha),o.unpackAlignment!==void 0&&(u.unpackAlignment=o.unpackAlignment),o.compareFunction!==void 0&&(u.compareFunction=o.compareFunction),o.userData!==void 0&&(u.userData=o.userData),i[o.uuid]=u}return i}parseObject(e,t,n,i,s){let a;function o(d){return t[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",d),t[d]}function l(d){if(d!==void 0){if(Array.isArray(d)){const f=[];for(let p=0,v=d.length;p<v;p++){const g=d[p];n[g]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",g),f.push(n[g])}return f}return n[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",d),n[d]}}function c(d){return i[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",d),i[d]}let u,h;switch(e.type){case"Scene":a=new Kv,e.background!==void 0&&(Number.isInteger(e.background)?a.background=new Ye(e.background):a.background=c(e.background)),e.environment!==void 0&&(a.environment=c(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?a.fog=new xp(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(a.fog=new yp(e.fog.color,e.fog.density)),e.fog.name!==""&&(a.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(a.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(a.backgroundIntensity=e.backgroundIntensity),e.backgroundRotation!==void 0&&a.backgroundRotation.fromArray(e.backgroundRotation),e.environmentIntensity!==void 0&&(a.environmentIntensity=e.environmentIntensity),e.environmentRotation!==void 0&&a.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":a=new Hn(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(a.focus=e.focus),e.zoom!==void 0&&(a.zoom=e.zoom),e.filmGauge!==void 0&&(a.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(a.filmOffset=e.filmOffset),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"OrthographicCamera":a=new ec(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(a.zoom=e.zoom),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"AmbientLight":a=new KS(e.color,e.intensity);break;case"DirectionalLight":a=new y_(e.color,e.intensity),a.target=e.target||"";break;case"PointLight":a=new __(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":a=new QS(e.color,e.intensity,e.width,e.height);break;case"SpotLight":a=new v_(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay),a.target=e.target||"";break;case"HemisphereLight":a=new JS(e.color,e.groundColor,e.intensity);break;case"LightProbe":a=new t1().fromJSON(e);break;case"SkinnedMesh":u=o(e.geometry),h=l(e.material),a=new e_(u,h),e.bindMode!==void 0&&(a.bindMode=e.bindMode),e.bindMatrix!==void 0&&a.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(a.skeleton=e.skeleton);break;case"Mesh":u=o(e.geometry),h=l(e.material),a=new Mn(u,h);break;case"InstancedMesh":u=o(e.geometry),h=l(e.material);const d=e.count,f=e.instanceMatrix,p=e.instanceColor;a=new t_(u,h,d),a.instanceMatrix=new ao(new Float32Array(f.array),16),p!==void 0&&(a.instanceColor=new ao(new Float32Array(p.array),p.itemSize));break;case"BatchedMesh":u=o(e.geometry),h=l(e.material),a=new _S(e.maxInstanceCount,e.maxVertexCount,e.maxIndexCount,h),a.geometry=u,a.perObjectFrustumCulled=e.perObjectFrustumCulled,a.sortObjects=e.sortObjects,a._drawRanges=e.drawRanges,a._reservedRanges=e.reservedRanges,a._geometryInfo=e.geometryInfo.map(v=>{let g=null,m=null;return v.boundingBox!==void 0&&(g=new On,g.min.fromArray(v.boundingBox.min),g.max.fromArray(v.boundingBox.max)),v.boundingSphere!==void 0&&(m=new kn,m.radius=v.boundingSphere.radius,m.center.fromArray(v.boundingSphere.center)),{...v,boundingBox:g,boundingSphere:m}}),a._instanceInfo=e.instanceInfo,a._availableInstanceIds=e._availableInstanceIds,a._availableGeometryIds=e._availableGeometryIds,a._nextIndexStart=e.nextIndexStart,a._nextVertexStart=e.nextVertexStart,a._geometryCount=e.geometryCount,a._maxInstanceCount=e.maxInstanceCount,a._maxVertexCount=e.maxVertexCount,a._maxIndexCount=e.maxIndexCount,a._geometryInitialized=e.geometryInitialized,a._matricesTexture=c(e.matricesTexture.uuid),a._indirectTexture=c(e.indirectTexture.uuid),e.colorsTexture!==void 0&&(a._colorsTexture=c(e.colorsTexture.uuid)),e.boundingSphere!==void 0&&(a.boundingSphere=new kn,a.boundingSphere.center.fromArray(e.boundingSphere.center),a.boundingSphere.radius=e.boundingSphere.radius),e.boundingBox!==void 0&&(a.boundingBox=new On,a.boundingBox.min.fromArray(e.boundingBox.min),a.boundingBox.max.fromArray(e.boundingBox.max));break;case"LOD":a=new vS;break;case"Line":a=new Ds(o(e.geometry),l(e.material));break;case"LineLoop":a=new n_(o(e.geometry),l(e.material));break;case"LineSegments":a=new kr(o(e.geometry),l(e.material));break;case"PointCloud":case"Points":a=new wp(o(e.geometry),l(e.material));break;case"Sprite":a=new gS(l(e.material));break;case"Group":a=new mr;break;case"Bone":a=new Mp;break;default:a=new Wt}if(a.uuid=e.uuid,e.name!==void 0&&(a.name=e.name),e.matrix!==void 0?(a.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(a.matrixAutoUpdate=e.matrixAutoUpdate),a.matrixAutoUpdate&&a.matrix.decompose(a.position,a.quaternion,a.scale)):(e.position!==void 0&&a.position.fromArray(e.position),e.rotation!==void 0&&a.rotation.fromArray(e.rotation),e.quaternion!==void 0&&a.quaternion.fromArray(e.quaternion),e.scale!==void 0&&a.scale.fromArray(e.scale)),e.up!==void 0&&a.up.fromArray(e.up),e.castShadow!==void 0&&(a.castShadow=e.castShadow),e.receiveShadow!==void 0&&(a.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.intensity!==void 0&&(a.shadow.intensity=e.shadow.intensity),e.shadow.bias!==void 0&&(a.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(a.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(a.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&a.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(a.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(a.visible=e.visible),e.frustumCulled!==void 0&&(a.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(a.renderOrder=e.renderOrder),e.userData!==void 0&&(a.userData=e.userData),e.layers!==void 0&&(a.layers.mask=e.layers),e.children!==void 0){const d=e.children;for(let f=0;f<d.length;f++)a.add(this.parseObject(d[f],t,n,i,s))}if(e.animations!==void 0){const d=e.animations;for(let f=0;f<d.length;f++){const p=d[f];a.animations.push(s[p])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(a.autoUpdate=e.autoUpdate);const d=e.levels;for(let f=0;f<d.length;f++){const p=d[f],v=a.getObjectByProperty("uuid",p.object);v!==void 0&&a.addLevel(v,p.distance,p.hysteresis)}}return a}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(n){if(n.isSkinnedMesh===!0&&n.skeleton!==void 0){const i=t[n.skeleton];i===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",n.skeleton):n.bind(i,n.bindMatrix)}})}bindLightTargets(e){e.traverse(function(t){if(t.isDirectionalLight||t.isSpotLight){const n=t.target,i=e.getObjectByProperty("uuid",n);i!==void 0?t.target=i:t.target=new Wt}})}}const kC={UVMapping:sp,CubeReflectionMapping:Ps,CubeRefractionMapping:da,EquirectangularReflectionMapping:du,EquirectangularRefractionMapping:fu,CubeUVReflectionMapping:jl},dy={RepeatWrapping:fa,ClampToEdgeWrapping:tr,MirroredRepeatWrapping:Ll},fy={NearestFilter:Wn,NearestMipmapNearestFilter:ap,NearestMipmapLinearFilter:Ya,LinearFilter:xn,LinearMipmapNearestFilter:wl,LinearMipmapLinearFilter:nr};let r1=class extends bi{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,a=Es.get(e);if(a!==void 0){if(s.manager.itemStart(e),a.then){a.then(c=>{t&&t(c),s.manager.itemEnd(e)}).catch(c=>{i&&i(c)});return}return setTimeout(function(){t&&t(a),s.manager.itemEnd(e)},0),a}const o={};o.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",o.headers=this.requestHeader;const l=fetch(e,o).then(function(c){return c.blob()}).then(function(c){return createImageBitmap(c,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(c){return Es.add(e,c),t&&t(c),s.manager.itemEnd(e),c}).catch(function(c){i&&i(c),Es.remove(e),s.manager.itemError(e),s.manager.itemEnd(e)});Es.add(e,l),s.manager.itemStart(e)}},$h,x_=class{static getContext(){return $h===void 0&&($h=new(window.AudioContext||window.webkitAudioContext)),$h}static setContext(e){$h=e}},M_=class extends bi{constructor(e){super(e)}load(e,t,n,i){const s=this,a=new ar(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(l){try{const c=l.slice(0);x_.getContext().decodeAudioData(c,function(h){t(h)}).catch(o)}catch(c){o(c)}},n,i);function o(l){i?i(l):console.error(l),s.manager.itemError(e)}}};const py=new ft,my=new ft,Ia=new ft;class VC{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Hn,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Hn,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,Ia.copy(e.projectionMatrix);const i=t.eyeSep/2,s=i*t.near/t.focus,a=t.near*Math.tan(Qa*t.fov*.5)/t.zoom;let o,l;my.elements[12]=-i,py.elements[12]=i,o=-a*t.aspect+s,l=a*t.aspect+s,Ia.elements[0]=2*t.near/(l-o),Ia.elements[8]=(l+o)/(l-o),this.cameraL.projectionMatrix.copy(Ia),o=-a*t.aspect-s,l=a*t.aspect-s,Ia.elements[0]=2*t.near/(l-o),Ia.elements[8]=(l+o)/(l-o),this.cameraR.projectionMatrix.copy(Ia)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(my),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(py)}}let s1=class extends Hn{constructor(e=[]){super(),this.isArrayCamera=!0,this.isMultiViewCamera=!1,this.cameras=e}};class b_{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=gy(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=gy();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function gy(){return performance.now()}const Da=new k,vy=new Dn,HC=new k,Na=new k;let a1=class extends Wt{constructor(){super(),this.type="AudioListener",this.context=x_.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new b_}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Da,vy,HC),Na.set(0,0,-1).applyQuaternion(vy),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(Da.x,i),t.positionY.linearRampToValueAtTime(Da.y,i),t.positionZ.linearRampToValueAtTime(Da.z,i),t.forwardX.linearRampToValueAtTime(Na.x,i),t.forwardY.linearRampToValueAtTime(Na.y,i),t.forwardZ.linearRampToValueAtTime(Na.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(Da.x,Da.y,Da.z),t.setOrientation(Na.x,Na.y,Na.z,n.x,n.y,n.z)}},S_=class extends Wt{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(e=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+e),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){return this.detune=e,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}copy(e,t){return super.copy(e,t),e.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=e.autoplay,this.buffer=e.buffer,this.detune=e.detune,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.offset=e.offset,this.duration=e.duration,this.playbackRate=e.playbackRate,this.hasPlaybackControl=e.hasPlaybackControl,this.sourceType=e.sourceType,this.filters=e.filters.slice(),this)}clone(e){return new this.constructor(this.listener).copy(this,e)}};const Fa=new k,_y=new Dn,GC=new k,Oa=new k;class WC extends S_{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){return super.connect(),this.panner.connect(this.gain),this}disconnect(){return super.disconnect(),this.panner.disconnect(this.gain),this}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(Fa,_y,GC),Oa.set(0,0,1).applyQuaternion(_y);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(Fa.x,n),t.positionY.linearRampToValueAtTime(Fa.y,n),t.positionZ.linearRampToValueAtTime(Fa.z,n),t.orientationX.linearRampToValueAtTime(Oa.x,n),t.orientationY.linearRampToValueAtTime(Oa.y,n),t.orientationZ.linearRampToValueAtTime(Oa.z,n)}else t.setPosition(Fa.x,Fa.y,Fa.z),t.setOrientation(Oa.x,Oa.y,Oa.z)}}class $C{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++)e+=t[n];return e/t.length}}let o1=class{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,s,a;switch(t){case"quaternion":i=this._slerp,s=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,s=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,s=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=s,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,s=e*i+i;let a=this.cumulativeWeight;if(a===0){for(let o=0;o!==i;++o)n[s+o]=n[o];a=t}else{a+=t;const o=t/a;this._mixBufferRegion(n,s,0,o,i)}this.cumulativeWeight=a}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,s=this.cumulativeWeight,a=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const l=t*this._origIndex;this._mixBufferRegion(n,i,l,1-s,t)}a>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let l=t,c=t+t;l!==c;++l)if(n[l]!==n[l+t]){o.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let s=n,a=i;s!==a;++s)t[s]=t[i+s%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,s){if(i>=.5)for(let a=0;a!==s;++a)e[t+a]=e[n+a]}_slerp(e,t,n,i){Dn.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,s){const a=this._workIndex*s;Dn.multiplyQuaternionsFlat(e,a,e,t,e,n),Dn.slerpFlat(e,t,e,t,e,a,i)}_lerp(e,t,n,i,s){const a=1-i;for(let o=0;o!==s;++o){const l=t+o;e[l]=e[l]*a+e[n+o]*i}}_lerpAdditive(e,t,n,i,s){for(let a=0;a!==s;++a){const o=t+a;e[o]=e[o]+e[n+a]*i}}};const w_="\\[\\]\\.:\\/",XC=new RegExp("["+w_+"]","g"),T_="[^"+w_+"]",qC="[^"+w_.replace("\\.","")+"]",ZC=/((?:WC+[\/:])*)/.source.replace("WC",T_),YC=/(WCOD+)?/.source.replace("WCOD",qC),jC=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",T_),JC=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",T_),KC=new RegExp("^"+ZC+YC+jC+JC+"$"),QC=["material","materials","bones","map"];let eR=class{constructor(e,t,n){const i=n||ln.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=n.length;i!==s;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}},ln=class dl{constructor(e,t,n){this.path=t,this.parsedPath=n||dl.parseTrackName(t),this.node=dl.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new dl.Composite(e,t,n):new dl(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(XC,"")}static parseTrackName(e){const t=KC.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const s=n.nodeName.substring(i+1);QC.indexOf(s)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=s)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(s){for(let a=0;a<s.length;a++){const o=s[a];if(o.name===t||o.uuid===t)return o;const l=n(o.children);if(l)return l}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let s=t.propertyIndex;if(e||(e=dl.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let c=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let u=0;u<e.length;u++)if(e[u].name===c){c=u;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const a=e[i];if(a===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e);return}let o=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?o=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(o=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(s!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}l=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=s}else a.fromArray!==void 0&&a.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(l=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}};ln.Composite=eR;ln.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};ln.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};ln.prototype.GetterByBindingType=[ln.prototype._getValue_direct,ln.prototype._getValue_array,ln.prototype._getValue_arrayElement,ln.prototype._getValue_toArray];ln.prototype.SetterByBindingTypeAndVersioning=[[ln.prototype._setValue_direct,ln.prototype._setValue_direct_setNeedsUpdate,ln.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[ln.prototype._setValue_array,ln.prototype._setValue_array_setNeedsUpdate,ln.prototype._setValue_array_setMatrixWorldNeedsUpdate],[ln.prototype._setValue_arrayElement,ln.prototype._setValue_arrayElement_setNeedsUpdate,ln.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[ln.prototype._setValue_fromArray,ln.prototype._setValue_fromArray_setNeedsUpdate,ln.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class tR{constructor(){this.isAnimationObjectGroup=!0,this.uuid=rr(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let n=0,i=arguments.length;n!==i;++n)e[arguments[n].uuid]=n;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,n=this._paths,i=this._parsedPaths,s=this._bindings,a=s.length;let o,l=e.length,c=this.nCachedObjects_;for(let u=0,h=arguments.length;u!==h;++u){const d=arguments[u],f=d.uuid;let p=t[f];if(p===void 0){p=l++,t[f]=p,e.push(d);for(let v=0,g=a;v!==g;++v)s[v].push(new ln(d,n[v],i[v]))}else if(p<c){o=e[p];const v=--c,g=e[v];t[g.uuid]=p,e[p]=g,t[f]=v,e[v]=d;for(let m=0,_=a;m!==_;++m){const x=s[m],y=x[v];let b=x[p];x[p]=y,b===void 0&&(b=new ln(d,n[m],i[m])),x[v]=b}}else e[p]!==o&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c}remove(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_;for(let a=0,o=arguments.length;a!==o;++a){const l=arguments[a],c=l.uuid,u=t[c];if(u!==void 0&&u>=s){const h=s++,d=e[h];t[d.uuid]=u,e[u]=d,t[c]=h,e[h]=l;for(let f=0,p=i;f!==p;++f){const v=n[f],g=v[h],m=v[u];v[u]=g,v[h]=m}}}this.nCachedObjects_=s}uncache(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_,a=e.length;for(let o=0,l=arguments.length;o!==l;++o){const c=arguments[o],u=c.uuid,h=t[u];if(h!==void 0)if(delete t[u],h<s){const d=--s,f=e[d],p=--a,v=e[p];t[f.uuid]=h,e[h]=f,t[v.uuid]=d,e[d]=v,e.pop();for(let g=0,m=i;g!==m;++g){const _=n[g],x=_[d],y=_[p];_[h]=x,_[d]=y,_.pop()}}else{const d=--a,f=e[d];d>0&&(t[f.uuid]=h),e[h]=f,e.pop();for(let p=0,v=i;p!==v;++p){const g=n[p];g[h]=g[d],g.pop()}}}this.nCachedObjects_=s}subscribe_(e,t){const n=this._bindingsIndicesByPath;let i=n[e];const s=this._bindings;if(i!==void 0)return s[i];const a=this._paths,o=this._parsedPaths,l=this._objects,c=l.length,u=this.nCachedObjects_,h=new Array(c);i=s.length,n[e]=i,a.push(e),o.push(t),s.push(h);for(let d=u,f=l.length;d!==f;++d){const p=l[d];h[d]=new ln(p,e,t)}return h}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==void 0){const i=this._paths,s=this._parsedPaths,a=this._bindings,o=a.length-1,l=a[o],c=e[o];t[c]=n,a[n]=l,a.pop(),s[n]=s[o],s.pop(),i[n]=i[o],i.pop()}}}let l1=class{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const s=t.tracks,a=s.length,o=new Array(a),l={endingStart:ja,endingEnd:ja};for(let c=0;c!==a;++c){const u=s[c].createInterpolant(null);o[c]=u,u.settings=l}this._interpolantSettings=l,this._interpolants=o,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Gb,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n=!1){if(e.fadeOut(t),this.fadeIn(t),n===!0){const i=this._clip.duration,s=e._clip.duration,a=s/i,o=i/s;e.warp(1,a,t),this.warp(o,1,t)}return this}crossFadeTo(e,t,n=!1){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,s=i.time,a=this.timeScale;let o=this._timeScaleInterpolant;o===null&&(o=i._lendControlInterpolant(),this._timeScaleInterpolant=o);const l=o.parameterPositions,c=o.sampleValues;return l[0]=s,l[1]=s+n,c[0]=e/a,c[1]=t/a,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const s=this._startTime;if(s!==null){const l=(e-s)*n;l<0||n===0?t=0:(this._startTime=null,t=n*l)}t*=this._updateTimeScale(e);const a=this._updateTime(t),o=this._updateWeight(e);if(o>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case Wv:for(let u=0,h=l.length;u!==h;++u)l[u].evaluate(a),c[u].accumulateAdditive(o);break;case fp:default:for(let u=0,h=l.length;u!==h;++u)l[u].evaluate(a),c[u].accumulate(i,o)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,s=this._loopCount;const a=n===Wb;if(e===0)return s===-1?i:a&&(s&1)===1?t-i:i;if(n===Hb){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(s===-1&&(e>=0?(s=0,this._setEndings(!0,this.repetitions===0,a)):this._setEndings(this.repetitions===0,!0,a)),i>=t||i<0){const o=Math.floor(i/t);i-=t*o,s+=Math.abs(o);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(l===1){const c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=s,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=i;if(a&&(s&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=Ja,i.endingEnd=Ja):(e?i.endingStart=this.zeroSlopeAtStart?Ja:ja:i.endingStart=pu,t?i.endingEnd=this.zeroSlopeAtEnd?Ja:ja:i.endingEnd=pu)}_scheduleFading(e,t,n){const i=this._mixer,s=i.time;let a=this._weightInterpolant;a===null&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=s,l[0]=t,o[1]=s+e,l[1]=n,this}};const nR=new Float32Array(1);let c1=class extends ss{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,s=i.length,a=e._propertyBindings,o=e._interpolants,l=n.uuid,c=this._bindingsByRootAndName;let u=c[l];u===void 0&&(u={},c[l]=u);for(let h=0;h!==s;++h){const d=i[h],f=d.name;let p=u[f];if(p!==void 0)++p.referenceCount,a[h]=p;else{if(p=a[h],p!==void 0){p._cacheIndex===null&&(++p.referenceCount,this._addInactiveBinding(p,l,f));continue}const v=t&&t._propertyBindings[h].binding.parsedPath;p=new o1(ln.create(n,f,v),d.ValueTypeName,d.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,l,f),a[h]=p}o[h].resultBuffer=p.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,s=this._actionsByClip[i];this._bindAction(e,s&&s.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];s.useCount++===0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.useCount===0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,s=this._actionsByClip;let a=s[t];if(a===void 0)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,s[t]=a;else{const o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=i.length,i.push(e),a.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const s=e._clip.uuid,a=this._actionsByClip,o=a[s],l=o.knownActions,c=l[l.length-1],u=e._byClipCacheIndex;c._byClipCacheIndex=u,l[u]=c,l.pop(),e._byClipCacheIndex=null;const h=o.actionByRoot,d=(e._localRoot||this._root).uuid;delete h[d],l.length===0&&delete a[s],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.referenceCount===0&&this._removeInactiveBinding(s)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,s=this._bindings;let a=i[t];a===void 0&&(a={},i[t]=a),a[n]=e,e._cacheIndex=s.length,s.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,s=n.path,a=this._bindingsByRootAndName,o=a[i],l=t[t.length-1],c=e._cacheIndex;l._cacheIndex=c,t[c]=l,t.pop(),delete o[s],Object.keys(o).length===0&&delete a[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new d_(new Float32Array(2),new Float32Array(2),1,nR),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,s=t[i];e.__cacheIndex=i,t[i]=e,s.__cacheIndex=n,t[n]=s}clipAction(e,t,n){const i=t||this._root,s=i.uuid;let a=typeof e=="string"?Vl.findByName(i,e):e;const o=a!==null?a.uuid:e,l=this._actionsByClip[o];let c=null;if(n===void 0&&(a!==null?n=a.blendMode:n=fp),l!==void 0){const h=l.actionByRoot[s];if(h!==void 0&&h.blendMode===n)return h;c=l.knownActions[0],a===null&&(a=c._clip)}if(a===null)return null;const u=new l1(this,a,t,n);return this._bindAction(u,c),this._addInactiveAction(u,o,s),u}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?Vl.findByName(n,e):e,a=s?s.uuid:e,o=this._actionsByClip[a];return o!==void 0&&o.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,s=Math.sign(e),a=this._accuIndex^=1;for(let c=0;c!==n;++c)t[c]._update(i,e,s,a);const o=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)o[c].apply(a);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,s=i[n];if(s!==void 0){const a=s.knownActions;for(let o=0,l=a.length;o!==l;++o){const c=a[o];this._deactivateAction(c);const u=c._cacheIndex,h=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=u,t[u]=h,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const a in n){const o=n[a].actionByRoot,l=o[t];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const i=this._bindingsByRootAndName,s=i[t];if(s!==void 0)for(const a in s){const o=s[a];o.restoreOriginalState(),this._removeInactiveBinding(o)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}};class iR extends pp{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isRenderTarget3D=!0,this.depth=n,this.texture=new mp(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class rR extends pp{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isRenderTargetArray=!0,this.depth=n,this.texture=new Yu(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class E_{constructor(e){this.value=e}clone(){return new E_(this.value.clone===void 0?this.value:this.value.clone())}}let sR=0;class aR extends ss{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:sR++}),this.name="",this.usage=gu,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){this.dispatchEvent({type:"dispose"})}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let n=0,i=t.length;n<i;n++){const s=Array.isArray(t[n])?t[n]:[t[n]];for(let a=0;a<s.length;a++)this.uniforms.push(s[a].clone())}return this}clone(){return new this.constructor().copy(this)}}let oR=class extends Ju{constructor(e,t,n=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}};class lR{constructor(e,t,n,i,s){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=i,this.count=s,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}const yy=new ft;class A_{constructor(e,t,n=0,i=1/0){this.ray=new yo(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new gp,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return yy.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(yy),this}intersectObject(e,t=!0,n=[]){return sv(e,this,n,t),n.sort(xy),n}intersectObjects(e,t=!0,n=[]){for(let i=0,s=e.length;i<s;i++)sv(e[i],this,n,t);return n.sort(xy),n}}function xy(r,e){return r.distance-e.distance}function sv(r,e,t,n){let i=!0;if(r.layers.test(e.layers)&&r.raycast(e,t)===!1&&(i=!1),i===!0&&n===!0){const s=r.children;for(let a=0,o=s.length;a<o;a++)sv(s[a],e,t,!0)}}class cR{constructor(e=1,t=0,n=0){this.radius=e,this.phi=t,this.theta=n}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Ct(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Ct(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class uR{constructor(e=1,t=0,n=0){this.radius=e,this.theta=t,this.y=n}set(e,t,n){return this.radius=e,this.theta=t,this.y=n,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}clone(){return new this.constructor().copy(this)}}class C_{constructor(e,t,n,i){C_.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==void 0&&this.set(e,t,n,i)}identity(){return this.set(1,0,0,1),this}fromArray(e,t=0){for(let n=0;n<4;n++)this.elements[n]=e[n+t];return this}set(e,t,n,i){const s=this.elements;return s[0]=e,s[2]=t,s[1]=n,s[3]=i,this}}const My=new Pe;class hR{constructor(e=new Pe(1/0,1/0),t=new Pe(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=My.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,My).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const by=new k,Xh=new k;class u1{constructor(e=new k,t=new k){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){by.subVectors(e,this.start),Xh.subVectors(this.end,this.start);const n=Xh.dot(Xh);let s=Xh.dot(by)/n;return t&&(s=Ct(s,0,1)),s}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const Sy=new k;class dR extends Wt{constructor(e,t){super(),this.light=e,this.matrixAutoUpdate=!1,this.color=t,this.type="SpotLightHelper";const n=new Lt,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let a=0,o=1,l=32;a<l;a++,o++){const c=a/l*Math.PI*2,u=o/l*Math.PI*2;i.push(Math.cos(c),Math.sin(c),1,Math.cos(u),Math.sin(u),1)}n.setAttribute("position",new rt(i,3));const s=new Mi({fog:!1,toneMapped:!1});this.cone=new kr(n,s),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),Sy.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Sy),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Hs=new k,qh=new ft,Gm=new ft;let fR=class extends kr{constructor(e){const t=h1(e),n=new Lt,i=[],s=[],a=new Ye(0,0,1),o=new Ye(0,1,0);for(let c=0;c<t.length;c++){const u=t[c];u.parent&&u.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),s.push(a.r,a.g,a.b),s.push(o.r,o.g,o.b))}n.setAttribute("position",new rt(i,3)),n.setAttribute("color",new rt(s,3));const l=new Mi({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,l),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");Gm.copy(this.root.matrixWorld).invert();for(let s=0,a=0;s<t.length;s++){const o=t[s];o.parent&&o.parent.isBone&&(qh.multiplyMatrices(Gm,o.matrixWorld),Hs.setFromMatrixPosition(qh),i.setXYZ(a,Hs.x,Hs.y,Hs.z),qh.multiplyMatrices(Gm,o.parent.matrixWorld),Hs.setFromMatrixPosition(qh),i.setXYZ(a+1,Hs.x,Hs.y,Hs.z),a+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}};function h1(r){const e=[];r.isBone===!0&&e.push(r);for(let t=0;t<r.children.length;t++)e.push(...h1(r.children[t]));return e}class pR extends Mn{constructor(e,t,n){const i=new nh(t,4,2),s=new ir({wireframe:!0,fog:!1,toneMapped:!1});super(i,s),this.light=e,this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const mR=new k,wy=new Ye,Ty=new Ye;class gR extends Wt{constructor(e,t,n){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="HemisphereLightHelper";const i=new th(t);i.rotateY(Math.PI*.5),this.material=new ir({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const s=i.getAttribute("position"),a=new Float32Array(s.count*3);i.setAttribute("color",new qt(a,3)),this.add(new Mn(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");wy.copy(this.light.color),Ty.copy(this.light.groundColor);for(let n=0,i=t.count;n<i;n++){const s=n<i/2?wy:Ty;t.setXYZ(n,s.r,s.g,s.b)}t.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(mR.setFromMatrixPosition(this.light.matrixWorld).negate())}}let vR=class extends kr{constructor(e=10,t=10,n=4473924,i=8947848){n=new Ye(n),i=new Ye(i);const s=t/2,a=e/t,o=e/2,l=[],c=[];for(let d=0,f=0,p=-o;d<=t;d++,p+=a){l.push(-o,0,p,o,0,p),l.push(p,0,-o,p,0,o);const v=d===s?n:i;v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3}const u=new Lt;u.setAttribute("position",new rt(l,3)),u.setAttribute("color",new rt(c,3));const h=new Mi({vertexColors:!0,toneMapped:!1});super(u,h),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}};class _R extends kr{constructor(e=10,t=16,n=8,i=64,s=4473924,a=8947848){s=new Ye(s),a=new Ye(a);const o=[],l=[];if(t>1)for(let h=0;h<t;h++){const d=h/t*(Math.PI*2),f=Math.sin(d)*e,p=Math.cos(d)*e;o.push(0,0,0),o.push(f,0,p);const v=h&1?s:a;l.push(v.r,v.g,v.b),l.push(v.r,v.g,v.b)}for(let h=0;h<n;h++){const d=h&1?s:a,f=e-e/n*h;for(let p=0;p<i;p++){let v=p/i*(Math.PI*2),g=Math.sin(v)*f,m=Math.cos(v)*f;o.push(g,0,m),l.push(d.r,d.g,d.b),v=(p+1)/i*(Math.PI*2),g=Math.sin(v)*f,m=Math.cos(v)*f,o.push(g,0,m),l.push(d.r,d.g,d.b)}}const c=new Lt;c.setAttribute("position",new rt(o,3)),c.setAttribute("color",new rt(l,3));const u=new Mi({vertexColors:!0,toneMapped:!1});super(c,u),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const Ey=new k,Zh=new k,Ay=new k;class yR extends Wt{constructor(e,t,n){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",t===void 0&&(t=1);let i=new Lt;i.setAttribute("position",new rt([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const s=new Mi({fog:!1,toneMapped:!1});this.lightPlane=new Ds(i,s),this.add(this.lightPlane),i=new Lt,i.setAttribute("position",new rt([0,0,0,0,0,1],3)),this.targetLine=new Ds(i,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),Ey.setFromMatrixPosition(this.light.matrixWorld),Zh.setFromMatrixPosition(this.light.target.matrixWorld),Ay.subVectors(Zh,Ey),this.lightPlane.lookAt(Zh),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Zh),this.targetLine.scale.z=Ay.length()}}const Yh=new k,Pn=new _p;class xR extends kr{constructor(e){const t=new Lt,n=new Mi({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],s=[],a={};o("n1","n2"),o("n2","n4"),o("n4","n3"),o("n3","n1"),o("f1","f2"),o("f2","f4"),o("f4","f3"),o("f3","f1"),o("n1","f1"),o("n2","f2"),o("n3","f3"),o("n4","f4"),o("p","n1"),o("p","n2"),o("p","n3"),o("p","n4"),o("u1","u2"),o("u2","u3"),o("u3","u1"),o("c","t"),o("p","c"),o("cn1","cn2"),o("cn3","cn4"),o("cf1","cf2"),o("cf3","cf4");function o(p,v){l(p),l(v)}function l(p){i.push(0,0,0),s.push(0,0,0),a[p]===void 0&&(a[p]=[]),a[p].push(i.length/3-1)}t.setAttribute("position",new rt(i,3)),t.setAttribute("color",new rt(s,3)),super(t,n),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update();const c=new Ye(16755200),u=new Ye(16711680),h=new Ye(43775),d=new Ye(16777215),f=new Ye(3355443);this.setColors(c,u,h,d,f)}setColors(e,t,n,i,s){const o=this.geometry.getAttribute("color");o.setXYZ(0,e.r,e.g,e.b),o.setXYZ(1,e.r,e.g,e.b),o.setXYZ(2,e.r,e.g,e.b),o.setXYZ(3,e.r,e.g,e.b),o.setXYZ(4,e.r,e.g,e.b),o.setXYZ(5,e.r,e.g,e.b),o.setXYZ(6,e.r,e.g,e.b),o.setXYZ(7,e.r,e.g,e.b),o.setXYZ(8,e.r,e.g,e.b),o.setXYZ(9,e.r,e.g,e.b),o.setXYZ(10,e.r,e.g,e.b),o.setXYZ(11,e.r,e.g,e.b),o.setXYZ(12,e.r,e.g,e.b),o.setXYZ(13,e.r,e.g,e.b),o.setXYZ(14,e.r,e.g,e.b),o.setXYZ(15,e.r,e.g,e.b),o.setXYZ(16,e.r,e.g,e.b),o.setXYZ(17,e.r,e.g,e.b),o.setXYZ(18,e.r,e.g,e.b),o.setXYZ(19,e.r,e.g,e.b),o.setXYZ(20,e.r,e.g,e.b),o.setXYZ(21,e.r,e.g,e.b),o.setXYZ(22,e.r,e.g,e.b),o.setXYZ(23,e.r,e.g,e.b),o.setXYZ(24,t.r,t.g,t.b),o.setXYZ(25,t.r,t.g,t.b),o.setXYZ(26,t.r,t.g,t.b),o.setXYZ(27,t.r,t.g,t.b),o.setXYZ(28,t.r,t.g,t.b),o.setXYZ(29,t.r,t.g,t.b),o.setXYZ(30,t.r,t.g,t.b),o.setXYZ(31,t.r,t.g,t.b),o.setXYZ(32,n.r,n.g,n.b),o.setXYZ(33,n.r,n.g,n.b),o.setXYZ(34,n.r,n.g,n.b),o.setXYZ(35,n.r,n.g,n.b),o.setXYZ(36,n.r,n.g,n.b),o.setXYZ(37,n.r,n.g,n.b),o.setXYZ(38,i.r,i.g,i.b),o.setXYZ(39,i.r,i.g,i.b),o.setXYZ(40,s.r,s.g,s.b),o.setXYZ(41,s.r,s.g,s.b),o.setXYZ(42,s.r,s.g,s.b),o.setXYZ(43,s.r,s.g,s.b),o.setXYZ(44,s.r,s.g,s.b),o.setXYZ(45,s.r,s.g,s.b),o.setXYZ(46,s.r,s.g,s.b),o.setXYZ(47,s.r,s.g,s.b),o.setXYZ(48,s.r,s.g,s.b),o.setXYZ(49,s.r,s.g,s.b),o.needsUpdate=!0}update(){const e=this.geometry,t=this.pointMap,n=1,i=1;Pn.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);const s=this.camera.coordinateSystem===pr?-1:0;Nn("c",t,e,Pn,0,0,s),Nn("t",t,e,Pn,0,0,1),Nn("n1",t,e,Pn,-1,-1,s),Nn("n2",t,e,Pn,n,-1,s),Nn("n3",t,e,Pn,-1,i,s),Nn("n4",t,e,Pn,n,i,s),Nn("f1",t,e,Pn,-1,-1,1),Nn("f2",t,e,Pn,n,-1,1),Nn("f3",t,e,Pn,-1,i,1),Nn("f4",t,e,Pn,n,i,1),Nn("u1",t,e,Pn,n*.7,i*1.1,s),Nn("u2",t,e,Pn,-1*.7,i*1.1,s),Nn("u3",t,e,Pn,0,i*2,s),Nn("cf1",t,e,Pn,-1,0,1),Nn("cf2",t,e,Pn,n,0,1),Nn("cf3",t,e,Pn,0,-1,1),Nn("cf4",t,e,Pn,0,i,1),Nn("cn1",t,e,Pn,-1,0,s),Nn("cn2",t,e,Pn,n,0,s),Nn("cn3",t,e,Pn,0,-1,s),Nn("cn4",t,e,Pn,0,i,s),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Nn(r,e,t,n,i,s,a){Yh.set(i,s,a).unproject(n);const o=e[r];if(o!==void 0){const l=t.getAttribute("position");for(let c=0,u=o.length;c<u;c++)l.setXYZ(o[c],Yh.x,Yh.y,Yh.z)}}const jh=new On;class MR extends kr{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(8*3),s=new Lt;s.setIndex(new qt(n,1)),s.setAttribute("position",new qt(i,3)),super(s,new Mi({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(){if(this.object!==void 0&&jh.setFromObject(this.object),jh.isEmpty())return;const e=jh.min,t=jh.max,n=this.geometry.attributes.position,i=n.array;i[0]=t.x,i[1]=t.y,i[2]=t.z,i[3]=e.x,i[4]=t.y,i[5]=t.z,i[6]=e.x,i[7]=e.y,i[8]=t.z,i[9]=t.x,i[10]=e.y,i[11]=t.z,i[12]=t.x,i[13]=t.y,i[14]=e.z,i[15]=e.x,i[16]=t.y,i[17]=e.z,i[18]=e.x,i[19]=e.y,i[20]=e.z,i[21]=t.x,i[22]=e.y,i[23]=e.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class bR extends kr{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],s=new Lt;s.setIndex(new qt(n,1)),s.setAttribute("position",new rt(i,3)),super(s,new Mi({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class SR extends Ds{constructor(e,t=1,n=16776960){const i=n,s=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],a=new Lt;a.setAttribute("position",new rt(s,3)),a.computeBoundingSphere(),super(a,new Mi({color:i,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const o=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],l=new Lt;l.setAttribute("position",new rt(o,3)),l.computeBoundingSphere(),this.add(new Mn(l,new ir({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const Cy=new k;let Jh,Wm;class wR extends Wt{constructor(e=new k(0,0,1),t=new k(0,0,0),n=1,i=16776960,s=n*.2,a=s*.2){super(),this.type="ArrowHelper",Jh===void 0&&(Jh=new Lt,Jh.setAttribute("position",new rt([0,0,0,0,1,0],3)),Wm=new eh(.5,1,5,1),Wm.translate(0,-.5,0)),this.position.copy(t),this.line=new Ds(Jh,new Mi({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Mn(Wm,new ir({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,s,a)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Cy.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Cy,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class TR extends kr{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new Lt;i.setAttribute("position",new rt(t,3)),i.setAttribute("color",new rt(n,3));const s=new Mi({vertexColors:!0,toneMapped:!1});super(i,s),this.type="AxesHelper"}setColors(e,t,n){const i=new Ye,s=this.geometry.attributes.color.array;return i.set(e),i.toArray(s,0),i.toArray(s,3),i.set(t),i.toArray(s,6),i.toArray(s,9),i.set(n),i.toArray(s,12),i.toArray(s,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class ER{constructor(){this.type="ShapePath",this.color=new Ye,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new Nf,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this}bezierCurveTo(e,t,n,i,s,a){return this.currentPath.bezierCurveTo(e,t,n,i,s,a),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(m){const _=[];for(let x=0,y=m.length;x<y;x++){const b=m[x],M=new eo;M.curves=b.curves,_.push(M)}return _}function n(m,_){const x=_.length;let y=!1;for(let b=x-1,M=0;M<x;b=M++){let w=_[b],C=_[M],T=C.x-w.x,S=C.y-w.y;if(Math.abs(S)>Number.EPSILON){if(S<0&&(w=_[M],T=-T,C=_[b],S=-S),m.y<w.y||m.y>C.y)continue;if(m.y===w.y){if(m.x===w.x)return!0}else{const R=S*(m.x-w.x)-T*(m.y-w.y);if(R===0)return!0;if(R<0)continue;y=!y}}else{if(m.y!==w.y)continue;if(C.x<=m.x&&m.x<=w.x||w.x<=m.x&&m.x<=C.x)return!0}}return y}const i=Ts.isClockWise,s=this.subPaths;if(s.length===0)return[];let a,o,l;const c=[];if(s.length===1)return o=s[0],l=new eo,l.curves=o.curves,c.push(l),c;let u=!i(s[0].getPoints());u=e?!u:u;const h=[],d=[];let f=[],p=0,v;d[p]=void 0,f[p]=[];for(let m=0,_=s.length;m<_;m++)o=s[m],v=o.getPoints(),a=i(v),a=e?!a:a,a?(!u&&d[p]&&p++,d[p]={s:new eo,p:v},d[p].s.curves=o.curves,u&&p++,f[p]=[]):f[p].push({h:o,p:v[0]});if(!d[0])return t(s);if(d.length>1){let m=!1,_=0;for(let x=0,y=d.length;x<y;x++)h[x]=[];for(let x=0,y=d.length;x<y;x++){const b=f[x];for(let M=0;M<b.length;M++){const w=b[M];let C=!0;for(let T=0;T<d.length;T++)n(w.p,d[T].p)&&(x!==T&&_++,C?(C=!1,h[T].push(w)):m=!0);C&&h[x].push(w)}}_>0&&m===!1&&(f=h)}let g;for(let m=0,_=d.length;m<_;m++){l=d[m].s,c.push(l),g=f[m];for(let x=0,y=g.length;x<y;x++)l.holes.push(g[x].h)}return c}}class AR extends ss{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(e){if(e===void 0){console.warn("THREE.Controls: connect() now requires an element.");return}this.domElement!==null&&this.disconnect(),this.domElement=e}disconnect(){}dispose(){}update(){}}function CR(r,e){const t=r.image&&r.image.width?r.image.width/r.image.height:1;return t>e?(r.repeat.x=1,r.repeat.y=t/e,r.offset.x=0,r.offset.y=(1-r.repeat.y)/2):(r.repeat.x=e/t,r.repeat.y=1,r.offset.x=(1-r.repeat.x)/2,r.offset.y=0),r}function RR(r,e){const t=r.image&&r.image.width?r.image.width/r.image.height:1;return t>e?(r.repeat.x=e/t,r.repeat.y=1,r.offset.x=(1-r.repeat.x)/2,r.offset.y=0):(r.repeat.x=1,r.repeat.y=t/e,r.offset.x=0,r.offset.y=(1-r.repeat.y)/2),r}function LR(r){return r.repeat.x=1,r.repeat.y=1,r.offset.x=0,r.offset.y=0,r}function av(r,e,t,n){const i=PR(n);switch(t){case kv:return r*e;case up:return r*e/i.components*i.byteLength;case Zu:return r*e/i.components*i.byteLength;case Hv:return r*e*2/i.components*i.byteLength;case hp:return r*e*2/i.components*i.byteLength;case Vv:return r*e*3/i.components*i.byteLength;case Ri:return r*e*4/i.components*i.byteLength;case dp:return r*e*4/i.components*i.byteLength;case Zc:case Yc:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case jc:case Jc:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case sf:case of:return Math.max(r,16)*Math.max(e,8)/4;case rf:case af:return Math.max(r,8)*Math.max(e,8)/2;case lf:case cf:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case uf:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case hf:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case df:return Math.floor((r+4)/5)*Math.floor((e+3)/4)*16;case ff:return Math.floor((r+4)/5)*Math.floor((e+4)/5)*16;case pf:return Math.floor((r+5)/6)*Math.floor((e+4)/5)*16;case mf:return Math.floor((r+5)/6)*Math.floor((e+5)/6)*16;case gf:return Math.floor((r+7)/8)*Math.floor((e+4)/5)*16;case vf:return Math.floor((r+7)/8)*Math.floor((e+5)/6)*16;case _f:return Math.floor((r+7)/8)*Math.floor((e+7)/8)*16;case yf:return Math.floor((r+9)/10)*Math.floor((e+4)/5)*16;case xf:return Math.floor((r+9)/10)*Math.floor((e+5)/6)*16;case Mf:return Math.floor((r+9)/10)*Math.floor((e+7)/8)*16;case bf:return Math.floor((r+9)/10)*Math.floor((e+9)/10)*16;case Sf:return Math.floor((r+11)/12)*Math.floor((e+9)/10)*16;case wf:return Math.floor((r+11)/12)*Math.floor((e+11)/12)*16;case Kc:case Tf:case Ef:return Math.ceil(r/4)*Math.ceil(e/4)*16;case Gv:case Af:return Math.ceil(r/4)*Math.ceil(e/4)*8;case Cf:case Rf:return Math.ceil(r/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function PR(r){switch(r){case Ur:case Uv:return{byteLength:1,components:1};case Pl:case Bv:case _o:return{byteLength:2,components:1};case lp:case cp:return{byteLength:2,components:4};case Is:case op:case zi:return{byteLength:4,components:1};case zv:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}class IR{static contain(e,t){return CR(e,t)}static cover(e,t){return RR(e,t)}static fill(e){return LR(e)}static getByteLength(e,t,n,i){return av(e,t,n,i)}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:rp}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=rp);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function d1(){let r=null,e=!1,t=null,n=null;function i(s,a){t(s,a),n=r.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(i),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){r=s}}}function DR(r){const e=new WeakMap;function t(o,l){const c=o.array,u=o.usage,h=c.byteLength,d=r.createBuffer();r.bindBuffer(l,d),r.bufferData(l,c,u),o.onUploadCallback();let f;if(c instanceof Float32Array)f=r.FLOAT;else if(c instanceof Uint16Array)o.isFloat16BufferAttribute?f=r.HALF_FLOAT:f=r.UNSIGNED_SHORT;else if(c instanceof Int16Array)f=r.SHORT;else if(c instanceof Uint32Array)f=r.UNSIGNED_INT;else if(c instanceof Int32Array)f=r.INT;else if(c instanceof Int8Array)f=r.BYTE;else if(c instanceof Uint8Array)f=r.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)f=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:d,type:f,bytesPerElement:c.BYTES_PER_ELEMENT,version:o.version,size:h}}function n(o,l,c){const u=l.array,h=l.updateRanges;if(r.bindBuffer(c,o),h.length===0)r.bufferSubData(c,0,u);else{h.sort((f,p)=>f.start-p.start);let d=0;for(let f=1;f<h.length;f++){const p=h[d],v=h[f];v.start<=p.start+p.count+1?p.count=Math.max(p.count,v.start+v.count-p.start):(++d,h[d]=v)}h.length=d+1;for(let f=0,p=h.length;f<p;f++){const v=h[f];r.bufferSubData(c,v.start*u.BYTES_PER_ELEMENT,u,v.start,v.count)}l.clearUpdateRanges()}l.onUploadCallback()}function i(o){return o.isInterleavedBufferAttribute&&(o=o.data),e.get(o)}function s(o){o.isInterleavedBufferAttribute&&(o=o.data);const l=e.get(o);l&&(r.deleteBuffer(l.buffer),e.delete(o))}function a(o,l){if(o.isInterleavedBufferAttribute&&(o=o.data),o.isGLBufferAttribute){const u=e.get(o);(!u||u.version<o.version)&&e.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}const c=e.get(o);if(c===void 0)e.set(o,t(o,l));else if(c.version<o.version){if(c.size!==o.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,o,l),c.version=o.version}}return{get:i,remove:s,update:a}}var NR=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,FR=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,OR=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,UR=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,BR=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,zR=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,kR=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,VR=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,HR=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,GR=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,WR=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,$R=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,XR=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,qR=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,ZR=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,YR=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,jR=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,JR=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,KR=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,QR=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,e2=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,t2=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,n2=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,i2=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,r2=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,s2=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,a2=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,o2=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,l2=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,c2=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,u2="gl_FragColor = linearToOutputTexel( gl_FragColor );",h2=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,d2=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,f2=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,p2=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,m2=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,g2=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,v2=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,_2=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,y2=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,x2=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,M2=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,b2=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,S2=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,w2=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,T2=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,E2=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,A2=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,C2=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,R2=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,L2=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,P2=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,I2=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,D2=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,N2=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,F2=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,O2=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,U2=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,B2=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,z2=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,k2=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,V2=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,H2=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,G2=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,W2=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,$2=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,X2=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,q2=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,Z2=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,Y2=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,j2=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,J2=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,K2=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Q2=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,eL=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,tL=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,nL=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,iL=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,rL=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,sL=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,aL=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,oL=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,lL=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,cL=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,uL=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,hL=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,dL=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,fL=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,pL=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,mL=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,gL=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,vL=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,_L=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,yL=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,xL=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,ML=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,bL=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,SL=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,wL=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,TL=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,EL=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,AL=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,CL=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,RL=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,LL=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,PL=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,IL=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const DL=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,NL=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,FL=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,OL=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,UL=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,BL=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,zL=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,kL=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,VL=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,HL=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,GL=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,WL=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,$L=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,XL=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,qL=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,ZL=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,YL=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,jL=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,JL=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,KL=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,QL=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,eP=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,tP=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,nP=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,iP=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,rP=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sP=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,aP=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,oP=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,lP=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,cP=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,uP=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,hP=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,dP=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,_t={alphahash_fragment:NR,alphahash_pars_fragment:FR,alphamap_fragment:OR,alphamap_pars_fragment:UR,alphatest_fragment:BR,alphatest_pars_fragment:zR,aomap_fragment:kR,aomap_pars_fragment:VR,batching_pars_vertex:HR,batching_vertex:GR,begin_vertex:WR,beginnormal_vertex:$R,bsdfs:XR,iridescence_fragment:qR,bumpmap_pars_fragment:ZR,clipping_planes_fragment:YR,clipping_planes_pars_fragment:jR,clipping_planes_pars_vertex:JR,clipping_planes_vertex:KR,color_fragment:QR,color_pars_fragment:e2,color_pars_vertex:t2,color_vertex:n2,common:i2,cube_uv_reflection_fragment:r2,defaultnormal_vertex:s2,displacementmap_pars_vertex:a2,displacementmap_vertex:o2,emissivemap_fragment:l2,emissivemap_pars_fragment:c2,colorspace_fragment:u2,colorspace_pars_fragment:h2,envmap_fragment:d2,envmap_common_pars_fragment:f2,envmap_pars_fragment:p2,envmap_pars_vertex:m2,envmap_physical_pars_fragment:E2,envmap_vertex:g2,fog_vertex:v2,fog_pars_vertex:_2,fog_fragment:y2,fog_pars_fragment:x2,gradientmap_pars_fragment:M2,lightmap_pars_fragment:b2,lights_lambert_fragment:S2,lights_lambert_pars_fragment:w2,lights_pars_begin:T2,lights_toon_fragment:A2,lights_toon_pars_fragment:C2,lights_phong_fragment:R2,lights_phong_pars_fragment:L2,lights_physical_fragment:P2,lights_physical_pars_fragment:I2,lights_fragment_begin:D2,lights_fragment_maps:N2,lights_fragment_end:F2,logdepthbuf_fragment:O2,logdepthbuf_pars_fragment:U2,logdepthbuf_pars_vertex:B2,logdepthbuf_vertex:z2,map_fragment:k2,map_pars_fragment:V2,map_particle_fragment:H2,map_particle_pars_fragment:G2,metalnessmap_fragment:W2,metalnessmap_pars_fragment:$2,morphinstance_vertex:X2,morphcolor_vertex:q2,morphnormal_vertex:Z2,morphtarget_pars_vertex:Y2,morphtarget_vertex:j2,normal_fragment_begin:J2,normal_fragment_maps:K2,normal_pars_fragment:Q2,normal_pars_vertex:eL,normal_vertex:tL,normalmap_pars_fragment:nL,clearcoat_normal_fragment_begin:iL,clearcoat_normal_fragment_maps:rL,clearcoat_pars_fragment:sL,iridescence_pars_fragment:aL,opaque_fragment:oL,packing:lL,premultiplied_alpha_fragment:cL,project_vertex:uL,dithering_fragment:hL,dithering_pars_fragment:dL,roughnessmap_fragment:fL,roughnessmap_pars_fragment:pL,shadowmap_pars_fragment:mL,shadowmap_pars_vertex:gL,shadowmap_vertex:vL,shadowmask_pars_fragment:_L,skinbase_vertex:yL,skinning_pars_vertex:xL,skinning_vertex:ML,skinnormal_vertex:bL,specularmap_fragment:SL,specularmap_pars_fragment:wL,tonemapping_fragment:TL,tonemapping_pars_fragment:EL,transmission_fragment:AL,transmission_pars_fragment:CL,uv_pars_fragment:RL,uv_pars_vertex:LL,uv_vertex:PL,worldpos_vertex:IL,background_vert:DL,background_frag:NL,backgroundCube_vert:FL,backgroundCube_frag:OL,cube_vert:UL,cube_frag:BL,depth_vert:zL,depth_frag:kL,distanceRGBA_vert:VL,distanceRGBA_frag:HL,equirect_vert:GL,equirect_frag:WL,linedashed_vert:$L,linedashed_frag:XL,meshbasic_vert:qL,meshbasic_frag:ZL,meshlambert_vert:YL,meshlambert_frag:jL,meshmatcap_vert:JL,meshmatcap_frag:KL,meshnormal_vert:QL,meshnormal_frag:eP,meshphong_vert:tP,meshphong_frag:nP,meshphysical_vert:iP,meshphysical_frag:rP,meshtoon_vert:sP,meshtoon_frag:aP,points_vert:oP,points_frag:lP,shadow_vert:cP,shadow_frag:uP,sprite_vert:hP,sprite_frag:dP},je={common:{diffuse:{value:new Ye(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Nt},alphaMap:{value:null},alphaMapTransform:{value:new Nt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Nt}},envmap:{envMap:{value:null},envMapRotation:{value:new Nt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Nt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Nt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Nt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Nt},normalScale:{value:new Pe(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Nt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Nt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Nt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Nt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ye(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ye(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Nt},alphaTest:{value:0},uvTransform:{value:new Nt}},sprite:{diffuse:{value:new Ye(16777215)},opacity:{value:1},center:{value:new Pe(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Nt},alphaMap:{value:null},alphaMapTransform:{value:new Nt},alphaTest:{value:0}}},dr={basic:{uniforms:Ti([je.common,je.specularmap,je.envmap,je.aomap,je.lightmap,je.fog]),vertexShader:_t.meshbasic_vert,fragmentShader:_t.meshbasic_frag},lambert:{uniforms:Ti([je.common,je.specularmap,je.envmap,je.aomap,je.lightmap,je.emissivemap,je.bumpmap,je.normalmap,je.displacementmap,je.fog,je.lights,{emissive:{value:new Ye(0)}}]),vertexShader:_t.meshlambert_vert,fragmentShader:_t.meshlambert_frag},phong:{uniforms:Ti([je.common,je.specularmap,je.envmap,je.aomap,je.lightmap,je.emissivemap,je.bumpmap,je.normalmap,je.displacementmap,je.fog,je.lights,{emissive:{value:new Ye(0)},specular:{value:new Ye(1118481)},shininess:{value:30}}]),vertexShader:_t.meshphong_vert,fragmentShader:_t.meshphong_frag},standard:{uniforms:Ti([je.common,je.envmap,je.aomap,je.lightmap,je.emissivemap,je.bumpmap,je.normalmap,je.displacementmap,je.roughnessmap,je.metalnessmap,je.fog,je.lights,{emissive:{value:new Ye(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:_t.meshphysical_vert,fragmentShader:_t.meshphysical_frag},toon:{uniforms:Ti([je.common,je.aomap,je.lightmap,je.emissivemap,je.bumpmap,je.normalmap,je.displacementmap,je.gradientmap,je.fog,je.lights,{emissive:{value:new Ye(0)}}]),vertexShader:_t.meshtoon_vert,fragmentShader:_t.meshtoon_frag},matcap:{uniforms:Ti([je.common,je.bumpmap,je.normalmap,je.displacementmap,je.fog,{matcap:{value:null}}]),vertexShader:_t.meshmatcap_vert,fragmentShader:_t.meshmatcap_frag},points:{uniforms:Ti([je.points,je.fog]),vertexShader:_t.points_vert,fragmentShader:_t.points_frag},dashed:{uniforms:Ti([je.common,je.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:_t.linedashed_vert,fragmentShader:_t.linedashed_frag},depth:{uniforms:Ti([je.common,je.displacementmap]),vertexShader:_t.depth_vert,fragmentShader:_t.depth_frag},normal:{uniforms:Ti([je.common,je.bumpmap,je.normalmap,je.displacementmap,{opacity:{value:1}}]),vertexShader:_t.meshnormal_vert,fragmentShader:_t.meshnormal_frag},sprite:{uniforms:Ti([je.sprite,je.fog]),vertexShader:_t.sprite_vert,fragmentShader:_t.sprite_frag},background:{uniforms:{uvTransform:{value:new Nt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:_t.background_vert,fragmentShader:_t.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Nt}},vertexShader:_t.backgroundCube_vert,fragmentShader:_t.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:_t.cube_vert,fragmentShader:_t.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:_t.equirect_vert,fragmentShader:_t.equirect_frag},distanceRGBA:{uniforms:Ti([je.common,je.displacementmap,{referencePosition:{value:new k},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:_t.distanceRGBA_vert,fragmentShader:_t.distanceRGBA_frag},shadow:{uniforms:Ti([je.lights,je.fog,{color:{value:new Ye(0)},opacity:{value:1}}]),vertexShader:_t.shadow_vert,fragmentShader:_t.shadow_frag}};dr.physical={uniforms:Ti([dr.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Nt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Nt},clearcoatNormalScale:{value:new Pe(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Nt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Nt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Nt},sheen:{value:0},sheenColor:{value:new Ye(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Nt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Nt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Nt},transmissionSamplerSize:{value:new Pe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Nt},attenuationDistance:{value:0},attenuationColor:{value:new Ye(0)},specularColor:{value:new Ye(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Nt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Nt},anisotropyVector:{value:new Pe},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Nt}}]),vertexShader:_t.meshphysical_vert,fragmentShader:_t.meshphysical_frag};const Kh={r:0,b:0,g:0},Ua=new Vi,fP=new ft;function pP(r,e,t,n,i,s,a){const o=new Ye(0);let l=s===!0?0:1,c,u,h=null,d=0,f=null;function p(x){let y=x.isScene===!0?x.background:null;return y&&y.isTexture&&(y=(x.backgroundBlurriness>0?t:e).get(y)),y}function v(x){let y=!1;const b=p(x);b===null?m(o,l):b&&b.isColor&&(m(b,1),y=!0);const M=r.xr.getEnvironmentBlendMode();M==="additive"?n.buffers.color.setClear(0,0,0,1,a):M==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(r.autoClear||y)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function g(x,y){const b=p(y);b&&(b.isCubeTexture||b.mapping===jl)?(u===void 0&&(u=new Mn(new Jl(1,1,1),new Pi({name:"BackgroundCubeMaterial",uniforms:Bl(dr.backgroundCube.uniforms),vertexShader:dr.backgroundCube.vertexShader,fragmentShader:dr.backgroundCube.fragmentShader,side:gi,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(M,w,C){this.matrixWorld.copyPosition(C.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(u)),Ua.copy(y.backgroundRotation),Ua.x*=-1,Ua.y*=-1,Ua.z*=-1,b.isCubeTexture&&b.isRenderTargetTexture===!1&&(Ua.y*=-1,Ua.z*=-1),u.material.uniforms.envMap.value=b,u.material.uniforms.flipEnvMap.value=b.isCubeTexture&&b.isRenderTargetTexture===!1?-1:1,u.material.uniforms.backgroundBlurriness.value=y.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,u.material.uniforms.backgroundRotation.value.setFromMatrix4(fP.makeRotationFromEuler(Ua)),u.material.toneMapped=Ut.getTransfer(b.colorSpace)!==sn,(h!==b||d!==b.version||f!==r.toneMapping)&&(u.material.needsUpdate=!0,h=b,d=b.version,f=r.toneMapping),u.layers.enableAll(),x.unshift(u,u.geometry,u.material,0,0,null)):b&&b.isTexture&&(c===void 0&&(c=new Mn(new Dp(2,2),new Pi({name:"BackgroundMaterial",uniforms:Bl(dr.background.uniforms),vertexShader:dr.background.vertexShader,fragmentShader:dr.background.fragmentShader,side:es,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=b,c.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,c.material.toneMapped=Ut.getTransfer(b.colorSpace)!==sn,b.matrixAutoUpdate===!0&&b.updateMatrix(),c.material.uniforms.uvTransform.value.copy(b.matrix),(h!==b||d!==b.version||f!==r.toneMapping)&&(c.material.needsUpdate=!0,h=b,d=b.version,f=r.toneMapping),c.layers.enableAll(),x.unshift(c,c.geometry,c.material,0,0,null))}function m(x,y){x.getRGB(Kh,fS(r)),n.buffers.color.setClear(Kh.r,Kh.g,Kh.b,y,a)}function _(){u!==void 0&&(u.geometry.dispose(),u.material.dispose(),u=void 0),c!==void 0&&(c.geometry.dispose(),c.material.dispose(),c=void 0)}return{getClearColor:function(){return o},setClearColor:function(x,y=1){o.set(x),l=y,m(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(x){l=x,m(o,l)},render:v,addToRenderList:g,dispose:_}}function mP(r,e){const t=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},i=d(null);let s=i,a=!1;function o(S,R,H,D,O){let G=!1;const P=h(D,H,R);s!==P&&(s=P,c(s.object)),G=f(S,D,H,O),G&&p(S,D,H,O),O!==null&&e.update(O,r.ELEMENT_ARRAY_BUFFER),(G||a)&&(a=!1,y(S,R,H,D),O!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e.get(O).buffer))}function l(){return r.createVertexArray()}function c(S){return r.bindVertexArray(S)}function u(S){return r.deleteVertexArray(S)}function h(S,R,H){const D=H.wireframe===!0;let O=n[S.id];O===void 0&&(O={},n[S.id]=O);let G=O[R.id];G===void 0&&(G={},O[R.id]=G);let P=G[D];return P===void 0&&(P=d(l()),G[D]=P),P}function d(S){const R=[],H=[],D=[];for(let O=0;O<t;O++)R[O]=0,H[O]=0,D[O]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:R,enabledAttributes:H,attributeDivisors:D,object:S,attributes:{},index:null}}function f(S,R,H,D){const O=s.attributes,G=R.attributes;let P=0;const z=H.getAttributes();for(const W in z)if(z[W].location>=0){const re=O[W];let ne=G[W];if(ne===void 0&&(W==="instanceMatrix"&&S.instanceMatrix&&(ne=S.instanceMatrix),W==="instanceColor"&&S.instanceColor&&(ne=S.instanceColor)),re===void 0||re.attribute!==ne||ne&&re.data!==ne.data)return!0;P++}return s.attributesNum!==P||s.index!==D}function p(S,R,H,D){const O={},G=R.attributes;let P=0;const z=H.getAttributes();for(const W in z)if(z[W].location>=0){let re=G[W];re===void 0&&(W==="instanceMatrix"&&S.instanceMatrix&&(re=S.instanceMatrix),W==="instanceColor"&&S.instanceColor&&(re=S.instanceColor));const ne={};ne.attribute=re,re&&re.data&&(ne.data=re.data),O[W]=ne,P++}s.attributes=O,s.attributesNum=P,s.index=D}function v(){const S=s.newAttributes;for(let R=0,H=S.length;R<H;R++)S[R]=0}function g(S){m(S,0)}function m(S,R){const H=s.newAttributes,D=s.enabledAttributes,O=s.attributeDivisors;H[S]=1,D[S]===0&&(r.enableVertexAttribArray(S),D[S]=1),O[S]!==R&&(r.vertexAttribDivisor(S,R),O[S]=R)}function _(){const S=s.newAttributes,R=s.enabledAttributes;for(let H=0,D=R.length;H<D;H++)R[H]!==S[H]&&(r.disableVertexAttribArray(H),R[H]=0)}function x(S,R,H,D,O,G,P){P===!0?r.vertexAttribIPointer(S,R,H,O,G):r.vertexAttribPointer(S,R,H,D,O,G)}function y(S,R,H,D){v();const O=D.attributes,G=H.getAttributes(),P=R.defaultAttributeValues;for(const z in G){const W=G[z];if(W.location>=0){let X=O[z];if(X===void 0&&(z==="instanceMatrix"&&S.instanceMatrix&&(X=S.instanceMatrix),z==="instanceColor"&&S.instanceColor&&(X=S.instanceColor)),X!==void 0){const re=X.normalized,ne=X.itemSize,be=e.get(X);if(be===void 0)continue;const _e=be.buffer,$=be.type,K=be.bytesPerElement,ge=$===r.INT||$===r.UNSIGNED_INT||X.gpuType===op;if(X.isInterleavedBufferAttribute){const J=X.data,ue=J.stride,Ce=X.offset;if(J.isInstancedInterleavedBuffer){for(let Ee=0;Ee<W.locationSize;Ee++)m(W.location+Ee,J.meshPerAttribute);S.isInstancedMesh!==!0&&D._maxInstanceCount===void 0&&(D._maxInstanceCount=J.meshPerAttribute*J.count)}else for(let Ee=0;Ee<W.locationSize;Ee++)g(W.location+Ee);r.bindBuffer(r.ARRAY_BUFFER,_e);for(let Ee=0;Ee<W.locationSize;Ee++)x(W.location+Ee,ne/W.locationSize,$,re,ue*K,(Ce+ne/W.locationSize*Ee)*K,ge)}else{if(X.isInstancedBufferAttribute){for(let J=0;J<W.locationSize;J++)m(W.location+J,X.meshPerAttribute);S.isInstancedMesh!==!0&&D._maxInstanceCount===void 0&&(D._maxInstanceCount=X.meshPerAttribute*X.count)}else for(let J=0;J<W.locationSize;J++)g(W.location+J);r.bindBuffer(r.ARRAY_BUFFER,_e);for(let J=0;J<W.locationSize;J++)x(W.location+J,ne/W.locationSize,$,re,ne*K,ne/W.locationSize*J*K,ge)}}else if(P!==void 0){const re=P[z];if(re!==void 0)switch(re.length){case 2:r.vertexAttrib2fv(W.location,re);break;case 3:r.vertexAttrib3fv(W.location,re);break;case 4:r.vertexAttrib4fv(W.location,re);break;default:r.vertexAttrib1fv(W.location,re)}}}}_()}function b(){C();for(const S in n){const R=n[S];for(const H in R){const D=R[H];for(const O in D)u(D[O].object),delete D[O];delete R[H]}delete n[S]}}function M(S){if(n[S.id]===void 0)return;const R=n[S.id];for(const H in R){const D=R[H];for(const O in D)u(D[O].object),delete D[O];delete R[H]}delete n[S.id]}function w(S){for(const R in n){const H=n[R];if(H[S.id]===void 0)continue;const D=H[S.id];for(const O in D)u(D[O].object),delete D[O];delete H[S.id]}}function C(){T(),a=!0,s!==i&&(s=i,c(s.object))}function T(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:o,reset:C,resetDefaultState:T,dispose:b,releaseStatesOfGeometry:M,releaseStatesOfProgram:w,initAttributes:v,enableAttribute:g,disableUnusedAttributes:_}}function gP(r,e,t){let n;function i(c){n=c}function s(c,u){r.drawArrays(n,c,u),t.update(u,n,1)}function a(c,u,h){h!==0&&(r.drawArraysInstanced(n,c,u,h),t.update(u,n,h))}function o(c,u,h){if(h===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,u,0,h);let f=0;for(let p=0;p<h;p++)f+=u[p];t.update(f,n,1)}function l(c,u,h,d){if(h===0)return;const f=e.get("WEBGL_multi_draw");if(f===null)for(let p=0;p<c.length;p++)a(c[p],u[p],d[p]);else{f.multiDrawArraysInstancedWEBGL(n,c,0,u,0,d,0,h);let p=0;for(let v=0;v<h;v++)p+=u[v]*d[v];t.update(p,n,1)}}this.setMode=i,this.render=s,this.renderInstances=a,this.renderMultiDraw=o,this.renderMultiDrawInstances=l}function vP(r,e,t,n){let i;function s(){if(i!==void 0)return i;if(e.has("EXT_texture_filter_anisotropic")===!0){const w=e.get("EXT_texture_filter_anisotropic");i=r.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function a(w){return!(w!==Ri&&n.convert(w)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function o(w){const C=w===_o&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(w!==Ur&&n.convert(w)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&w!==zi&&!C)}function l(w){if(w==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=t.precision!==void 0?t.precision:"highp";const u=l(c);u!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",u,"instead."),c=u);const h=t.logarithmicDepthBuffer===!0,d=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),f=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),p=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),v=r.getParameter(r.MAX_TEXTURE_SIZE),g=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),m=r.getParameter(r.MAX_VERTEX_ATTRIBS),_=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),x=r.getParameter(r.MAX_VARYING_VECTORS),y=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),b=p>0,M=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:c,logarithmicDepthBuffer:h,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:p,maxTextureSize:v,maxCubemapSize:g,maxAttributes:m,maxVertexUniforms:_,maxVaryings:x,maxFragmentUniforms:y,vertexTextures:b,maxSamples:M}}function _P(r){const e=this;let t=null,n=0,i=!1,s=!1;const a=new Qs,o=new Nt,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(h,d){const f=h.length!==0||d||n!==0||i;return i=d,n=h.length,f},this.beginShadows=function(){s=!0,u(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(h,d){t=u(h,d,0)},this.setState=function(h,d,f){const p=h.clippingPlanes,v=h.clipIntersection,g=h.clipShadows,m=r.get(h);if(!i||p===null||p.length===0||s&&!g)s?u(null):c();else{const _=s?0:n,x=_*4;let y=m.clippingState||null;l.value=y,y=u(p,d,x,f);for(let b=0;b!==x;++b)y[b]=t[b];m.clippingState=y,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=_}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(h,d,f,p){const v=h!==null?h.length:0;let g=null;if(v!==0){if(g=l.value,p!==!0||g===null){const m=f+v*4,_=d.matrixWorldInverse;o.getNormalMatrix(_),(g===null||g.length<m)&&(g=new Float32Array(m));for(let x=0,y=f;x!==v;++x,y+=4)a.copy(h[x]).applyMatrix4(_,o),a.normal.toArray(g,y),g[y+3]=a.constant}l.value=g,l.needsUpdate=!0}return e.numPlanes=v,e.numIntersection=0,g}}function yP(r){let e=new WeakMap;function t(a,o){return o===du?a.mapping=Ps:o===fu&&(a.mapping=da),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===du||o===fu)if(e.has(a)){const l=e.get(a).texture;return t(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const c=new Jv(l.height);return c.fromEquirectangularTexture(r,a),e.set(a,c),a.addEventListener("dispose",i),t(c.texture,a.mapping)}else return null}}return a}function i(a){const o=a.target;o.removeEventListener("dispose",i);const l=e.get(o);l!==void 0&&(e.delete(o),l.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}const vl=4,Ry=[.125,.215,.35,.446,.526,.582],qa=20,$m=new ec,Ly=new Ye;let Xm=null,qm=0,Zm=0,Ym=!1;const $a=(1+Math.sqrt(5))/2,Wo=1/$a,Py=[new k(-$a,Wo,0),new k($a,Wo,0),new k(-Wo,0,$a),new k(Wo,0,$a),new k(0,$a,-Wo),new k(0,$a,Wo),new k(-1,1,-1),new k(1,1,-1),new k(-1,1,1),new k(1,1,1)],xP=new k;class ov{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100,s={}){const{size:a=256,position:o=xP}=s;Xm=this._renderer.getRenderTarget(),qm=this._renderer.getActiveCubeFace(),Zm=this._renderer.getActiveMipmapLevel(),Ym=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const l=this._allocateTargets();return l.depthBuffer=!0,this._sceneToCubeUV(e,n,i,l,o),t>0&&this._blur(l,0,0,t),this._applyPMREM(l),this._cleanup(l),l}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Ny(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Dy(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Xm,qm,Zm),this._renderer.xr.enabled=Ym,e.scissorTest=!1,Qh(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Ps||e.mapping===da?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Xm=this._renderer.getRenderTarget(),qm=this._renderer.getActiveCubeFace(),Zm=this._renderer.getActiveMipmapLevel(),Ym=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:xn,minFilter:xn,generateMipmaps:!1,type:_o,format:Ri,colorSpace:ai,depthBuffer:!1},i=Iy(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Iy(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=MP(s)),this._blurMaterial=bP(s,e,t)}return i}_compileMaterial(e){const t=new Mn(this._lodPlanes[0],e);this._renderer.compile(t,$m)}_sceneToCubeUV(e,t,n,i,s){const l=new Hn(90,1,t,n),c=[1,-1,1,1,1,1],u=[1,1,1,-1,-1,-1],h=this._renderer,d=h.autoClear,f=h.toneMapping;h.getClearColor(Ly),h.toneMapping=Rs,h.autoClear=!1;const p=new ir({name:"PMREM.Background",side:gi,depthWrite:!1,depthTest:!1}),v=new Mn(new Jl,p);let g=!1;const m=e.background;m?m.isColor&&(p.color.copy(m),e.background=null,g=!0):(p.color.copy(Ly),g=!0);for(let _=0;_<6;_++){const x=_%3;x===0?(l.up.set(0,c[_],0),l.position.set(s.x,s.y,s.z),l.lookAt(s.x+u[_],s.y,s.z)):x===1?(l.up.set(0,0,c[_]),l.position.set(s.x,s.y,s.z),l.lookAt(s.x,s.y+u[_],s.z)):(l.up.set(0,c[_],0),l.position.set(s.x,s.y,s.z),l.lookAt(s.x,s.y,s.z+u[_]));const y=this._cubeSize;Qh(i,x*y,_>2?y:0,y,y),h.setRenderTarget(i),g&&h.render(v,l),h.render(e,l)}v.geometry.dispose(),v.material.dispose(),h.toneMapping=f,h.autoClear=d,e.background=m}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===Ps||e.mapping===da;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=Ny()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Dy());const s=i?this._cubemapMaterial:this._equirectMaterial,a=new Mn(this._lodPlanes[0],s),o=s.uniforms;o.envMap.value=e;const l=this._cubeSize;Qh(t,0,0,3*l,2*l),n.setRenderTarget(t),n.render(a,$m)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const a=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),o=Py[(i-s-1)%Py.length];this._blur(e,s-1,s,a,o)}t.autoClear=n}_blur(e,t,n,i,s){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",s),this._halfBlur(a,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,a,o){const l=this._renderer,c=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,h=new Mn(this._lodPlanes[i],c),d=c.uniforms,f=this._sizeLods[n]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*qa-1),v=s/p,g=isFinite(s)?1+Math.floor(u*v):qa;g>qa&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${qa}`);const m=[];let _=0;for(let w=0;w<qa;++w){const C=w/v,T=Math.exp(-C*C/2);m.push(T),w===0?_+=T:w<g&&(_+=2*T)}for(let w=0;w<m.length;w++)m[w]=m[w]/_;d.envMap.value=e.texture,d.samples.value=g,d.weights.value=m,d.latitudinal.value=a==="latitudinal",o&&(d.poleAxis.value=o);const{_lodMax:x}=this;d.dTheta.value=p,d.mipInt.value=x-n;const y=this._sizeLods[i],b=3*y*(i>x-vl?i-x+vl:0),M=4*(this._cubeSize-y);Qh(t,b,M,3*y,2*y),l.setRenderTarget(t),l.render(h,$m)}}function MP(r){const e=[],t=[],n=[];let i=r;const s=r-vl+1+Ry.length;for(let a=0;a<s;a++){const o=Math.pow(2,i);t.push(o);let l=1/o;a>r-vl?l=Ry[a-r+vl-1]:a===0&&(l=0),n.push(l);const c=1/(o-2),u=-c,h=1+c,d=[u,u,h,u,h,h,u,u,h,h,u,h],f=6,p=6,v=3,g=2,m=1,_=new Float32Array(v*p*f),x=new Float32Array(g*p*f),y=new Float32Array(m*p*f);for(let M=0;M<f;M++){const w=M%3*2/3-1,C=M>2?0:-1,T=[w,C,0,w+2/3,C,0,w+2/3,C+1,0,w,C,0,w+2/3,C+1,0,w,C+1,0];_.set(T,v*p*M),x.set(d,g*p*M);const S=[M,M,M,M,M,M];y.set(S,m*p*M)}const b=new Lt;b.setAttribute("position",new qt(_,v)),b.setAttribute("uv",new qt(x,g)),b.setAttribute("faceIndex",new qt(y,m)),e.push(b),i>vl&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function Iy(r,e,t){const n=new ts(r,e,t);return n.texture.mapping=jl,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Qh(r,e,t,n,i){r.viewport.set(e,t,n,i),r.scissor.set(e,t,n,i)}function bP(r,e,t){const n=new Float32Array(qa),i=new k(0,1,0);return new Pi({name:"SphericalGaussianBlur",defines:{n:qa,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:R_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:jr,depthTest:!1,depthWrite:!1})}function Dy(){return new Pi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:R_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:jr,depthTest:!1,depthWrite:!1})}function Ny(){return new Pi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:R_(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:jr,depthTest:!1,depthWrite:!1})}function R_(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function SP(r){let e=new WeakMap,t=null;function n(o){if(o&&o.isTexture){const l=o.mapping,c=l===du||l===fu,u=l===Ps||l===da;if(c||u){let h=e.get(o);const d=h!==void 0?h.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==d)return t===null&&(t=new ov(r)),h=c?t.fromEquirectangular(o,h):t.fromCubemap(o,h),h.texture.pmremVersion=o.pmremVersion,e.set(o,h),h.texture;if(h!==void 0)return h.texture;{const f=o.image;return c&&f&&f.height>0||u&&f&&i(f)?(t===null&&(t=new ov(r)),h=c?t.fromEquirectangular(o):t.fromCubemap(o),h.texture.pmremVersion=o.pmremVersion,e.set(o,h),o.addEventListener("dispose",s),h.texture):null}}}return o}function i(o){let l=0;const c=6;for(let u=0;u<c;u++)o[u]!==void 0&&l++;return l===c}function s(o){const l=o.target;l.removeEventListener("dispose",s);const c=e.get(l);c!==void 0&&(e.delete(l),c.dispose())}function a(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:a}}function wP(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const i=t(n);return i===null&&Od("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function TP(r,e,t,n){const i={},s=new WeakMap;function a(h){const d=h.target;d.index!==null&&e.remove(d.index);for(const p in d.attributes)e.remove(d.attributes[p]);d.removeEventListener("dispose",a),delete i[d.id];const f=s.get(d);f&&(e.remove(f),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function o(h,d){return i[d.id]===!0||(d.addEventListener("dispose",a),i[d.id]=!0,t.memory.geometries++),d}function l(h){const d=h.attributes;for(const f in d)e.update(d[f],r.ARRAY_BUFFER)}function c(h){const d=[],f=h.index,p=h.attributes.position;let v=0;if(f!==null){const _=f.array;v=f.version;for(let x=0,y=_.length;x<y;x+=3){const b=_[x+0],M=_[x+1],w=_[x+2];d.push(b,M,M,w,w,b)}}else if(p!==void 0){const _=p.array;v=p.version;for(let x=0,y=_.length/3-1;x<y;x+=3){const b=x+0,M=x+1,w=x+2;d.push(b,M,M,w,w,b)}}else return;const g=new(rS(d)?Yv:Zv)(d,1);g.version=v;const m=s.get(h);m&&e.remove(m),s.set(h,g)}function u(h){const d=s.get(h);if(d){const f=h.index;f!==null&&d.version<f.version&&c(h)}else c(h);return s.get(h)}return{get:o,update:l,getWireframeAttribute:u}}function EP(r,e,t){let n;function i(d){n=d}let s,a;function o(d){s=d.type,a=d.bytesPerElement}function l(d,f){r.drawElements(n,f,s,d*a),t.update(f,n,1)}function c(d,f,p){p!==0&&(r.drawElementsInstanced(n,f,s,d*a,p),t.update(f,n,p))}function u(d,f,p){if(p===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,f,0,s,d,0,p);let g=0;for(let m=0;m<p;m++)g+=f[m];t.update(g,n,1)}function h(d,f,p,v){if(p===0)return;const g=e.get("WEBGL_multi_draw");if(g===null)for(let m=0;m<d.length;m++)c(d[m]/a,f[m],v[m]);else{g.multiDrawElementsInstancedWEBGL(n,f,0,s,d,0,v,0,p);let m=0;for(let _=0;_<p;_++)m+=f[_]*v[_];t.update(m,n,1)}}this.setMode=i,this.setIndex=o,this.render=l,this.renderInstances=c,this.renderMultiDraw=u,this.renderMultiDrawInstances=h}function AP(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,a,o){switch(t.calls++,a){case r.TRIANGLES:t.triangles+=o*(s/3);break;case r.LINES:t.lines+=o*(s/2);break;case r.LINE_STRIP:t.lines+=o*(s-1);break;case r.LINE_LOOP:t.lines+=o*s;break;case r.POINTS:t.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function i(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function CP(r,e,t){const n=new WeakMap,i=new Ht;function s(a,o,l){const c=a.morphTargetInfluences,u=o.morphAttributes.position||o.morphAttributes.normal||o.morphAttributes.color,h=u!==void 0?u.length:0;let d=n.get(o);if(d===void 0||d.count!==h){let T=function(){w.dispose(),n.delete(o),o.removeEventListener("dispose",T)};d!==void 0&&d.texture.dispose();const f=o.morphAttributes.position!==void 0,p=o.morphAttributes.normal!==void 0,v=o.morphAttributes.color!==void 0,g=o.morphAttributes.position||[],m=o.morphAttributes.normal||[],_=o.morphAttributes.color||[];let x=0;f===!0&&(x=1),p===!0&&(x=2),v===!0&&(x=3);let y=o.attributes.position.count*x,b=1;y>e.maxTextureSize&&(b=Math.ceil(y/e.maxTextureSize),y=e.maxTextureSize);const M=new Float32Array(y*b*4*h),w=new Yu(M,y,b,h);w.type=zi,w.needsUpdate=!0;const C=x*4;for(let S=0;S<h;S++){const R=g[S],H=m[S],D=_[S],O=y*b*4*S;for(let G=0;G<R.count;G++){const P=G*C;f===!0&&(i.fromBufferAttribute(R,G),M[O+P+0]=i.x,M[O+P+1]=i.y,M[O+P+2]=i.z,M[O+P+3]=0),p===!0&&(i.fromBufferAttribute(H,G),M[O+P+4]=i.x,M[O+P+5]=i.y,M[O+P+6]=i.z,M[O+P+7]=0),v===!0&&(i.fromBufferAttribute(D,G),M[O+P+8]=i.x,M[O+P+9]=i.y,M[O+P+10]=i.z,M[O+P+11]=D.itemSize===4?i.w:1)}}d={count:h,texture:w,size:new Pe(y,b)},n.set(o,d),o.addEventListener("dispose",T)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)l.getUniforms().setValue(r,"morphTexture",a.morphTexture,t);else{let f=0;for(let v=0;v<c.length;v++)f+=c[v];const p=o.morphTargetsRelative?1:1-f;l.getUniforms().setValue(r,"morphTargetBaseInfluence",p),l.getUniforms().setValue(r,"morphTargetInfluences",c)}l.getUniforms().setValue(r,"morphTargetsTexture",d.texture,t),l.getUniforms().setValue(r,"morphTargetsTextureSize",d.size)}return{update:s}}function RP(r,e,t,n){let i=new WeakMap;function s(l){const c=n.render.frame,u=l.geometry,h=e.get(l,u);if(i.get(h)!==c&&(e.update(h),i.set(h,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),i.get(l)!==c&&(t.update(l.instanceMatrix,r.ARRAY_BUFFER),l.instanceColor!==null&&t.update(l.instanceColor,r.ARRAY_BUFFER),i.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;i.get(d)!==c&&(d.update(),i.set(d,c))}return h}function a(){i=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:s,dispose:a}}const f1=new Vn,Fy=new Ep(1,1),p1=new Yu,m1=new mp,g1=new ju,Oy=[],Uy=[],By=new Float32Array(16),zy=new Float32Array(9),ky=new Float32Array(4);function tc(r,e,t){const n=r[0];if(n<=0||n>0)return r;const i=e*t;let s=Oy[i];if(s===void 0&&(s=new Float32Array(i),Oy[i]=s),e!==0){n.toArray(s,0);for(let a=1,o=0;a!==e;++a)o+=t,r[a].toArray(s,o)}return s}function Xn(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function qn(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function kp(r,e){let t=Uy[e];t===void 0&&(t=new Int32Array(e),Uy[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function LP(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function PP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2fv(this.addr,e),qn(t,e)}}function IP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Xn(t,e))return;r.uniform3fv(this.addr,e),qn(t,e)}}function DP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4fv(this.addr,e),qn(t,e)}}function NP(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;ky.set(n),r.uniformMatrix2fv(this.addr,!1,ky),qn(t,n)}}function FP(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;zy.set(n),r.uniformMatrix3fv(this.addr,!1,zy),qn(t,n)}}function OP(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Xn(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),qn(t,e)}else{if(Xn(t,n))return;By.set(n),r.uniformMatrix4fv(this.addr,!1,By),qn(t,n)}}function UP(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function BP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2iv(this.addr,e),qn(t,e)}}function zP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Xn(t,e))return;r.uniform3iv(this.addr,e),qn(t,e)}}function kP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4iv(this.addr,e),qn(t,e)}}function VP(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function HP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Xn(t,e))return;r.uniform2uiv(this.addr,e),qn(t,e)}}function GP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Xn(t,e))return;r.uniform3uiv(this.addr,e),qn(t,e)}}function WP(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Xn(t,e))return;r.uniform4uiv(this.addr,e),qn(t,e)}}function $P(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i);let s;this.type===r.SAMPLER_2D_SHADOW?(Fy.compareFunction=Xv,s=Fy):s=f1,t.setTexture2D(e||s,i)}function XP(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||m1,i)}function qP(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||g1,i)}function ZP(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||p1,i)}function YP(r){switch(r){case 5126:return LP;case 35664:return PP;case 35665:return IP;case 35666:return DP;case 35674:return NP;case 35675:return FP;case 35676:return OP;case 5124:case 35670:return UP;case 35667:case 35671:return BP;case 35668:case 35672:return zP;case 35669:case 35673:return kP;case 5125:return VP;case 36294:return HP;case 36295:return GP;case 36296:return WP;case 35678:case 36198:case 36298:case 36306:case 35682:return $P;case 35679:case 36299:case 36307:return XP;case 35680:case 36300:case 36308:case 36293:return qP;case 36289:case 36303:case 36311:case 36292:return ZP}}function jP(r,e){r.uniform1fv(this.addr,e)}function JP(r,e){const t=tc(e,this.size,2);r.uniform2fv(this.addr,t)}function KP(r,e){const t=tc(e,this.size,3);r.uniform3fv(this.addr,t)}function QP(r,e){const t=tc(e,this.size,4);r.uniform4fv(this.addr,t)}function eI(r,e){const t=tc(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function tI(r,e){const t=tc(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function nI(r,e){const t=tc(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function iI(r,e){r.uniform1iv(this.addr,e)}function rI(r,e){r.uniform2iv(this.addr,e)}function sI(r,e){r.uniform3iv(this.addr,e)}function aI(r,e){r.uniform4iv(this.addr,e)}function oI(r,e){r.uniform1uiv(this.addr,e)}function lI(r,e){r.uniform2uiv(this.addr,e)}function cI(r,e){r.uniform3uiv(this.addr,e)}function uI(r,e){r.uniform4uiv(this.addr,e)}function hI(r,e,t){const n=this.cache,i=e.length,s=kp(t,i);Xn(n,s)||(r.uniform1iv(this.addr,s),qn(n,s));for(let a=0;a!==i;++a)t.setTexture2D(e[a]||f1,s[a])}function dI(r,e,t){const n=this.cache,i=e.length,s=kp(t,i);Xn(n,s)||(r.uniform1iv(this.addr,s),qn(n,s));for(let a=0;a!==i;++a)t.setTexture3D(e[a]||m1,s[a])}function fI(r,e,t){const n=this.cache,i=e.length,s=kp(t,i);Xn(n,s)||(r.uniform1iv(this.addr,s),qn(n,s));for(let a=0;a!==i;++a)t.setTextureCube(e[a]||g1,s[a])}function pI(r,e,t){const n=this.cache,i=e.length,s=kp(t,i);Xn(n,s)||(r.uniform1iv(this.addr,s),qn(n,s));for(let a=0;a!==i;++a)t.setTexture2DArray(e[a]||p1,s[a])}function mI(r){switch(r){case 5126:return jP;case 35664:return JP;case 35665:return KP;case 35666:return QP;case 35674:return eI;case 35675:return tI;case 35676:return nI;case 5124:case 35670:return iI;case 35667:case 35671:return rI;case 35668:case 35672:return sI;case 35669:case 35673:return aI;case 5125:return oI;case 36294:return lI;case 36295:return cI;case 36296:return uI;case 35678:case 36198:case 36298:case 36306:case 35682:return hI;case 35679:case 36299:case 36307:return dI;case 35680:case 36300:case 36308:case 36293:return fI;case 36289:case 36303:case 36311:case 36292:return pI}}let gI=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=YP(t.type)}},vI=class{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=mI(t.type)}},_I=class{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let s=0,a=i.length;s!==a;++s){const o=i[s];o.setValue(e,t[o.id],n)}}};const jm=/(\w+)(\])?(\[|\.)?/g;function Vy(r,e){r.seq.push(e),r.map[e.id]=e}function yI(r,e,t){const n=r.name,i=n.length;for(jm.lastIndex=0;;){const s=jm.exec(n),a=jm.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&a+2===i){Vy(t,c===void 0?new gI(o,r,e):new vI(o,r,e));break}else{let h=t.map[o];h===void 0&&(h=new _I(o),Vy(t,h)),t=h}}}let kd=class{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const s=e.getActiveUniform(t,i),a=e.getUniformLocation(t,s.name);yI(s,a,this)}}setValue(e,t,n,i){const s=this.map[t];s!==void 0&&s.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let s=0,a=t.length;s!==a;++s){const o=t[s],l=n[o.id];l.needsUpdate!==!1&&o.setValue(e,l.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,s=e.length;i!==s;++i){const a=e[i];a.id in t&&n.push(a)}return n}};function Hy(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}const xI=37297;let MI=0;function bI(r,e){const t=r.split(`
`),n=[],i=Math.max(e-6,0),s=Math.min(e+6,t.length);for(let a=i;a<s;a++){const o=a+1;n.push(`${o===e?">":" "} ${o}: ${t[a]}`)}return n.join(`
`)}const Gy=new Nt;function SI(r){Ut._getMatrix(Gy,Ut.workingColorSpace,r);const e=`mat3( ${Gy.elements.map(t=>t.toFixed(4))} )`;switch(Ut.getTransfer(r)){case mu:return[e,"LinearTransferOETF"];case sn:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[e,"LinearTransferOETF"]}}function Wy(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),i=r.getShaderInfoLog(e).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const a=parseInt(s[1]);return t.toUpperCase()+`

`+i+`

`+bI(r.getShaderSource(e),a)}else return i}function wI(r,e){const t=SI(e);return[`vec4 ${r}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function TI(r,e){let t;switch(e){case Fb:t="Linear";break;case Ob:t="Reinhard";break;case Ub:t="Cineon";break;case Bb:t="ACESFilmic";break;case nf:t="AgX";break;case kb:t="Neutral";break;case zb:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const ed=new k;function EI(){Ut.getLuminanceCoefficients(ed);const r=ed.x.toFixed(4),e=ed.y.toFixed(4),t=ed.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function AI(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(zc).join(`
`)}function CI(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function RI(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=r.getActiveAttrib(e,i),a=s.name;let o=1;s.type===r.FLOAT_MAT2&&(o=2),s.type===r.FLOAT_MAT3&&(o=3),s.type===r.FLOAT_MAT4&&(o=4),t[a]={type:s.type,location:r.getAttribLocation(e,a),locationSize:o}}return t}function zc(r){return r!==""}function $y(r,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Xy(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const LI=/^[ \t]*#include +<([\w\d./]+)>/gm;function lv(r){return r.replace(LI,II)}const PI=new Map;function II(r,e){let t=_t[e];if(t===void 0){const n=PI.get(e);if(n!==void 0)t=_t[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return lv(t)}const DI=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function qy(r){return r.replace(DI,NI)}function NI(r,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function Zy(r){let e=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function FI(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===Ov?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===qc?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Xr&&(e="SHADOWMAP_TYPE_VSM"),e}function OI(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case Ps:case da:e="ENVMAP_TYPE_CUBE";break;case jl:e="ENVMAP_TYPE_CUBE_UV";break}return e}function UI(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case da:e="ENVMAP_MODE_REFRACTION";break}return e}function BI(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case qu:e="ENVMAP_BLENDING_MULTIPLY";break;case Db:e="ENVMAP_BLENDING_MIX";break;case Nb:e="ENVMAP_BLENDING_ADD";break}return e}function zI(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function kI(r,e,t,n){const i=r.getContext(),s=t.defines;let a=t.vertexShader,o=t.fragmentShader;const l=FI(t),c=OI(t),u=UI(t),h=BI(t),d=zI(t),f=AI(t),p=CI(s),v=i.createProgram();let g,m,_=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(g=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p].filter(zc).join(`
`),g.length>0&&(g+=`
`),m=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p].filter(zc).join(`
`),m.length>0&&(m+=`
`)):(g=[Zy(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(zc).join(`
`),m=[Zy(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,p,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",t.envMap?"#define "+h:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Rs?"#define TONE_MAPPING":"",t.toneMapping!==Rs?_t.tonemapping_pars_fragment:"",t.toneMapping!==Rs?TI("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",_t.colorspace_pars_fragment,wI("linearToOutputTexel",t.outputColorSpace),EI(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(zc).join(`
`)),a=lv(a),a=$y(a,t),a=Xy(a,t),o=lv(o),o=$y(o,t),o=Xy(o,t),a=qy(a),o=qy(o),t.isRawShaderMaterial!==!0&&(_=`#version 300 es
`,g=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+g,m=["#define varying in",t.glslVersion===Qg?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Qg?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const x=_+g+a,y=_+m+o,b=Hy(i,i.VERTEX_SHADER,x),M=Hy(i,i.FRAGMENT_SHADER,y);i.attachShader(v,b),i.attachShader(v,M),t.index0AttributeName!==void 0?i.bindAttribLocation(v,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(v,0,"position"),i.linkProgram(v);function w(R){if(r.debug.checkShaderErrors){const H=i.getProgramInfoLog(v).trim(),D=i.getShaderInfoLog(b).trim(),O=i.getShaderInfoLog(M).trim();let G=!0,P=!0;if(i.getProgramParameter(v,i.LINK_STATUS)===!1)if(G=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(i,v,b,M);else{const z=Wy(i,b,"vertex"),W=Wy(i,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(v,i.VALIDATE_STATUS)+`

Material Name: `+R.name+`
Material Type: `+R.type+`

Program Info Log: `+H+`
`+z+`
`+W)}else H!==""?console.warn("THREE.WebGLProgram: Program Info Log:",H):(D===""||O==="")&&(P=!1);P&&(R.diagnostics={runnable:G,programLog:H,vertexShader:{log:D,prefix:g},fragmentShader:{log:O,prefix:m}})}i.deleteShader(b),i.deleteShader(M),C=new kd(i,v),T=RI(i,v)}let C;this.getUniforms=function(){return C===void 0&&w(this),C};let T;this.getAttributes=function(){return T===void 0&&w(this),T};let S=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return S===!1&&(S=i.getProgramParameter(v,xI)),S},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(v),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=MI++,this.cacheKey=e,this.usedTimes=1,this.program=v,this.vertexShader=b,this.fragmentShader=M,this}let VI=0;class HI{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),s=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return a.has(i)===!1&&(a.add(i),i.usedTimes++),a.has(s)===!1&&(a.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new GI(e),t.set(e,n)),n}}class GI{constructor(e){this.id=VI++,this.code=e,this.usedTimes=0}}function WI(r,e,t,n,i,s,a){const o=new gp,l=new HI,c=new Set,u=[],h=i.logarithmicDepthBuffer,d=i.vertexTextures;let f=i.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function v(T){return c.add(T),T===0?"uv":`uv${T}`}function g(T,S,R,H,D){const O=H.fog,G=D.geometry,P=T.isMeshStandardMaterial?H.environment:null,z=(T.isMeshStandardMaterial?t:e).get(T.envMap||P),W=z&&z.mapping===jl?z.image.height:null,X=p[T.type];T.precision!==null&&(f=i.getMaxPrecision(T.precision),f!==T.precision&&console.warn("THREE.WebGLProgram.getParameters:",T.precision,"not supported, using",f,"instead."));const re=G.morphAttributes.position||G.morphAttributes.normal||G.morphAttributes.color,ne=re!==void 0?re.length:0;let be=0;G.morphAttributes.position!==void 0&&(be=1),G.morphAttributes.normal!==void 0&&(be=2),G.morphAttributes.color!==void 0&&(be=3);let _e,$,K,ge;if(X){const et=dr[X];_e=et.vertexShader,$=et.fragmentShader}else _e=T.vertexShader,$=T.fragmentShader,l.update(T),K=l.getVertexShaderID(T),ge=l.getFragmentShaderID(T);const J=r.getRenderTarget(),ue=r.state.buffers.depth.getReversed(),Ce=D.isInstancedMesh===!0,Ee=D.isBatchedMesh===!0,Ue=!!T.map,xe=!!T.matcap,ye=!!z,N=!!T.aoMap,pe=!!T.lightMap,ie=!!T.bumpMap,F=!!T.normalMap,I=!!T.displacementMap,oe=!!T.emissiveMap,j=!!T.metalnessMap,L=!!T.roughnessMap,A=T.anisotropy>0,Z=T.clearcoat>0,ee=T.dispersion>0,V=T.iridescence>0,Y=T.sheen>0,se=T.transmission>0,le=A&&!!T.anisotropyMap,ce=Z&&!!T.clearcoatMap,Ie=Z&&!!T.clearcoatNormalMap,Se=Z&&!!T.clearcoatRoughnessMap,De=V&&!!T.iridescenceMap,nt=V&&!!T.iridescenceThicknessMap,Je=Y&&!!T.sheenColorMap,ke=Y&&!!T.sheenRoughnessMap,ot=!!T.specularMap,pt=!!T.specularColorMap,Pt=!!T.specularIntensityMap,Q=se&&!!T.transmissionMap,ze=se&&!!T.thicknessMap,Me=!!T.gradientMap,Te=!!T.alphaMap,We=T.alphaTest>0,$e=!!T.alphaHash,ht=!!T.extensions;let Gt=Rs;T.toneMapped&&(J===null||J.isXRRenderTarget===!0)&&(Gt=r.toneMapping);const dn={shaderID:X,shaderType:T.type,shaderName:T.name,vertexShader:_e,fragmentShader:$,defines:T.defines,customVertexShaderID:K,customFragmentShaderID:ge,isRawShaderMaterial:T.isRawShaderMaterial===!0,glslVersion:T.glslVersion,precision:f,batching:Ee,batchingColor:Ee&&D._colorsTexture!==null,instancing:Ce,instancingColor:Ce&&D.instanceColor!==null,instancingMorph:Ce&&D.morphTexture!==null,supportsVertexTextures:d,outputColorSpace:J===null?r.outputColorSpace:J.isXRRenderTarget===!0?J.texture.colorSpace:ai,alphaToCoverage:!!T.alphaToCoverage,map:Ue,matcap:xe,envMap:ye,envMapMode:ye&&z.mapping,envMapCubeUVHeight:W,aoMap:N,lightMap:pe,bumpMap:ie,normalMap:F,displacementMap:d&&I,emissiveMap:oe,normalMapObjectSpace:F&&T.normalMapType===Zb,normalMapTangentSpace:F&&T.normalMapType===xa,metalnessMap:j,roughnessMap:L,anisotropy:A,anisotropyMap:le,clearcoat:Z,clearcoatMap:ce,clearcoatNormalMap:Ie,clearcoatRoughnessMap:Se,dispersion:ee,iridescence:V,iridescenceMap:De,iridescenceThicknessMap:nt,sheen:Y,sheenColorMap:Je,sheenRoughnessMap:ke,specularMap:ot,specularColorMap:pt,specularIntensityMap:Pt,transmission:se,transmissionMap:Q,thicknessMap:ze,gradientMap:Me,opaque:T.transparent===!1&&T.blending===Cs&&T.alphaToCoverage===!1,alphaMap:Te,alphaTest:We,alphaHash:$e,combine:T.combine,mapUv:Ue&&v(T.map.channel),aoMapUv:N&&v(T.aoMap.channel),lightMapUv:pe&&v(T.lightMap.channel),bumpMapUv:ie&&v(T.bumpMap.channel),normalMapUv:F&&v(T.normalMap.channel),displacementMapUv:I&&v(T.displacementMap.channel),emissiveMapUv:oe&&v(T.emissiveMap.channel),metalnessMapUv:j&&v(T.metalnessMap.channel),roughnessMapUv:L&&v(T.roughnessMap.channel),anisotropyMapUv:le&&v(T.anisotropyMap.channel),clearcoatMapUv:ce&&v(T.clearcoatMap.channel),clearcoatNormalMapUv:Ie&&v(T.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Se&&v(T.clearcoatRoughnessMap.channel),iridescenceMapUv:De&&v(T.iridescenceMap.channel),iridescenceThicknessMapUv:nt&&v(T.iridescenceThicknessMap.channel),sheenColorMapUv:Je&&v(T.sheenColorMap.channel),sheenRoughnessMapUv:ke&&v(T.sheenRoughnessMap.channel),specularMapUv:ot&&v(T.specularMap.channel),specularColorMapUv:pt&&v(T.specularColorMap.channel),specularIntensityMapUv:Pt&&v(T.specularIntensityMap.channel),transmissionMapUv:Q&&v(T.transmissionMap.channel),thicknessMapUv:ze&&v(T.thicknessMap.channel),alphaMapUv:Te&&v(T.alphaMap.channel),vertexTangents:!!G.attributes.tangent&&(F||A),vertexColors:T.vertexColors,vertexAlphas:T.vertexColors===!0&&!!G.attributes.color&&G.attributes.color.itemSize===4,pointsUvs:D.isPoints===!0&&!!G.attributes.uv&&(Ue||Te),fog:!!O,useFog:T.fog===!0,fogExp2:!!O&&O.isFogExp2,flatShading:T.flatShading===!0,sizeAttenuation:T.sizeAttenuation===!0,logarithmicDepthBuffer:h,reverseDepthBuffer:ue,skinning:D.isSkinnedMesh===!0,morphTargets:G.morphAttributes.position!==void 0,morphNormals:G.morphAttributes.normal!==void 0,morphColors:G.morphAttributes.color!==void 0,morphTargetsCount:ne,morphTextureStride:be,numDirLights:S.directional.length,numPointLights:S.point.length,numSpotLights:S.spot.length,numSpotLightMaps:S.spotLightMap.length,numRectAreaLights:S.rectArea.length,numHemiLights:S.hemi.length,numDirLightShadows:S.directionalShadowMap.length,numPointLightShadows:S.pointShadowMap.length,numSpotLightShadows:S.spotShadowMap.length,numSpotLightShadowsWithMaps:S.numSpotLightShadowsWithMaps,numLightProbes:S.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:T.dithering,shadowMapEnabled:r.shadowMap.enabled&&R.length>0,shadowMapType:r.shadowMap.type,toneMapping:Gt,decodeVideoTexture:Ue&&T.map.isVideoTexture===!0&&Ut.getTransfer(T.map.colorSpace)===sn,decodeVideoTextureEmissive:oe&&T.emissiveMap.isVideoTexture===!0&&Ut.getTransfer(T.emissiveMap.colorSpace)===sn,premultipliedAlpha:T.premultipliedAlpha,doubleSided:T.side===Qi,flipSided:T.side===gi,useDepthPacking:T.depthPacking>=0,depthPacking:T.depthPacking||0,index0AttributeName:T.index0AttributeName,extensionClipCullDistance:ht&&T.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(ht&&T.extensions.multiDraw===!0||Ee)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:T.customProgramCacheKey()};return dn.vertexUv1s=c.has(1),dn.vertexUv2s=c.has(2),dn.vertexUv3s=c.has(3),c.clear(),dn}function m(T){const S=[];if(T.shaderID?S.push(T.shaderID):(S.push(T.customVertexShaderID),S.push(T.customFragmentShaderID)),T.defines!==void 0)for(const R in T.defines)S.push(R),S.push(T.defines[R]);return T.isRawShaderMaterial===!1&&(_(S,T),x(S,T),S.push(r.outputColorSpace)),S.push(T.customProgramCacheKey),S.join()}function _(T,S){T.push(S.precision),T.push(S.outputColorSpace),T.push(S.envMapMode),T.push(S.envMapCubeUVHeight),T.push(S.mapUv),T.push(S.alphaMapUv),T.push(S.lightMapUv),T.push(S.aoMapUv),T.push(S.bumpMapUv),T.push(S.normalMapUv),T.push(S.displacementMapUv),T.push(S.emissiveMapUv),T.push(S.metalnessMapUv),T.push(S.roughnessMapUv),T.push(S.anisotropyMapUv),T.push(S.clearcoatMapUv),T.push(S.clearcoatNormalMapUv),T.push(S.clearcoatRoughnessMapUv),T.push(S.iridescenceMapUv),T.push(S.iridescenceThicknessMapUv),T.push(S.sheenColorMapUv),T.push(S.sheenRoughnessMapUv),T.push(S.specularMapUv),T.push(S.specularColorMapUv),T.push(S.specularIntensityMapUv),T.push(S.transmissionMapUv),T.push(S.thicknessMapUv),T.push(S.combine),T.push(S.fogExp2),T.push(S.sizeAttenuation),T.push(S.morphTargetsCount),T.push(S.morphAttributeCount),T.push(S.numDirLights),T.push(S.numPointLights),T.push(S.numSpotLights),T.push(S.numSpotLightMaps),T.push(S.numHemiLights),T.push(S.numRectAreaLights),T.push(S.numDirLightShadows),T.push(S.numPointLightShadows),T.push(S.numSpotLightShadows),T.push(S.numSpotLightShadowsWithMaps),T.push(S.numLightProbes),T.push(S.shadowMapType),T.push(S.toneMapping),T.push(S.numClippingPlanes),T.push(S.numClipIntersection),T.push(S.depthPacking)}function x(T,S){o.disableAll(),S.supportsVertexTextures&&o.enable(0),S.instancing&&o.enable(1),S.instancingColor&&o.enable(2),S.instancingMorph&&o.enable(3),S.matcap&&o.enable(4),S.envMap&&o.enable(5),S.normalMapObjectSpace&&o.enable(6),S.normalMapTangentSpace&&o.enable(7),S.clearcoat&&o.enable(8),S.iridescence&&o.enable(9),S.alphaTest&&o.enable(10),S.vertexColors&&o.enable(11),S.vertexAlphas&&o.enable(12),S.vertexUv1s&&o.enable(13),S.vertexUv2s&&o.enable(14),S.vertexUv3s&&o.enable(15),S.vertexTangents&&o.enable(16),S.anisotropy&&o.enable(17),S.alphaHash&&o.enable(18),S.batching&&o.enable(19),S.dispersion&&o.enable(20),S.batchingColor&&o.enable(21),T.push(o.mask),o.disableAll(),S.fog&&o.enable(0),S.useFog&&o.enable(1),S.flatShading&&o.enable(2),S.logarithmicDepthBuffer&&o.enable(3),S.reverseDepthBuffer&&o.enable(4),S.skinning&&o.enable(5),S.morphTargets&&o.enable(6),S.morphNormals&&o.enable(7),S.morphColors&&o.enable(8),S.premultipliedAlpha&&o.enable(9),S.shadowMapEnabled&&o.enable(10),S.doubleSided&&o.enable(11),S.flipSided&&o.enable(12),S.useDepthPacking&&o.enable(13),S.dithering&&o.enable(14),S.transmission&&o.enable(15),S.sheen&&o.enable(16),S.opaque&&o.enable(17),S.pointsUvs&&o.enable(18),S.decodeVideoTexture&&o.enable(19),S.decodeVideoTextureEmissive&&o.enable(20),S.alphaToCoverage&&o.enable(21),T.push(o.mask)}function y(T){const S=p[T.type];let R;if(S){const H=dr[S];R=vp.clone(H.uniforms)}else R=T.uniforms;return R}function b(T,S){let R;for(let H=0,D=u.length;H<D;H++){const O=u[H];if(O.cacheKey===S){R=O,++R.usedTimes;break}}return R===void 0&&(R=new kI(r,S,T,s),u.push(R)),R}function M(T){if(--T.usedTimes===0){const S=u.indexOf(T);u[S]=u[u.length-1],u.pop(),T.destroy()}}function w(T){l.remove(T)}function C(){l.dispose()}return{getParameters:g,getProgramCacheKey:m,getUniforms:y,acquireProgram:b,releaseProgram:M,releaseShaderCache:w,programs:u,dispose:C}}function $I(){let r=new WeakMap;function e(a){return r.has(a)}function t(a){let o=r.get(a);return o===void 0&&(o={},r.set(a,o)),o}function n(a){r.delete(a)}function i(a,o,l){r.get(a)[o]=l}function s(){r=new WeakMap}return{has:e,get:t,remove:n,update:i,dispose:s}}function XI(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function Yy(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function jy(){const r=[];let e=0;const t=[],n=[],i=[];function s(){e=0,t.length=0,n.length=0,i.length=0}function a(h,d,f,p,v,g){let m=r[e];return m===void 0?(m={id:h.id,object:h,geometry:d,material:f,groupOrder:p,renderOrder:h.renderOrder,z:v,group:g},r[e]=m):(m.id=h.id,m.object=h,m.geometry=d,m.material=f,m.groupOrder=p,m.renderOrder=h.renderOrder,m.z=v,m.group=g),e++,m}function o(h,d,f,p,v,g){const m=a(h,d,f,p,v,g);f.transmission>0?n.push(m):f.transparent===!0?i.push(m):t.push(m)}function l(h,d,f,p,v,g){const m=a(h,d,f,p,v,g);f.transmission>0?n.unshift(m):f.transparent===!0?i.unshift(m):t.unshift(m)}function c(h,d){t.length>1&&t.sort(h||XI),n.length>1&&n.sort(d||Yy),i.length>1&&i.sort(d||Yy)}function u(){for(let h=e,d=r.length;h<d;h++){const f=r[h];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:t,transmissive:n,transparent:i,init:s,push:o,unshift:l,finish:u,sort:c}}function qI(){let r=new WeakMap;function e(n,i){const s=r.get(n);let a;return s===void 0?(a=new jy,r.set(n,[a])):i>=s.length?(a=new jy,s.push(a)):a=s[i],a}function t(){r=new WeakMap}return{get:e,dispose:t}}function ZI(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new k,color:new Ye};break;case"SpotLight":t={position:new k,direction:new k,color:new Ye,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new k,color:new Ye,distance:0,decay:0};break;case"HemisphereLight":t={direction:new k,skyColor:new Ye,groundColor:new Ye};break;case"RectAreaLight":t={color:new Ye,position:new k,halfWidth:new k,halfHeight:new k};break}return r[e.id]=t,t}}}function YI(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let jI=0;function JI(r,e){return(e.castShadow?2:0)-(r.castShadow?2:0)+(e.map?1:0)-(r.map?1:0)}function KI(r){const e=new ZI,t=YI(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new k);const i=new k,s=new ft,a=new ft;function o(c){let u=0,h=0,d=0;for(let T=0;T<9;T++)n.probe[T].set(0,0,0);let f=0,p=0,v=0,g=0,m=0,_=0,x=0,y=0,b=0,M=0,w=0;c.sort(JI);for(let T=0,S=c.length;T<S;T++){const R=c[T],H=R.color,D=R.intensity,O=R.distance,G=R.shadow&&R.shadow.map?R.shadow.map.texture:null;if(R.isAmbientLight)u+=H.r*D,h+=H.g*D,d+=H.b*D;else if(R.isLightProbe){for(let P=0;P<9;P++)n.probe[P].addScaledVector(R.sh.coefficients[P],D);w++}else if(R.isDirectionalLight){const P=e.get(R);if(P.color.copy(R.color).multiplyScalar(R.intensity),R.castShadow){const z=R.shadow,W=t.get(R);W.shadowIntensity=z.intensity,W.shadowBias=z.bias,W.shadowNormalBias=z.normalBias,W.shadowRadius=z.radius,W.shadowMapSize=z.mapSize,n.directionalShadow[f]=W,n.directionalShadowMap[f]=G,n.directionalShadowMatrix[f]=R.shadow.matrix,_++}n.directional[f]=P,f++}else if(R.isSpotLight){const P=e.get(R);P.position.setFromMatrixPosition(R.matrixWorld),P.color.copy(H).multiplyScalar(D),P.distance=O,P.coneCos=Math.cos(R.angle),P.penumbraCos=Math.cos(R.angle*(1-R.penumbra)),P.decay=R.decay,n.spot[v]=P;const z=R.shadow;if(R.map&&(n.spotLightMap[b]=R.map,b++,z.updateMatrices(R),R.castShadow&&M++),n.spotLightMatrix[v]=z.matrix,R.castShadow){const W=t.get(R);W.shadowIntensity=z.intensity,W.shadowBias=z.bias,W.shadowNormalBias=z.normalBias,W.shadowRadius=z.radius,W.shadowMapSize=z.mapSize,n.spotShadow[v]=W,n.spotShadowMap[v]=G,y++}v++}else if(R.isRectAreaLight){const P=e.get(R);P.color.copy(H).multiplyScalar(D),P.halfWidth.set(R.width*.5,0,0),P.halfHeight.set(0,R.height*.5,0),n.rectArea[g]=P,g++}else if(R.isPointLight){const P=e.get(R);if(P.color.copy(R.color).multiplyScalar(R.intensity),P.distance=R.distance,P.decay=R.decay,R.castShadow){const z=R.shadow,W=t.get(R);W.shadowIntensity=z.intensity,W.shadowBias=z.bias,W.shadowNormalBias=z.normalBias,W.shadowRadius=z.radius,W.shadowMapSize=z.mapSize,W.shadowCameraNear=z.camera.near,W.shadowCameraFar=z.camera.far,n.pointShadow[p]=W,n.pointShadowMap[p]=G,n.pointShadowMatrix[p]=R.shadow.matrix,x++}n.point[p]=P,p++}else if(R.isHemisphereLight){const P=e.get(R);P.skyColor.copy(R.color).multiplyScalar(D),P.groundColor.copy(R.groundColor).multiplyScalar(D),n.hemi[m]=P,m++}}g>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=je.LTC_FLOAT_1,n.rectAreaLTC2=je.LTC_FLOAT_2):(n.rectAreaLTC1=je.LTC_HALF_1,n.rectAreaLTC2=je.LTC_HALF_2)),n.ambient[0]=u,n.ambient[1]=h,n.ambient[2]=d;const C=n.hash;(C.directionalLength!==f||C.pointLength!==p||C.spotLength!==v||C.rectAreaLength!==g||C.hemiLength!==m||C.numDirectionalShadows!==_||C.numPointShadows!==x||C.numSpotShadows!==y||C.numSpotMaps!==b||C.numLightProbes!==w)&&(n.directional.length=f,n.spot.length=v,n.rectArea.length=g,n.point.length=p,n.hemi.length=m,n.directionalShadow.length=_,n.directionalShadowMap.length=_,n.pointShadow.length=x,n.pointShadowMap.length=x,n.spotShadow.length=y,n.spotShadowMap.length=y,n.directionalShadowMatrix.length=_,n.pointShadowMatrix.length=x,n.spotLightMatrix.length=y+b-M,n.spotLightMap.length=b,n.numSpotLightShadowsWithMaps=M,n.numLightProbes=w,C.directionalLength=f,C.pointLength=p,C.spotLength=v,C.rectAreaLength=g,C.hemiLength=m,C.numDirectionalShadows=_,C.numPointShadows=x,C.numSpotShadows=y,C.numSpotMaps=b,C.numLightProbes=w,n.version=jI++)}function l(c,u){let h=0,d=0,f=0,p=0,v=0;const g=u.matrixWorldInverse;for(let m=0,_=c.length;m<_;m++){const x=c[m];if(x.isDirectionalLight){const y=n.directional[h];y.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),y.direction.sub(i),y.direction.transformDirection(g),h++}else if(x.isSpotLight){const y=n.spot[f];y.position.setFromMatrixPosition(x.matrixWorld),y.position.applyMatrix4(g),y.direction.setFromMatrixPosition(x.matrixWorld),i.setFromMatrixPosition(x.target.matrixWorld),y.direction.sub(i),y.direction.transformDirection(g),f++}else if(x.isRectAreaLight){const y=n.rectArea[p];y.position.setFromMatrixPosition(x.matrixWorld),y.position.applyMatrix4(g),a.identity(),s.copy(x.matrixWorld),s.premultiply(g),a.extractRotation(s),y.halfWidth.set(x.width*.5,0,0),y.halfHeight.set(0,x.height*.5,0),y.halfWidth.applyMatrix4(a),y.halfHeight.applyMatrix4(a),p++}else if(x.isPointLight){const y=n.point[d];y.position.setFromMatrixPosition(x.matrixWorld),y.position.applyMatrix4(g),d++}else if(x.isHemisphereLight){const y=n.hemi[v];y.direction.setFromMatrixPosition(x.matrixWorld),y.direction.transformDirection(g),v++}}}return{setup:o,setupView:l,state:n}}function Jy(r){const e=new KI(r),t=[],n=[];function i(u){c.camera=u,t.length=0,n.length=0}function s(u){t.push(u)}function a(u){n.push(u)}function o(){e.setup(t)}function l(u){e.setupView(t,u)}const c={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:i,state:c,setupLights:o,setupLightsView:l,pushLight:s,pushShadow:a}}function QI(r){let e=new WeakMap;function t(i,s=0){const a=e.get(i);let o;return a===void 0?(o=new Jy(r),e.set(i,[o])):s>=a.length?(o=new Jy(r),a.push(o)):o=a[s],o}function n(){e=new WeakMap}return{get:t,dispose:n}}const e3=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,t3=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function n3(r,e,t){let n=new Kl;const i=new Pe,s=new Pe,a=new Ht,o=new c_({depthPacking:qb}),l=new u_,c={},u=t.maxTextureSize,h={[es]:gi,[gi]:es,[Qi]:Qi},d=new Pi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Pe},radius:{value:4}},vertexShader:e3,fragmentShader:t3}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new Lt;p.setAttribute("position",new qt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new Mn(p,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Ov;let m=this.type;this.render=function(M,w,C){if(g.enabled===!1||g.autoUpdate===!1&&g.needsUpdate===!1||M.length===0)return;const T=r.getRenderTarget(),S=r.getActiveCubeFace(),R=r.getActiveMipmapLevel(),H=r.state;H.setBlending(jr),H.buffers.color.setClear(1,1,1,1),H.buffers.depth.setTest(!0),H.setScissorTest(!1);const D=m!==Xr&&this.type===Xr,O=m===Xr&&this.type!==Xr;for(let G=0,P=M.length;G<P;G++){const z=M[G],W=z.shadow;if(W===void 0){console.warn("THREE.WebGLShadowMap:",z,"has no shadow.");continue}if(W.autoUpdate===!1&&W.needsUpdate===!1)continue;i.copy(W.mapSize);const X=W.getFrameExtents();if(i.multiply(X),s.copy(W.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(s.x=Math.floor(u/X.x),i.x=s.x*X.x,W.mapSize.x=s.x),i.y>u&&(s.y=Math.floor(u/X.y),i.y=s.y*X.y,W.mapSize.y=s.y)),W.map===null||D===!0||O===!0){const ne=this.type!==Xr?{minFilter:Wn,magFilter:Wn}:{};W.map!==null&&W.map.dispose(),W.map=new ts(i.x,i.y,ne),W.map.texture.name=z.name+".shadowMap",W.camera.updateProjectionMatrix()}r.setRenderTarget(W.map),r.clear();const re=W.getViewportCount();for(let ne=0;ne<re;ne++){const be=W.getViewport(ne);a.set(s.x*be.x,s.y*be.y,s.x*be.z,s.y*be.w),H.viewport(a),W.updateMatrices(z,ne),n=W.getFrustum(),y(w,C,W.camera,z,this.type)}W.isPointLightShadow!==!0&&this.type===Xr&&_(W,C),W.needsUpdate=!1}m=this.type,g.needsUpdate=!1,r.setRenderTarget(T,S,R)};function _(M,w){const C=e.update(v);d.defines.VSM_SAMPLES!==M.blurSamples&&(d.defines.VSM_SAMPLES=M.blurSamples,f.defines.VSM_SAMPLES=M.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),M.mapPass===null&&(M.mapPass=new ts(i.x,i.y)),d.uniforms.shadow_pass.value=M.map.texture,d.uniforms.resolution.value=M.mapSize,d.uniforms.radius.value=M.radius,r.setRenderTarget(M.mapPass),r.clear(),r.renderBufferDirect(w,null,C,d,v,null),f.uniforms.shadow_pass.value=M.mapPass.texture,f.uniforms.resolution.value=M.mapSize,f.uniforms.radius.value=M.radius,r.setRenderTarget(M.map),r.clear(),r.renderBufferDirect(w,null,C,f,v,null)}function x(M,w,C,T){let S=null;const R=C.isPointLight===!0?M.customDistanceMaterial:M.customDepthMaterial;if(R!==void 0)S=R;else if(S=C.isPointLight===!0?l:o,r.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0||w.alphaToCoverage===!0){const H=S.uuid,D=w.uuid;let O=c[H];O===void 0&&(O={},c[H]=O);let G=O[D];G===void 0&&(G=S.clone(),O[D]=G,w.addEventListener("dispose",b)),S=G}if(S.visible=w.visible,S.wireframe=w.wireframe,T===Xr?S.side=w.shadowSide!==null?w.shadowSide:w.side:S.side=w.shadowSide!==null?w.shadowSide:h[w.side],S.alphaMap=w.alphaMap,S.alphaTest=w.alphaToCoverage===!0?.5:w.alphaTest,S.map=w.map,S.clipShadows=w.clipShadows,S.clippingPlanes=w.clippingPlanes,S.clipIntersection=w.clipIntersection,S.displacementMap=w.displacementMap,S.displacementScale=w.displacementScale,S.displacementBias=w.displacementBias,S.wireframeLinewidth=w.wireframeLinewidth,S.linewidth=w.linewidth,C.isPointLight===!0&&S.isMeshDistanceMaterial===!0){const H=r.properties.get(S);H.light=C}return S}function y(M,w,C,T,S){if(M.visible===!1)return;if(M.layers.test(w.layers)&&(M.isMesh||M.isLine||M.isPoints)&&(M.castShadow||M.receiveShadow&&S===Xr)&&(!M.frustumCulled||n.intersectsObject(M))){M.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,M.matrixWorld);const D=e.update(M),O=M.material;if(Array.isArray(O)){const G=D.groups;for(let P=0,z=G.length;P<z;P++){const W=G[P],X=O[W.materialIndex];if(X&&X.visible){const re=x(M,X,T,S);M.onBeforeShadow(r,M,w,C,D,re,W),r.renderBufferDirect(C,null,D,re,M,W),M.onAfterShadow(r,M,w,C,D,re,W)}}}else if(O.visible){const G=x(M,O,T,S);M.onBeforeShadow(r,M,w,C,D,G,null),r.renderBufferDirect(C,null,D,G,M,null),M.onAfterShadow(r,M,w,C,D,G,null)}}const H=M.children;for(let D=0,O=H.length;D<O;D++)y(H[D],w,C,T,S)}function b(M){M.target.removeEventListener("dispose",b);for(const C in c){const T=c[C],S=M.target.uuid;S in T&&(T[S].dispose(),delete T[S])}}}const i3={[Yd]:jd,[Jd]:ef,[Kd]:tf,[so]:Qd,[jd]:Yd,[ef]:Jd,[tf]:Kd,[Qd]:so};function r3(r,e){function t(){let Q=!1;const ze=new Ht;let Me=null;const Te=new Ht(0,0,0,0);return{setMask:function(We){Me!==We&&!Q&&(r.colorMask(We,We,We,We),Me=We)},setLocked:function(We){Q=We},setClear:function(We,$e,ht,Gt,dn){dn===!0&&(We*=Gt,$e*=Gt,ht*=Gt),ze.set(We,$e,ht,Gt),Te.equals(ze)===!1&&(r.clearColor(We,$e,ht,Gt),Te.copy(ze))},reset:function(){Q=!1,Me=null,Te.set(-1,0,0,0)}}}function n(){let Q=!1,ze=!1,Me=null,Te=null,We=null;return{setReversed:function($e){if(ze!==$e){const ht=e.get("EXT_clip_control");$e?ht.clipControlEXT(ht.LOWER_LEFT_EXT,ht.ZERO_TO_ONE_EXT):ht.clipControlEXT(ht.LOWER_LEFT_EXT,ht.NEGATIVE_ONE_TO_ONE_EXT),ze=$e;const Gt=We;We=null,this.setClear(Gt)}},getReversed:function(){return ze},setTest:function($e){$e?J(r.DEPTH_TEST):ue(r.DEPTH_TEST)},setMask:function($e){Me!==$e&&!Q&&(r.depthMask($e),Me=$e)},setFunc:function($e){if(ze&&($e=i3[$e]),Te!==$e){switch($e){case Yd:r.depthFunc(r.NEVER);break;case jd:r.depthFunc(r.ALWAYS);break;case Jd:r.depthFunc(r.LESS);break;case so:r.depthFunc(r.LEQUAL);break;case Kd:r.depthFunc(r.EQUAL);break;case Qd:r.depthFunc(r.GEQUAL);break;case ef:r.depthFunc(r.GREATER);break;case tf:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}Te=$e}},setLocked:function($e){Q=$e},setClear:function($e){We!==$e&&(ze&&($e=1-$e),r.clearDepth($e),We=$e)},reset:function(){Q=!1,Me=null,Te=null,We=null,ze=!1}}}function i(){let Q=!1,ze=null,Me=null,Te=null,We=null,$e=null,ht=null,Gt=null,dn=null;return{setTest:function(et){Q||(et?J(r.STENCIL_TEST):ue(r.STENCIL_TEST))},setMask:function(et){ze!==et&&!Q&&(r.stencilMask(et),ze=et)},setFunc:function(et,U,ae){(Me!==et||Te!==U||We!==ae)&&(r.stencilFunc(et,U,ae),Me=et,Te=U,We=ae)},setOp:function(et,U,ae){($e!==et||ht!==U||Gt!==ae)&&(r.stencilOp(et,U,ae),$e=et,ht=U,Gt=ae)},setLocked:function(et){Q=et},setClear:function(et){dn!==et&&(r.clearStencil(et),dn=et)},reset:function(){Q=!1,ze=null,Me=null,Te=null,We=null,$e=null,ht=null,Gt=null,dn=null}}}const s=new t,a=new n,o=new i,l=new WeakMap,c=new WeakMap;let u={},h={},d=new WeakMap,f=[],p=null,v=!1,g=null,m=null,_=null,x=null,y=null,b=null,M=null,w=new Ye(0,0,0),C=0,T=!1,S=null,R=null,H=null,D=null,O=null;const G=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let P=!1,z=0;const W=r.getParameter(r.VERSION);W.indexOf("WebGL")!==-1?(z=parseFloat(/^WebGL (\d)/.exec(W)[1]),P=z>=1):W.indexOf("OpenGL ES")!==-1&&(z=parseFloat(/^OpenGL ES (\d)/.exec(W)[1]),P=z>=2);let X=null,re={};const ne=r.getParameter(r.SCISSOR_BOX),be=r.getParameter(r.VIEWPORT),_e=new Ht().fromArray(ne),$=new Ht().fromArray(be);function K(Q,ze,Me,Te){const We=new Uint8Array(4),$e=r.createTexture();r.bindTexture(Q,$e),r.texParameteri(Q,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(Q,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let ht=0;ht<Me;ht++)Q===r.TEXTURE_3D||Q===r.TEXTURE_2D_ARRAY?r.texImage3D(ze,0,r.RGBA,1,1,Te,0,r.RGBA,r.UNSIGNED_BYTE,We):r.texImage2D(ze+ht,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,We);return $e}const ge={};ge[r.TEXTURE_2D]=K(r.TEXTURE_2D,r.TEXTURE_2D,1),ge[r.TEXTURE_CUBE_MAP]=K(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),ge[r.TEXTURE_2D_ARRAY]=K(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),ge[r.TEXTURE_3D]=K(r.TEXTURE_3D,r.TEXTURE_3D,1,1),s.setClear(0,0,0,1),a.setClear(1),o.setClear(0),J(r.DEPTH_TEST),a.setFunc(so),ie(!1),F(jg),J(r.CULL_FACE),N(jr);function J(Q){u[Q]!==!0&&(r.enable(Q),u[Q]=!0)}function ue(Q){u[Q]!==!1&&(r.disable(Q),u[Q]=!1)}function Ce(Q,ze){return h[Q]!==ze?(r.bindFramebuffer(Q,ze),h[Q]=ze,Q===r.DRAW_FRAMEBUFFER&&(h[r.FRAMEBUFFER]=ze),Q===r.FRAMEBUFFER&&(h[r.DRAW_FRAMEBUFFER]=ze),!0):!1}function Ee(Q,ze){let Me=f,Te=!1;if(Q){Me=d.get(ze),Me===void 0&&(Me=[],d.set(ze,Me));const We=Q.textures;if(Me.length!==We.length||Me[0]!==r.COLOR_ATTACHMENT0){for(let $e=0,ht=We.length;$e<ht;$e++)Me[$e]=r.COLOR_ATTACHMENT0+$e;Me.length=We.length,Te=!0}}else Me[0]!==r.BACK&&(Me[0]=r.BACK,Te=!0);Te&&r.drawBuffers(Me)}function Ue(Q){return p!==Q?(r.useProgram(Q),p=Q,!0):!1}const xe={[ta]:r.FUNC_ADD,[gb]:r.FUNC_SUBTRACT,[vb]:r.FUNC_REVERSE_SUBTRACT};xe[_b]=r.MIN,xe[yb]=r.MAX;const ye={[xb]:r.ZERO,[Mb]:r.ONE,[bb]:r.SRC_COLOR,[qd]:r.SRC_ALPHA,[Cb]:r.SRC_ALPHA_SATURATE,[Eb]:r.DST_COLOR,[wb]:r.DST_ALPHA,[Sb]:r.ONE_MINUS_SRC_COLOR,[Zd]:r.ONE_MINUS_SRC_ALPHA,[Ab]:r.ONE_MINUS_DST_COLOR,[Tb]:r.ONE_MINUS_DST_ALPHA,[Rb]:r.CONSTANT_COLOR,[Lb]:r.ONE_MINUS_CONSTANT_COLOR,[Pb]:r.CONSTANT_ALPHA,[Ib]:r.ONE_MINUS_CONSTANT_ALPHA};function N(Q,ze,Me,Te,We,$e,ht,Gt,dn,et){if(Q===jr){v===!0&&(ue(r.BLEND),v=!1);return}if(v===!1&&(J(r.BLEND),v=!0),Q!==mb){if(Q!==g||et!==T){if((m!==ta||y!==ta)&&(r.blendEquation(r.FUNC_ADD),m=ta,y=ta),et)switch(Q){case Cs:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Rl:r.blendFunc(r.ONE,r.ONE);break;case $d:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Xd:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",Q);break}else switch(Q){case Cs:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Rl:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case $d:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Xd:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",Q);break}_=null,x=null,b=null,M=null,w.set(0,0,0),C=0,g=Q,T=et}return}We=We||ze,$e=$e||Me,ht=ht||Te,(ze!==m||We!==y)&&(r.blendEquationSeparate(xe[ze],xe[We]),m=ze,y=We),(Me!==_||Te!==x||$e!==b||ht!==M)&&(r.blendFuncSeparate(ye[Me],ye[Te],ye[$e],ye[ht]),_=Me,x=Te,b=$e,M=ht),(Gt.equals(w)===!1||dn!==C)&&(r.blendColor(Gt.r,Gt.g,Gt.b,dn),w.copy(Gt),C=dn),g=Q,T=!1}function pe(Q,ze){Q.side===Qi?ue(r.CULL_FACE):J(r.CULL_FACE);let Me=Q.side===gi;ze&&(Me=!Me),ie(Me),Q.blending===Cs&&Q.transparent===!1?N(jr):N(Q.blending,Q.blendEquation,Q.blendSrc,Q.blendDst,Q.blendEquationAlpha,Q.blendSrcAlpha,Q.blendDstAlpha,Q.blendColor,Q.blendAlpha,Q.premultipliedAlpha),a.setFunc(Q.depthFunc),a.setTest(Q.depthTest),a.setMask(Q.depthWrite),s.setMask(Q.colorWrite);const Te=Q.stencilWrite;o.setTest(Te),Te&&(o.setMask(Q.stencilWriteMask),o.setFunc(Q.stencilFunc,Q.stencilRef,Q.stencilFuncMask),o.setOp(Q.stencilFail,Q.stencilZFail,Q.stencilZPass)),oe(Q.polygonOffset,Q.polygonOffsetFactor,Q.polygonOffsetUnits),Q.alphaToCoverage===!0?J(r.SAMPLE_ALPHA_TO_COVERAGE):ue(r.SAMPLE_ALPHA_TO_COVERAGE)}function ie(Q){S!==Q&&(Q?r.frontFace(r.CW):r.frontFace(r.CCW),S=Q)}function F(Q){Q!==fb?(J(r.CULL_FACE),Q!==R&&(Q===jg?r.cullFace(r.BACK):Q===pb?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):ue(r.CULL_FACE),R=Q}function I(Q){Q!==H&&(P&&r.lineWidth(Q),H=Q)}function oe(Q,ze,Me){Q?(J(r.POLYGON_OFFSET_FILL),(D!==ze||O!==Me)&&(r.polygonOffset(ze,Me),D=ze,O=Me)):ue(r.POLYGON_OFFSET_FILL)}function j(Q){Q?J(r.SCISSOR_TEST):ue(r.SCISSOR_TEST)}function L(Q){Q===void 0&&(Q=r.TEXTURE0+G-1),X!==Q&&(r.activeTexture(Q),X=Q)}function A(Q,ze,Me){Me===void 0&&(X===null?Me=r.TEXTURE0+G-1:Me=X);let Te=re[Me];Te===void 0&&(Te={type:void 0,texture:void 0},re[Me]=Te),(Te.type!==Q||Te.texture!==ze)&&(X!==Me&&(r.activeTexture(Me),X=Me),r.bindTexture(Q,ze||ge[Q]),Te.type=Q,Te.texture=ze)}function Z(){const Q=re[X];Q!==void 0&&Q.type!==void 0&&(r.bindTexture(Q.type,null),Q.type=void 0,Q.texture=void 0)}function ee(){try{r.compressedTexImage2D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function V(){try{r.compressedTexImage3D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function Y(){try{r.texSubImage2D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function se(){try{r.texSubImage3D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function le(){try{r.compressedTexSubImage2D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function ce(){try{r.compressedTexSubImage3D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function Ie(){try{r.texStorage2D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function Se(){try{r.texStorage3D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function De(){try{r.texImage2D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function nt(){try{r.texImage3D(...arguments)}catch(Q){console.error("THREE.WebGLState:",Q)}}function Je(Q){_e.equals(Q)===!1&&(r.scissor(Q.x,Q.y,Q.z,Q.w),_e.copy(Q))}function ke(Q){$.equals(Q)===!1&&(r.viewport(Q.x,Q.y,Q.z,Q.w),$.copy(Q))}function ot(Q,ze){let Me=c.get(ze);Me===void 0&&(Me=new WeakMap,c.set(ze,Me));let Te=Me.get(Q);Te===void 0&&(Te=r.getUniformBlockIndex(ze,Q.name),Me.set(Q,Te))}function pt(Q,ze){const Te=c.get(ze).get(Q);l.get(ze)!==Te&&(r.uniformBlockBinding(ze,Te,Q.__bindingPointIndex),l.set(ze,Te))}function Pt(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),a.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),u={},X=null,re={},h={},d=new WeakMap,f=[],p=null,v=!1,g=null,m=null,_=null,x=null,y=null,b=null,M=null,w=new Ye(0,0,0),C=0,T=!1,S=null,R=null,H=null,D=null,O=null,_e.set(0,0,r.canvas.width,r.canvas.height),$.set(0,0,r.canvas.width,r.canvas.height),s.reset(),a.reset(),o.reset()}return{buffers:{color:s,depth:a,stencil:o},enable:J,disable:ue,bindFramebuffer:Ce,drawBuffers:Ee,useProgram:Ue,setBlending:N,setMaterial:pe,setFlipSided:ie,setCullFace:F,setLineWidth:I,setPolygonOffset:oe,setScissorTest:j,activeTexture:L,bindTexture:A,unbindTexture:Z,compressedTexImage2D:ee,compressedTexImage3D:V,texImage2D:De,texImage3D:nt,updateUBOMapping:ot,uniformBlockBinding:pt,texStorage2D:Ie,texStorage3D:Se,texSubImage2D:Y,texSubImage3D:se,compressedTexSubImage2D:le,compressedTexSubImage3D:ce,scissor:Je,viewport:ke,reset:Pt}}function s3(r,e,t,n,i,s,a){const o=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new Pe,u=new WeakMap;let h;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function p(L,A){return f?new OffscreenCanvas(L,A):_u("canvas")}function v(L,A,Z){let ee=1;const V=j(L);if((V.width>Z||V.height>Z)&&(ee=Z/Math.max(V.width,V.height)),ee<1)if(typeof HTMLImageElement<"u"&&L instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&L instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&L instanceof ImageBitmap||typeof VideoFrame<"u"&&L instanceof VideoFrame){const Y=Math.floor(ee*V.width),se=Math.floor(ee*V.height);h===void 0&&(h=p(Y,se));const le=A?p(Y,se):h;return le.width=Y,le.height=se,le.getContext("2d").drawImage(L,0,0,Y,se),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+V.width+"x"+V.height+") to ("+Y+"x"+se+")."),le}else return"data"in L&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+V.width+"x"+V.height+")."),L;return L}function g(L){return L.generateMipmaps}function m(L){r.generateMipmap(L)}function _(L){return L.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:L.isWebGL3DRenderTarget?r.TEXTURE_3D:L.isWebGLArrayRenderTarget||L.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function x(L,A,Z,ee,V=!1){if(L!==null){if(r[L]!==void 0)return r[L];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+L+"'")}let Y=A;if(A===r.RED&&(Z===r.FLOAT&&(Y=r.R32F),Z===r.HALF_FLOAT&&(Y=r.R16F),Z===r.UNSIGNED_BYTE&&(Y=r.R8)),A===r.RED_INTEGER&&(Z===r.UNSIGNED_BYTE&&(Y=r.R8UI),Z===r.UNSIGNED_SHORT&&(Y=r.R16UI),Z===r.UNSIGNED_INT&&(Y=r.R32UI),Z===r.BYTE&&(Y=r.R8I),Z===r.SHORT&&(Y=r.R16I),Z===r.INT&&(Y=r.R32I)),A===r.RG&&(Z===r.FLOAT&&(Y=r.RG32F),Z===r.HALF_FLOAT&&(Y=r.RG16F),Z===r.UNSIGNED_BYTE&&(Y=r.RG8)),A===r.RG_INTEGER&&(Z===r.UNSIGNED_BYTE&&(Y=r.RG8UI),Z===r.UNSIGNED_SHORT&&(Y=r.RG16UI),Z===r.UNSIGNED_INT&&(Y=r.RG32UI),Z===r.BYTE&&(Y=r.RG8I),Z===r.SHORT&&(Y=r.RG16I),Z===r.INT&&(Y=r.RG32I)),A===r.RGB_INTEGER&&(Z===r.UNSIGNED_BYTE&&(Y=r.RGB8UI),Z===r.UNSIGNED_SHORT&&(Y=r.RGB16UI),Z===r.UNSIGNED_INT&&(Y=r.RGB32UI),Z===r.BYTE&&(Y=r.RGB8I),Z===r.SHORT&&(Y=r.RGB16I),Z===r.INT&&(Y=r.RGB32I)),A===r.RGBA_INTEGER&&(Z===r.UNSIGNED_BYTE&&(Y=r.RGBA8UI),Z===r.UNSIGNED_SHORT&&(Y=r.RGBA16UI),Z===r.UNSIGNED_INT&&(Y=r.RGBA32UI),Z===r.BYTE&&(Y=r.RGBA8I),Z===r.SHORT&&(Y=r.RGBA16I),Z===r.INT&&(Y=r.RGBA32I)),A===r.RGB&&Z===r.UNSIGNED_INT_5_9_9_9_REV&&(Y=r.RGB9_E5),A===r.RGBA){const se=V?mu:Ut.getTransfer(ee);Z===r.FLOAT&&(Y=r.RGBA32F),Z===r.HALF_FLOAT&&(Y=r.RGBA16F),Z===r.UNSIGNED_BYTE&&(Y=se===sn?r.SRGB8_ALPHA8:r.RGBA8),Z===r.UNSIGNED_SHORT_4_4_4_4&&(Y=r.RGBA4),Z===r.UNSIGNED_SHORT_5_5_5_1&&(Y=r.RGB5_A1)}return(Y===r.R16F||Y===r.R32F||Y===r.RG16F||Y===r.RG32F||Y===r.RGBA16F||Y===r.RGBA32F)&&e.get("EXT_color_buffer_float"),Y}function y(L,A){let Z;return L?A===null||A===Is||A===Il?Z=r.DEPTH24_STENCIL8:A===zi?Z=r.DEPTH32F_STENCIL8:A===Pl&&(Z=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):A===null||A===Is||A===Il?Z=r.DEPTH_COMPONENT24:A===zi?Z=r.DEPTH_COMPONENT32F:A===Pl&&(Z=r.DEPTH_COMPONENT16),Z}function b(L,A){return g(L)===!0||L.isFramebufferTexture&&L.minFilter!==Wn&&L.minFilter!==xn?Math.log2(Math.max(A.width,A.height))+1:L.mipmaps!==void 0&&L.mipmaps.length>0?L.mipmaps.length:L.isCompressedTexture&&Array.isArray(L.image)?A.mipmaps.length:1}function M(L){const A=L.target;A.removeEventListener("dispose",M),C(A),A.isVideoTexture&&u.delete(A)}function w(L){const A=L.target;A.removeEventListener("dispose",w),S(A)}function C(L){const A=n.get(L);if(A.__webglInit===void 0)return;const Z=L.source,ee=d.get(Z);if(ee){const V=ee[A.__cacheKey];V.usedTimes--,V.usedTimes===0&&T(L),Object.keys(ee).length===0&&d.delete(Z)}n.remove(L)}function T(L){const A=n.get(L);r.deleteTexture(A.__webglTexture);const Z=L.source,ee=d.get(Z);delete ee[A.__cacheKey],a.memory.textures--}function S(L){const A=n.get(L);if(L.depthTexture&&(L.depthTexture.dispose(),n.remove(L.depthTexture)),L.isWebGLCubeRenderTarget)for(let ee=0;ee<6;ee++){if(Array.isArray(A.__webglFramebuffer[ee]))for(let V=0;V<A.__webglFramebuffer[ee].length;V++)r.deleteFramebuffer(A.__webglFramebuffer[ee][V]);else r.deleteFramebuffer(A.__webglFramebuffer[ee]);A.__webglDepthbuffer&&r.deleteRenderbuffer(A.__webglDepthbuffer[ee])}else{if(Array.isArray(A.__webglFramebuffer))for(let ee=0;ee<A.__webglFramebuffer.length;ee++)r.deleteFramebuffer(A.__webglFramebuffer[ee]);else r.deleteFramebuffer(A.__webglFramebuffer);if(A.__webglDepthbuffer&&r.deleteRenderbuffer(A.__webglDepthbuffer),A.__webglMultisampledFramebuffer&&r.deleteFramebuffer(A.__webglMultisampledFramebuffer),A.__webglColorRenderbuffer)for(let ee=0;ee<A.__webglColorRenderbuffer.length;ee++)A.__webglColorRenderbuffer[ee]&&r.deleteRenderbuffer(A.__webglColorRenderbuffer[ee]);A.__webglDepthRenderbuffer&&r.deleteRenderbuffer(A.__webglDepthRenderbuffer)}const Z=L.textures;for(let ee=0,V=Z.length;ee<V;ee++){const Y=n.get(Z[ee]);Y.__webglTexture&&(r.deleteTexture(Y.__webglTexture),a.memory.textures--),n.remove(Z[ee])}n.remove(L)}let R=0;function H(){R=0}function D(){const L=R;return L>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+L+" texture units while this GPU supports only "+i.maxTextures),R+=1,L}function O(L){const A=[];return A.push(L.wrapS),A.push(L.wrapT),A.push(L.wrapR||0),A.push(L.magFilter),A.push(L.minFilter),A.push(L.anisotropy),A.push(L.internalFormat),A.push(L.format),A.push(L.type),A.push(L.generateMipmaps),A.push(L.premultiplyAlpha),A.push(L.flipY),A.push(L.unpackAlignment),A.push(L.colorSpace),A.join()}function G(L,A){const Z=n.get(L);if(L.isVideoTexture&&I(L),L.isRenderTargetTexture===!1&&L.version>0&&Z.__version!==L.version){const ee=L.image;if(ee===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(ee.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{$(Z,L,A);return}}t.bindTexture(r.TEXTURE_2D,Z.__webglTexture,r.TEXTURE0+A)}function P(L,A){const Z=n.get(L);if(L.version>0&&Z.__version!==L.version){$(Z,L,A);return}t.bindTexture(r.TEXTURE_2D_ARRAY,Z.__webglTexture,r.TEXTURE0+A)}function z(L,A){const Z=n.get(L);if(L.version>0&&Z.__version!==L.version){$(Z,L,A);return}t.bindTexture(r.TEXTURE_3D,Z.__webglTexture,r.TEXTURE0+A)}function W(L,A){const Z=n.get(L);if(L.version>0&&Z.__version!==L.version){K(Z,L,A);return}t.bindTexture(r.TEXTURE_CUBE_MAP,Z.__webglTexture,r.TEXTURE0+A)}const X={[fa]:r.REPEAT,[tr]:r.CLAMP_TO_EDGE,[Ll]:r.MIRRORED_REPEAT},re={[Wn]:r.NEAREST,[ap]:r.NEAREST_MIPMAP_NEAREST,[Ya]:r.NEAREST_MIPMAP_LINEAR,[xn]:r.LINEAR,[wl]:r.LINEAR_MIPMAP_NEAREST,[nr]:r.LINEAR_MIPMAP_LINEAR},ne={[Yb]:r.NEVER,[tS]:r.ALWAYS,[jb]:r.LESS,[Xv]:r.LEQUAL,[Jb]:r.EQUAL,[eS]:r.GEQUAL,[Kb]:r.GREATER,[Qb]:r.NOTEQUAL};function be(L,A){if(A.type===zi&&e.has("OES_texture_float_linear")===!1&&(A.magFilter===xn||A.magFilter===wl||A.magFilter===Ya||A.magFilter===nr||A.minFilter===xn||A.minFilter===wl||A.minFilter===Ya||A.minFilter===nr)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(L,r.TEXTURE_WRAP_S,X[A.wrapS]),r.texParameteri(L,r.TEXTURE_WRAP_T,X[A.wrapT]),(L===r.TEXTURE_3D||L===r.TEXTURE_2D_ARRAY)&&r.texParameteri(L,r.TEXTURE_WRAP_R,X[A.wrapR]),r.texParameteri(L,r.TEXTURE_MAG_FILTER,re[A.magFilter]),r.texParameteri(L,r.TEXTURE_MIN_FILTER,re[A.minFilter]),A.compareFunction&&(r.texParameteri(L,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(L,r.TEXTURE_COMPARE_FUNC,ne[A.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(A.magFilter===Wn||A.minFilter!==Ya&&A.minFilter!==nr||A.type===zi&&e.has("OES_texture_float_linear")===!1)return;if(A.anisotropy>1||n.get(A).__currentAnisotropy){const Z=e.get("EXT_texture_filter_anisotropic");r.texParameterf(L,Z.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(A.anisotropy,i.getMaxAnisotropy())),n.get(A).__currentAnisotropy=A.anisotropy}}}function _e(L,A){let Z=!1;L.__webglInit===void 0&&(L.__webglInit=!0,A.addEventListener("dispose",M));const ee=A.source;let V=d.get(ee);V===void 0&&(V={},d.set(ee,V));const Y=O(A);if(Y!==L.__cacheKey){V[Y]===void 0&&(V[Y]={texture:r.createTexture(),usedTimes:0},a.memory.textures++,Z=!0),V[Y].usedTimes++;const se=V[L.__cacheKey];se!==void 0&&(V[L.__cacheKey].usedTimes--,se.usedTimes===0&&T(A)),L.__cacheKey=Y,L.__webglTexture=V[Y].texture}return Z}function $(L,A,Z){let ee=r.TEXTURE_2D;(A.isDataArrayTexture||A.isCompressedArrayTexture)&&(ee=r.TEXTURE_2D_ARRAY),A.isData3DTexture&&(ee=r.TEXTURE_3D);const V=_e(L,A),Y=A.source;t.bindTexture(ee,L.__webglTexture,r.TEXTURE0+Z);const se=n.get(Y);if(Y.version!==se.__version||V===!0){t.activeTexture(r.TEXTURE0+Z);const le=Ut.getPrimaries(Ut.workingColorSpace),ce=A.colorSpace===bs?null:Ut.getPrimaries(A.colorSpace),Ie=A.colorSpace===bs||le===ce?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,A.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,A.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,A.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ie);let Se=v(A.image,!1,i.maxTextureSize);Se=oe(A,Se);const De=s.convert(A.format,A.colorSpace),nt=s.convert(A.type);let Je=x(A.internalFormat,De,nt,A.colorSpace,A.isVideoTexture);be(ee,A);let ke;const ot=A.mipmaps,pt=A.isVideoTexture!==!0,Pt=se.__version===void 0||V===!0,Q=Y.dataReady,ze=b(A,Se);if(A.isDepthTexture)Je=y(A.format===Nl,A.type),Pt&&(pt?t.texStorage2D(r.TEXTURE_2D,1,Je,Se.width,Se.height):t.texImage2D(r.TEXTURE_2D,0,Je,Se.width,Se.height,0,De,nt,null));else if(A.isDataTexture)if(ot.length>0){pt&&Pt&&t.texStorage2D(r.TEXTURE_2D,ze,Je,ot[0].width,ot[0].height);for(let Me=0,Te=ot.length;Me<Te;Me++)ke=ot[Me],pt?Q&&t.texSubImage2D(r.TEXTURE_2D,Me,0,0,ke.width,ke.height,De,nt,ke.data):t.texImage2D(r.TEXTURE_2D,Me,Je,ke.width,ke.height,0,De,nt,ke.data);A.generateMipmaps=!1}else pt?(Pt&&t.texStorage2D(r.TEXTURE_2D,ze,Je,Se.width,Se.height),Q&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,Se.width,Se.height,De,nt,Se.data)):t.texImage2D(r.TEXTURE_2D,0,Je,Se.width,Se.height,0,De,nt,Se.data);else if(A.isCompressedTexture)if(A.isCompressedArrayTexture){pt&&Pt&&t.texStorage3D(r.TEXTURE_2D_ARRAY,ze,Je,ot[0].width,ot[0].height,Se.depth);for(let Me=0,Te=ot.length;Me<Te;Me++)if(ke=ot[Me],A.format!==Ri)if(De!==null)if(pt){if(Q)if(A.layerUpdates.size>0){const We=av(ke.width,ke.height,A.format,A.type);for(const $e of A.layerUpdates){const ht=ke.data.subarray($e*We/ke.data.BYTES_PER_ELEMENT,($e+1)*We/ke.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Me,0,0,$e,ke.width,ke.height,1,De,ht)}A.clearLayerUpdates()}else t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Me,0,0,0,ke.width,ke.height,Se.depth,De,ke.data)}else t.compressedTexImage3D(r.TEXTURE_2D_ARRAY,Me,Je,ke.width,ke.height,Se.depth,0,ke.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else pt?Q&&t.texSubImage3D(r.TEXTURE_2D_ARRAY,Me,0,0,0,ke.width,ke.height,Se.depth,De,nt,ke.data):t.texImage3D(r.TEXTURE_2D_ARRAY,Me,Je,ke.width,ke.height,Se.depth,0,De,nt,ke.data)}else{pt&&Pt&&t.texStorage2D(r.TEXTURE_2D,ze,Je,ot[0].width,ot[0].height);for(let Me=0,Te=ot.length;Me<Te;Me++)ke=ot[Me],A.format!==Ri?De!==null?pt?Q&&t.compressedTexSubImage2D(r.TEXTURE_2D,Me,0,0,ke.width,ke.height,De,ke.data):t.compressedTexImage2D(r.TEXTURE_2D,Me,Je,ke.width,ke.height,0,ke.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):pt?Q&&t.texSubImage2D(r.TEXTURE_2D,Me,0,0,ke.width,ke.height,De,nt,ke.data):t.texImage2D(r.TEXTURE_2D,Me,Je,ke.width,ke.height,0,De,nt,ke.data)}else if(A.isDataArrayTexture)if(pt){if(Pt&&t.texStorage3D(r.TEXTURE_2D_ARRAY,ze,Je,Se.width,Se.height,Se.depth),Q)if(A.layerUpdates.size>0){const Me=av(Se.width,Se.height,A.format,A.type);for(const Te of A.layerUpdates){const We=Se.data.subarray(Te*Me/Se.data.BYTES_PER_ELEMENT,(Te+1)*Me/Se.data.BYTES_PER_ELEMENT);t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,Te,Se.width,Se.height,1,De,nt,We)}A.clearLayerUpdates()}else t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,Se.width,Se.height,Se.depth,De,nt,Se.data)}else t.texImage3D(r.TEXTURE_2D_ARRAY,0,Je,Se.width,Se.height,Se.depth,0,De,nt,Se.data);else if(A.isData3DTexture)pt?(Pt&&t.texStorage3D(r.TEXTURE_3D,ze,Je,Se.width,Se.height,Se.depth),Q&&t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,Se.width,Se.height,Se.depth,De,nt,Se.data)):t.texImage3D(r.TEXTURE_3D,0,Je,Se.width,Se.height,Se.depth,0,De,nt,Se.data);else if(A.isFramebufferTexture){if(Pt)if(pt)t.texStorage2D(r.TEXTURE_2D,ze,Je,Se.width,Se.height);else{let Me=Se.width,Te=Se.height;for(let We=0;We<ze;We++)t.texImage2D(r.TEXTURE_2D,We,Je,Me,Te,0,De,nt,null),Me>>=1,Te>>=1}}else if(ot.length>0){if(pt&&Pt){const Me=j(ot[0]);t.texStorage2D(r.TEXTURE_2D,ze,Je,Me.width,Me.height)}for(let Me=0,Te=ot.length;Me<Te;Me++)ke=ot[Me],pt?Q&&t.texSubImage2D(r.TEXTURE_2D,Me,0,0,De,nt,ke):t.texImage2D(r.TEXTURE_2D,Me,Je,De,nt,ke);A.generateMipmaps=!1}else if(pt){if(Pt){const Me=j(Se);t.texStorage2D(r.TEXTURE_2D,ze,Je,Me.width,Me.height)}Q&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,De,nt,Se)}else t.texImage2D(r.TEXTURE_2D,0,Je,De,nt,Se);g(A)&&m(ee),se.__version=Y.version,A.onUpdate&&A.onUpdate(A)}L.__version=A.version}function K(L,A,Z){if(A.image.length!==6)return;const ee=_e(L,A),V=A.source;t.bindTexture(r.TEXTURE_CUBE_MAP,L.__webglTexture,r.TEXTURE0+Z);const Y=n.get(V);if(V.version!==Y.__version||ee===!0){t.activeTexture(r.TEXTURE0+Z);const se=Ut.getPrimaries(Ut.workingColorSpace),le=A.colorSpace===bs?null:Ut.getPrimaries(A.colorSpace),ce=A.colorSpace===bs||se===le?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,A.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,A.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,A.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,ce);const Ie=A.isCompressedTexture||A.image[0].isCompressedTexture,Se=A.image[0]&&A.image[0].isDataTexture,De=[];for(let Te=0;Te<6;Te++)!Ie&&!Se?De[Te]=v(A.image[Te],!0,i.maxCubemapSize):De[Te]=Se?A.image[Te].image:A.image[Te],De[Te]=oe(A,De[Te]);const nt=De[0],Je=s.convert(A.format,A.colorSpace),ke=s.convert(A.type),ot=x(A.internalFormat,Je,ke,A.colorSpace),pt=A.isVideoTexture!==!0,Pt=Y.__version===void 0||ee===!0,Q=V.dataReady;let ze=b(A,nt);be(r.TEXTURE_CUBE_MAP,A);let Me;if(Ie){pt&&Pt&&t.texStorage2D(r.TEXTURE_CUBE_MAP,ze,ot,nt.width,nt.height);for(let Te=0;Te<6;Te++){Me=De[Te].mipmaps;for(let We=0;We<Me.length;We++){const $e=Me[We];A.format!==Ri?Je!==null?pt?Q&&t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We,0,0,$e.width,$e.height,Je,$e.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We,ot,$e.width,$e.height,0,$e.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):pt?Q&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We,0,0,$e.width,$e.height,Je,ke,$e.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We,ot,$e.width,$e.height,0,Je,ke,$e.data)}}}else{if(Me=A.mipmaps,pt&&Pt){Me.length>0&&ze++;const Te=j(De[0]);t.texStorage2D(r.TEXTURE_CUBE_MAP,ze,ot,Te.width,Te.height)}for(let Te=0;Te<6;Te++)if(Se){pt?Q&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,0,0,De[Te].width,De[Te].height,Je,ke,De[Te].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,ot,De[Te].width,De[Te].height,0,Je,ke,De[Te].data);for(let We=0;We<Me.length;We++){const ht=Me[We].image[Te].image;pt?Q&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We+1,0,0,ht.width,ht.height,Je,ke,ht.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We+1,ot,ht.width,ht.height,0,Je,ke,ht.data)}}else{pt?Q&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,0,0,Je,ke,De[Te]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,0,ot,Je,ke,De[Te]);for(let We=0;We<Me.length;We++){const $e=Me[We];pt?Q&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We+1,0,0,Je,ke,$e.image[Te]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+Te,We+1,ot,Je,ke,$e.image[Te])}}}g(A)&&m(r.TEXTURE_CUBE_MAP),Y.__version=V.version,A.onUpdate&&A.onUpdate(A)}L.__version=A.version}function ge(L,A,Z,ee,V,Y){const se=s.convert(Z.format,Z.colorSpace),le=s.convert(Z.type),ce=x(Z.internalFormat,se,le,Z.colorSpace),Ie=n.get(A),Se=n.get(Z);if(Se.__renderTarget=A,!Ie.__hasExternalTextures){const De=Math.max(1,A.width>>Y),nt=Math.max(1,A.height>>Y);V===r.TEXTURE_3D||V===r.TEXTURE_2D_ARRAY?t.texImage3D(V,Y,ce,De,nt,A.depth,0,se,le,null):t.texImage2D(V,Y,ce,De,nt,0,se,le,null)}t.bindFramebuffer(r.FRAMEBUFFER,L),F(A)?o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,ee,V,Se.__webglTexture,0,ie(A)):(V===r.TEXTURE_2D||V>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&V<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,ee,V,Se.__webglTexture,Y),t.bindFramebuffer(r.FRAMEBUFFER,null)}function J(L,A,Z){if(r.bindRenderbuffer(r.RENDERBUFFER,L),A.depthBuffer){const ee=A.depthTexture,V=ee&&ee.isDepthTexture?ee.type:null,Y=y(A.stencilBuffer,V),se=A.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,le=ie(A);F(A)?o.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,le,Y,A.width,A.height):Z?r.renderbufferStorageMultisample(r.RENDERBUFFER,le,Y,A.width,A.height):r.renderbufferStorage(r.RENDERBUFFER,Y,A.width,A.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,se,r.RENDERBUFFER,L)}else{const ee=A.textures;for(let V=0;V<ee.length;V++){const Y=ee[V],se=s.convert(Y.format,Y.colorSpace),le=s.convert(Y.type),ce=x(Y.internalFormat,se,le,Y.colorSpace),Ie=ie(A);Z&&F(A)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,Ie,ce,A.width,A.height):F(A)?o.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Ie,ce,A.width,A.height):r.renderbufferStorage(r.RENDERBUFFER,ce,A.width,A.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function ue(L,A){if(A&&A.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,L),!(A.depthTexture&&A.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const ee=n.get(A.depthTexture);ee.__renderTarget=A,(!ee.__webglTexture||A.depthTexture.image.width!==A.width||A.depthTexture.image.height!==A.height)&&(A.depthTexture.image.width=A.width,A.depthTexture.image.height=A.height,A.depthTexture.needsUpdate=!0),G(A.depthTexture,0);const V=ee.__webglTexture,Y=ie(A);if(A.depthTexture.format===Dl)F(A)?o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,V,0,Y):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,V,0);else if(A.depthTexture.format===Nl)F(A)?o.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,V,0,Y):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,V,0);else throw new Error("Unknown depthTexture format")}function Ce(L){const A=n.get(L),Z=L.isWebGLCubeRenderTarget===!0;if(A.__boundDepthTexture!==L.depthTexture){const ee=L.depthTexture;if(A.__depthDisposeCallback&&A.__depthDisposeCallback(),ee){const V=()=>{delete A.__boundDepthTexture,delete A.__depthDisposeCallback,ee.removeEventListener("dispose",V)};ee.addEventListener("dispose",V),A.__depthDisposeCallback=V}A.__boundDepthTexture=ee}if(L.depthTexture&&!A.__autoAllocateDepthBuffer){if(Z)throw new Error("target.depthTexture not supported in Cube render targets");const ee=L.texture.mipmaps;ee&&ee.length>0?ue(A.__webglFramebuffer[0],L):ue(A.__webglFramebuffer,L)}else if(Z){A.__webglDepthbuffer=[];for(let ee=0;ee<6;ee++)if(t.bindFramebuffer(r.FRAMEBUFFER,A.__webglFramebuffer[ee]),A.__webglDepthbuffer[ee]===void 0)A.__webglDepthbuffer[ee]=r.createRenderbuffer(),J(A.__webglDepthbuffer[ee],L,!1);else{const V=L.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Y=A.__webglDepthbuffer[ee];r.bindRenderbuffer(r.RENDERBUFFER,Y),r.framebufferRenderbuffer(r.FRAMEBUFFER,V,r.RENDERBUFFER,Y)}}else{const ee=L.texture.mipmaps;if(ee&&ee.length>0?t.bindFramebuffer(r.FRAMEBUFFER,A.__webglFramebuffer[0]):t.bindFramebuffer(r.FRAMEBUFFER,A.__webglFramebuffer),A.__webglDepthbuffer===void 0)A.__webglDepthbuffer=r.createRenderbuffer(),J(A.__webglDepthbuffer,L,!1);else{const V=L.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Y=A.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,Y),r.framebufferRenderbuffer(r.FRAMEBUFFER,V,r.RENDERBUFFER,Y)}}t.bindFramebuffer(r.FRAMEBUFFER,null)}function Ee(L,A,Z){const ee=n.get(L);A!==void 0&&ge(ee.__webglFramebuffer,L,L.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),Z!==void 0&&Ce(L)}function Ue(L){const A=L.texture,Z=n.get(L),ee=n.get(A);L.addEventListener("dispose",w);const V=L.textures,Y=L.isWebGLCubeRenderTarget===!0,se=V.length>1;if(se||(ee.__webglTexture===void 0&&(ee.__webglTexture=r.createTexture()),ee.__version=A.version,a.memory.textures++),Y){Z.__webglFramebuffer=[];for(let le=0;le<6;le++)if(A.mipmaps&&A.mipmaps.length>0){Z.__webglFramebuffer[le]=[];for(let ce=0;ce<A.mipmaps.length;ce++)Z.__webglFramebuffer[le][ce]=r.createFramebuffer()}else Z.__webglFramebuffer[le]=r.createFramebuffer()}else{if(A.mipmaps&&A.mipmaps.length>0){Z.__webglFramebuffer=[];for(let le=0;le<A.mipmaps.length;le++)Z.__webglFramebuffer[le]=r.createFramebuffer()}else Z.__webglFramebuffer=r.createFramebuffer();if(se)for(let le=0,ce=V.length;le<ce;le++){const Ie=n.get(V[le]);Ie.__webglTexture===void 0&&(Ie.__webglTexture=r.createTexture(),a.memory.textures++)}if(L.samples>0&&F(L)===!1){Z.__webglMultisampledFramebuffer=r.createFramebuffer(),Z.__webglColorRenderbuffer=[],t.bindFramebuffer(r.FRAMEBUFFER,Z.__webglMultisampledFramebuffer);for(let le=0;le<V.length;le++){const ce=V[le];Z.__webglColorRenderbuffer[le]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,Z.__webglColorRenderbuffer[le]);const Ie=s.convert(ce.format,ce.colorSpace),Se=s.convert(ce.type),De=x(ce.internalFormat,Ie,Se,ce.colorSpace,L.isXRRenderTarget===!0),nt=ie(L);r.renderbufferStorageMultisample(r.RENDERBUFFER,nt,De,L.width,L.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+le,r.RENDERBUFFER,Z.__webglColorRenderbuffer[le])}r.bindRenderbuffer(r.RENDERBUFFER,null),L.depthBuffer&&(Z.__webglDepthRenderbuffer=r.createRenderbuffer(),J(Z.__webglDepthRenderbuffer,L,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}}if(Y){t.bindTexture(r.TEXTURE_CUBE_MAP,ee.__webglTexture),be(r.TEXTURE_CUBE_MAP,A);for(let le=0;le<6;le++)if(A.mipmaps&&A.mipmaps.length>0)for(let ce=0;ce<A.mipmaps.length;ce++)ge(Z.__webglFramebuffer[le][ce],L,A,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+le,ce);else ge(Z.__webglFramebuffer[le],L,A,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+le,0);g(A)&&m(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(se){for(let le=0,ce=V.length;le<ce;le++){const Ie=V[le],Se=n.get(Ie);t.bindTexture(r.TEXTURE_2D,Se.__webglTexture),be(r.TEXTURE_2D,Ie),ge(Z.__webglFramebuffer,L,Ie,r.COLOR_ATTACHMENT0+le,r.TEXTURE_2D,0),g(Ie)&&m(r.TEXTURE_2D)}t.unbindTexture()}else{let le=r.TEXTURE_2D;if((L.isWebGL3DRenderTarget||L.isWebGLArrayRenderTarget)&&(le=L.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),t.bindTexture(le,ee.__webglTexture),be(le,A),A.mipmaps&&A.mipmaps.length>0)for(let ce=0;ce<A.mipmaps.length;ce++)ge(Z.__webglFramebuffer[ce],L,A,r.COLOR_ATTACHMENT0,le,ce);else ge(Z.__webglFramebuffer,L,A,r.COLOR_ATTACHMENT0,le,0);g(A)&&m(le),t.unbindTexture()}L.depthBuffer&&Ce(L)}function xe(L){const A=L.textures;for(let Z=0,ee=A.length;Z<ee;Z++){const V=A[Z];if(g(V)){const Y=_(L),se=n.get(V).__webglTexture;t.bindTexture(Y,se),m(Y),t.unbindTexture()}}}const ye=[],N=[];function pe(L){if(L.samples>0){if(F(L)===!1){const A=L.textures,Z=L.width,ee=L.height;let V=r.COLOR_BUFFER_BIT;const Y=L.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,se=n.get(L),le=A.length>1;if(le)for(let Ie=0;Ie<A.length;Ie++)t.bindFramebuffer(r.FRAMEBUFFER,se.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.RENDERBUFFER,null),t.bindFramebuffer(r.FRAMEBUFFER,se.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.TEXTURE_2D,null,0);t.bindFramebuffer(r.READ_FRAMEBUFFER,se.__webglMultisampledFramebuffer);const ce=L.texture.mipmaps;ce&&ce.length>0?t.bindFramebuffer(r.DRAW_FRAMEBUFFER,se.__webglFramebuffer[0]):t.bindFramebuffer(r.DRAW_FRAMEBUFFER,se.__webglFramebuffer);for(let Ie=0;Ie<A.length;Ie++){if(L.resolveDepthBuffer&&(L.depthBuffer&&(V|=r.DEPTH_BUFFER_BIT),L.stencilBuffer&&L.resolveStencilBuffer&&(V|=r.STENCIL_BUFFER_BIT)),le){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,se.__webglColorRenderbuffer[Ie]);const Se=n.get(A[Ie]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,Se,0)}r.blitFramebuffer(0,0,Z,ee,0,0,Z,ee,V,r.NEAREST),l===!0&&(ye.length=0,N.length=0,ye.push(r.COLOR_ATTACHMENT0+Ie),L.depthBuffer&&L.resolveDepthBuffer===!1&&(ye.push(Y),N.push(Y),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,N)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,ye))}if(t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),le)for(let Ie=0;Ie<A.length;Ie++){t.bindFramebuffer(r.FRAMEBUFFER,se.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.RENDERBUFFER,se.__webglColorRenderbuffer[Ie]);const Se=n.get(A[Ie]).__webglTexture;t.bindFramebuffer(r.FRAMEBUFFER,se.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Ie,r.TEXTURE_2D,Se,0)}t.bindFramebuffer(r.DRAW_FRAMEBUFFER,se.__webglMultisampledFramebuffer)}else if(L.depthBuffer&&L.resolveDepthBuffer===!1&&l){const A=L.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[A])}}}function ie(L){return Math.min(i.maxSamples,L.samples)}function F(L){const A=n.get(L);return L.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&A.__useRenderToTexture!==!1}function I(L){const A=a.render.frame;u.get(L)!==A&&(u.set(L,A),L.update())}function oe(L,A){const Z=L.colorSpace,ee=L.format,V=L.type;return L.isCompressedTexture===!0||L.isVideoTexture===!0||Z!==ai&&Z!==bs&&(Ut.getTransfer(Z)===sn?(ee!==Ri||V!==Ur)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",Z)),A}function j(L){return typeof HTMLImageElement<"u"&&L instanceof HTMLImageElement?(c.width=L.naturalWidth||L.width,c.height=L.naturalHeight||L.height):typeof VideoFrame<"u"&&L instanceof VideoFrame?(c.width=L.displayWidth,c.height=L.displayHeight):(c.width=L.width,c.height=L.height),c}this.allocateTextureUnit=D,this.resetTextureUnits=H,this.setTexture2D=G,this.setTexture2DArray=P,this.setTexture3D=z,this.setTextureCube=W,this.rebindTextures=Ee,this.setupRenderTarget=Ue,this.updateRenderTargetMipmap=xe,this.updateMultisampleRenderTarget=pe,this.setupDepthRenderbuffer=Ce,this.setupFrameBufferTexture=ge,this.useMultisampledRTT=F}function v1(r,e){function t(n,i=bs){let s;const a=Ut.getTransfer(i);if(n===Ur)return r.UNSIGNED_BYTE;if(n===lp)return r.UNSIGNED_SHORT_4_4_4_4;if(n===cp)return r.UNSIGNED_SHORT_5_5_5_1;if(n===zv)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===Uv)return r.BYTE;if(n===Bv)return r.SHORT;if(n===Pl)return r.UNSIGNED_SHORT;if(n===op)return r.INT;if(n===Is)return r.UNSIGNED_INT;if(n===zi)return r.FLOAT;if(n===_o)return r.HALF_FLOAT;if(n===kv)return r.ALPHA;if(n===Vv)return r.RGB;if(n===Ri)return r.RGBA;if(n===Dl)return r.DEPTH_COMPONENT;if(n===Nl)return r.DEPTH_STENCIL;if(n===up)return r.RED;if(n===Zu)return r.RED_INTEGER;if(n===Hv)return r.RG;if(n===hp)return r.RG_INTEGER;if(n===dp)return r.RGBA_INTEGER;if(n===Zc||n===Yc||n===jc||n===Jc)if(a===sn)if(s=e.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===Zc)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Yc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===jc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===Jc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=e.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===Zc)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Yc)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===jc)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Jc)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===rf||n===sf||n===af||n===of)if(s=e.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===rf)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===sf)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===af)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===of)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===lf||n===cf||n===uf)if(s=e.get("WEBGL_compressed_texture_etc"),s!==null){if(n===lf||n===cf)return a===sn?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===uf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===hf||n===df||n===ff||n===pf||n===mf||n===gf||n===vf||n===_f||n===yf||n===xf||n===Mf||n===bf||n===Sf||n===wf)if(s=e.get("WEBGL_compressed_texture_astc"),s!==null){if(n===hf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===df)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===ff)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===pf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===mf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===gf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===vf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===_f)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===yf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===xf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Mf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===bf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Sf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===wf)return a===sn?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===Kc||n===Tf||n===Ef)if(s=e.get("EXT_texture_compression_bptc"),s!==null){if(n===Kc)return a===sn?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Tf)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Ef)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===Gv||n===Af||n===Cf||n===Rf)if(s=e.get("EXT_texture_compression_rgtc"),s!==null){if(n===Kc)return s.COMPRESSED_RED_RGTC1_EXT;if(n===Af)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Cf)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Rf)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===Il?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:t}}const a3=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,o3=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class l3{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const i=new Vn,s=e.properties.get(i);s.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new Pi({vertexShader:a3,fragmentShader:o3,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new Mn(new Dp(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}let c3=class extends ss{constructor(e,t){super();const n=this;let i=null,s=1,a=null,o="local-floor",l=1,c=null,u=null,h=null,d=null,f=null,p=null;const v=new l3,g=t.getContextAttributes();let m=null,_=null;const x=[],y=[],b=new Pe;let M=null;const w=new Hn;w.viewport=new Ht;const C=new Hn;C.viewport=new Ht;const T=[w,C],S=new s1;let R=null,H=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function($){let K=x[$];return K===void 0&&(K=new zd,x[$]=K),K.getTargetRaySpace()},this.getControllerGrip=function($){let K=x[$];return K===void 0&&(K=new zd,x[$]=K),K.getGripSpace()},this.getHand=function($){let K=x[$];return K===void 0&&(K=new zd,x[$]=K),K.getHandSpace()};function D($){const K=y.indexOf($.inputSource);if(K===-1)return;const ge=x[K];ge!==void 0&&(ge.update($.inputSource,$.frame,c||a),ge.dispatchEvent({type:$.type,data:$.inputSource}))}function O(){i.removeEventListener("select",D),i.removeEventListener("selectstart",D),i.removeEventListener("selectend",D),i.removeEventListener("squeeze",D),i.removeEventListener("squeezestart",D),i.removeEventListener("squeezeend",D),i.removeEventListener("end",O),i.removeEventListener("inputsourceschange",G);for(let $=0;$<x.length;$++){const K=y[$];K!==null&&(y[$]=null,x[$].disconnect(K))}R=null,H=null,v.reset(),e.setRenderTarget(m),f=null,d=null,h=null,i=null,_=null,_e.stop(),n.isPresenting=!1,e.setPixelRatio(M),e.setSize(b.width,b.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function($){s=$,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function($){o=$,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||a},this.setReferenceSpace=function($){c=$},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function($){if(i=$,i!==null){if(m=e.getRenderTarget(),i.addEventListener("select",D),i.addEventListener("selectstart",D),i.addEventListener("selectend",D),i.addEventListener("squeeze",D),i.addEventListener("squeezestart",D),i.addEventListener("squeezeend",D),i.addEventListener("end",O),i.addEventListener("inputsourceschange",G),g.xrCompatible!==!0&&await t.makeXRCompatible(),M=e.getPixelRatio(),e.getSize(b),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let ge=null,J=null,ue=null;g.depth&&(ue=g.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,ge=g.stencil?Nl:Dl,J=g.stencil?Il:Is);const Ce={colorFormat:t.RGBA8,depthFormat:ue,scaleFactor:s};h=new XRWebGLBinding(i,t),d=h.createProjectionLayer(Ce),i.updateRenderState({layers:[d]}),e.setPixelRatio(1),e.setSize(d.textureWidth,d.textureHeight,!1),_=new ts(d.textureWidth,d.textureHeight,{format:Ri,type:Ur,depthTexture:new Ep(d.textureWidth,d.textureHeight,J,void 0,void 0,void 0,void 0,void 0,void 0,ge),stencilBuffer:g.stencil,colorSpace:e.outputColorSpace,samples:g.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1,resolveStencilBuffer:d.ignoreDepthValues===!1})}else{const ge={antialias:g.antialias,alpha:!0,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(i,t,ge),i.updateRenderState({baseLayer:f}),e.setPixelRatio(1),e.setSize(f.framebufferWidth,f.framebufferHeight,!1),_=new ts(f.framebufferWidth,f.framebufferHeight,{format:Ri,type:Ur,colorSpace:e.outputColorSpace,stencilBuffer:g.stencil,resolveDepthBuffer:f.ignoreDepthValues===!1,resolveStencilBuffer:f.ignoreDepthValues===!1})}_.isXRRenderTarget=!0,this.setFoveation(l),c=null,a=await i.requestReferenceSpace(o),_e.setContext(i),_e.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return v.getDepthTexture()};function G($){for(let K=0;K<$.removed.length;K++){const ge=$.removed[K],J=y.indexOf(ge);J>=0&&(y[J]=null,x[J].disconnect(ge))}for(let K=0;K<$.added.length;K++){const ge=$.added[K];let J=y.indexOf(ge);if(J===-1){for(let Ce=0;Ce<x.length;Ce++)if(Ce>=y.length){y.push(ge),J=Ce;break}else if(y[Ce]===null){y[Ce]=ge,J=Ce;break}if(J===-1)break}const ue=x[J];ue&&ue.connect(ge)}}const P=new k,z=new k;function W($,K,ge){P.setFromMatrixPosition(K.matrixWorld),z.setFromMatrixPosition(ge.matrixWorld);const J=P.distanceTo(z),ue=K.projectionMatrix.elements,Ce=ge.projectionMatrix.elements,Ee=ue[14]/(ue[10]-1),Ue=ue[14]/(ue[10]+1),xe=(ue[9]+1)/ue[5],ye=(ue[9]-1)/ue[5],N=(ue[8]-1)/ue[0],pe=(Ce[8]+1)/Ce[0],ie=Ee*N,F=Ee*pe,I=J/(-N+pe),oe=I*-N;if(K.matrixWorld.decompose($.position,$.quaternion,$.scale),$.translateX(oe),$.translateZ(I),$.matrixWorld.compose($.position,$.quaternion,$.scale),$.matrixWorldInverse.copy($.matrixWorld).invert(),ue[10]===-1)$.projectionMatrix.copy(K.projectionMatrix),$.projectionMatrixInverse.copy(K.projectionMatrixInverse);else{const j=Ee+I,L=Ue+I,A=ie-oe,Z=F+(J-oe),ee=xe*Ue/L*j,V=ye*Ue/L*j;$.projectionMatrix.makePerspective(A,Z,ee,V,j,L),$.projectionMatrixInverse.copy($.projectionMatrix).invert()}}function X($,K){K===null?$.matrixWorld.copy($.matrix):$.matrixWorld.multiplyMatrices(K.matrixWorld,$.matrix),$.matrixWorldInverse.copy($.matrixWorld).invert()}this.updateCamera=function($){if(i===null)return;let K=$.near,ge=$.far;v.texture!==null&&(v.depthNear>0&&(K=v.depthNear),v.depthFar>0&&(ge=v.depthFar)),S.near=C.near=w.near=K,S.far=C.far=w.far=ge,(R!==S.near||H!==S.far)&&(i.updateRenderState({depthNear:S.near,depthFar:S.far}),R=S.near,H=S.far),w.layers.mask=$.layers.mask|2,C.layers.mask=$.layers.mask|4,S.layers.mask=w.layers.mask|C.layers.mask;const J=$.parent,ue=S.cameras;X(S,J);for(let Ce=0;Ce<ue.length;Ce++)X(ue[Ce],J);ue.length===2?W(S,w,C):S.projectionMatrix.copy(w.projectionMatrix),re($,S,J)};function re($,K,ge){ge===null?$.matrix.copy(K.matrixWorld):($.matrix.copy(ge.matrixWorld),$.matrix.invert(),$.matrix.multiply(K.matrixWorld)),$.matrix.decompose($.position,$.quaternion,$.scale),$.updateMatrixWorld(!0),$.projectionMatrix.copy(K.projectionMatrix),$.projectionMatrixInverse.copy(K.projectionMatrixInverse),$.isPerspectiveCamera&&($.fov=Ul*2*Math.atan(1/$.projectionMatrix.elements[5]),$.zoom=1)}this.getCamera=function(){return S},this.getFoveation=function(){if(!(d===null&&f===null))return l},this.setFoveation=function($){l=$,d!==null&&(d.fixedFoveation=$),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=$)},this.hasDepthSensing=function(){return v.texture!==null},this.getDepthSensingMesh=function(){return v.getMesh(S)};let ne=null;function be($,K){if(u=K.getViewerPose(c||a),p=K,u!==null){const ge=u.views;f!==null&&(e.setRenderTargetFramebuffer(_,f.framebuffer),e.setRenderTarget(_));let J=!1;ge.length!==S.cameras.length&&(S.cameras.length=0,J=!0);for(let Ee=0;Ee<ge.length;Ee++){const Ue=ge[Ee];let xe=null;if(f!==null)xe=f.getViewport(Ue);else{const N=h.getViewSubImage(d,Ue);xe=N.viewport,Ee===0&&(e.setRenderTargetTextures(_,N.colorTexture,N.depthStencilTexture),e.setRenderTarget(_))}let ye=T[Ee];ye===void 0&&(ye=new Hn,ye.layers.enable(Ee),ye.viewport=new Ht,T[Ee]=ye),ye.matrix.fromArray(Ue.transform.matrix),ye.matrix.decompose(ye.position,ye.quaternion,ye.scale),ye.projectionMatrix.fromArray(Ue.projectionMatrix),ye.projectionMatrixInverse.copy(ye.projectionMatrix).invert(),ye.viewport.set(xe.x,xe.y,xe.width,xe.height),Ee===0&&(S.matrix.copy(ye.matrix),S.matrix.decompose(S.position,S.quaternion,S.scale)),J===!0&&S.cameras.push(ye)}const ue=i.enabledFeatures;if(ue&&ue.includes("depth-sensing")&&i.depthUsage=="gpu-optimized"&&h){const Ee=h.getDepthInformation(ge[0]);Ee&&Ee.isValid&&Ee.texture&&v.init(e,Ee,i.renderState)}}for(let ge=0;ge<x.length;ge++){const J=y[ge],ue=x[ge];J!==null&&ue!==void 0&&ue.update(J,K,c||a)}ne&&ne($,K),K.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:K}),p=null}const _e=new d1;_e.setAnimationLoop(be),this.setAnimationLoop=function($){ne=$},this.dispose=function(){}}};const Ba=new Vi,u3=new ft;function h3(r,e){function t(g,m){g.matrixAutoUpdate===!0&&g.updateMatrix(),m.value.copy(g.matrix)}function n(g,m){m.color.getRGB(g.fogColor.value,fS(r)),m.isFog?(g.fogNear.value=m.near,g.fogFar.value=m.far):m.isFogExp2&&(g.fogDensity.value=m.density)}function i(g,m,_,x,y){m.isMeshBasicMaterial||m.isMeshLambertMaterial?s(g,m):m.isMeshToonMaterial?(s(g,m),h(g,m)):m.isMeshPhongMaterial?(s(g,m),u(g,m)):m.isMeshStandardMaterial?(s(g,m),d(g,m),m.isMeshPhysicalMaterial&&f(g,m,y)):m.isMeshMatcapMaterial?(s(g,m),p(g,m)):m.isMeshDepthMaterial?s(g,m):m.isMeshDistanceMaterial?(s(g,m),v(g,m)):m.isMeshNormalMaterial?s(g,m):m.isLineBasicMaterial?(a(g,m),m.isLineDashedMaterial&&o(g,m)):m.isPointsMaterial?l(g,m,_,x):m.isSpriteMaterial?c(g,m):m.isShadowMaterial?(g.color.value.copy(m.color),g.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function s(g,m){g.opacity.value=m.opacity,m.color&&g.diffuse.value.copy(m.color),m.emissive&&g.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(g.map.value=m.map,t(m.map,g.mapTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,t(m.alphaMap,g.alphaMapTransform)),m.bumpMap&&(g.bumpMap.value=m.bumpMap,t(m.bumpMap,g.bumpMapTransform),g.bumpScale.value=m.bumpScale,m.side===gi&&(g.bumpScale.value*=-1)),m.normalMap&&(g.normalMap.value=m.normalMap,t(m.normalMap,g.normalMapTransform),g.normalScale.value.copy(m.normalScale),m.side===gi&&g.normalScale.value.negate()),m.displacementMap&&(g.displacementMap.value=m.displacementMap,t(m.displacementMap,g.displacementMapTransform),g.displacementScale.value=m.displacementScale,g.displacementBias.value=m.displacementBias),m.emissiveMap&&(g.emissiveMap.value=m.emissiveMap,t(m.emissiveMap,g.emissiveMapTransform)),m.specularMap&&(g.specularMap.value=m.specularMap,t(m.specularMap,g.specularMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest);const _=e.get(m),x=_.envMap,y=_.envMapRotation;x&&(g.envMap.value=x,Ba.copy(y),Ba.x*=-1,Ba.y*=-1,Ba.z*=-1,x.isCubeTexture&&x.isRenderTargetTexture===!1&&(Ba.y*=-1,Ba.z*=-1),g.envMapRotation.value.setFromMatrix4(u3.makeRotationFromEuler(Ba)),g.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,g.reflectivity.value=m.reflectivity,g.ior.value=m.ior,g.refractionRatio.value=m.refractionRatio),m.lightMap&&(g.lightMap.value=m.lightMap,g.lightMapIntensity.value=m.lightMapIntensity,t(m.lightMap,g.lightMapTransform)),m.aoMap&&(g.aoMap.value=m.aoMap,g.aoMapIntensity.value=m.aoMapIntensity,t(m.aoMap,g.aoMapTransform))}function a(g,m){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,m.map&&(g.map.value=m.map,t(m.map,g.mapTransform))}function o(g,m){g.dashSize.value=m.dashSize,g.totalSize.value=m.dashSize+m.gapSize,g.scale.value=m.scale}function l(g,m,_,x){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,g.size.value=m.size*_,g.scale.value=x*.5,m.map&&(g.map.value=m.map,t(m.map,g.uvTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,t(m.alphaMap,g.alphaMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest)}function c(g,m){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,g.rotation.value=m.rotation,m.map&&(g.map.value=m.map,t(m.map,g.mapTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,t(m.alphaMap,g.alphaMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest)}function u(g,m){g.specular.value.copy(m.specular),g.shininess.value=Math.max(m.shininess,1e-4)}function h(g,m){m.gradientMap&&(g.gradientMap.value=m.gradientMap)}function d(g,m){g.metalness.value=m.metalness,m.metalnessMap&&(g.metalnessMap.value=m.metalnessMap,t(m.metalnessMap,g.metalnessMapTransform)),g.roughness.value=m.roughness,m.roughnessMap&&(g.roughnessMap.value=m.roughnessMap,t(m.roughnessMap,g.roughnessMapTransform)),m.envMap&&(g.envMapIntensity.value=m.envMapIntensity)}function f(g,m,_){g.ior.value=m.ior,m.sheen>0&&(g.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),g.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(g.sheenColorMap.value=m.sheenColorMap,t(m.sheenColorMap,g.sheenColorMapTransform)),m.sheenRoughnessMap&&(g.sheenRoughnessMap.value=m.sheenRoughnessMap,t(m.sheenRoughnessMap,g.sheenRoughnessMapTransform))),m.clearcoat>0&&(g.clearcoat.value=m.clearcoat,g.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(g.clearcoatMap.value=m.clearcoatMap,t(m.clearcoatMap,g.clearcoatMapTransform)),m.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap,t(m.clearcoatRoughnessMap,g.clearcoatRoughnessMapTransform)),m.clearcoatNormalMap&&(g.clearcoatNormalMap.value=m.clearcoatNormalMap,t(m.clearcoatNormalMap,g.clearcoatNormalMapTransform),g.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),m.side===gi&&g.clearcoatNormalScale.value.negate())),m.dispersion>0&&(g.dispersion.value=m.dispersion),m.iridescence>0&&(g.iridescence.value=m.iridescence,g.iridescenceIOR.value=m.iridescenceIOR,g.iridescenceThicknessMinimum.value=m.iridescenceThicknessRange[0],g.iridescenceThicknessMaximum.value=m.iridescenceThicknessRange[1],m.iridescenceMap&&(g.iridescenceMap.value=m.iridescenceMap,t(m.iridescenceMap,g.iridescenceMapTransform)),m.iridescenceThicknessMap&&(g.iridescenceThicknessMap.value=m.iridescenceThicknessMap,t(m.iridescenceThicknessMap,g.iridescenceThicknessMapTransform))),m.transmission>0&&(g.transmission.value=m.transmission,g.transmissionSamplerMap.value=_.texture,g.transmissionSamplerSize.value.set(_.width,_.height),m.transmissionMap&&(g.transmissionMap.value=m.transmissionMap,t(m.transmissionMap,g.transmissionMapTransform)),g.thickness.value=m.thickness,m.thicknessMap&&(g.thicknessMap.value=m.thicknessMap,t(m.thicknessMap,g.thicknessMapTransform)),g.attenuationDistance.value=m.attenuationDistance,g.attenuationColor.value.copy(m.attenuationColor)),m.anisotropy>0&&(g.anisotropyVector.value.set(m.anisotropy*Math.cos(m.anisotropyRotation),m.anisotropy*Math.sin(m.anisotropyRotation)),m.anisotropyMap&&(g.anisotropyMap.value=m.anisotropyMap,t(m.anisotropyMap,g.anisotropyMapTransform))),g.specularIntensity.value=m.specularIntensity,g.specularColor.value.copy(m.specularColor),m.specularColorMap&&(g.specularColorMap.value=m.specularColorMap,t(m.specularColorMap,g.specularColorMapTransform)),m.specularIntensityMap&&(g.specularIntensityMap.value=m.specularIntensityMap,t(m.specularIntensityMap,g.specularIntensityMapTransform))}function p(g,m){m.matcap&&(g.matcap.value=m.matcap)}function v(g,m){const _=e.get(m).light;g.referencePosition.value.setFromMatrixPosition(_.matrixWorld),g.nearDistance.value=_.shadow.camera.near,g.farDistance.value=_.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function d3(r,e,t,n){let i={},s={},a=[];const o=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function l(_,x){const y=x.program;n.uniformBlockBinding(_,y)}function c(_,x){let y=i[_.id];y===void 0&&(p(_),y=u(_),i[_.id]=y,_.addEventListener("dispose",g));const b=x.program;n.updateUBOMapping(_,b);const M=e.render.frame;s[_.id]!==M&&(d(_),s[_.id]=M)}function u(_){const x=h();_.__bindingPointIndex=x;const y=r.createBuffer(),b=_.__size,M=_.usage;return r.bindBuffer(r.UNIFORM_BUFFER,y),r.bufferData(r.UNIFORM_BUFFER,b,M),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,x,y),y}function h(){for(let _=0;_<o;_++)if(a.indexOf(_)===-1)return a.push(_),_;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(_){const x=i[_.id],y=_.uniforms,b=_.__cache;r.bindBuffer(r.UNIFORM_BUFFER,x);for(let M=0,w=y.length;M<w;M++){const C=Array.isArray(y[M])?y[M]:[y[M]];for(let T=0,S=C.length;T<S;T++){const R=C[T];if(f(R,M,T,b)===!0){const H=R.__offset,D=Array.isArray(R.value)?R.value:[R.value];let O=0;for(let G=0;G<D.length;G++){const P=D[G],z=v(P);typeof P=="number"||typeof P=="boolean"?(R.__data[0]=P,r.bufferSubData(r.UNIFORM_BUFFER,H+O,R.__data)):P.isMatrix3?(R.__data[0]=P.elements[0],R.__data[1]=P.elements[1],R.__data[2]=P.elements[2],R.__data[3]=0,R.__data[4]=P.elements[3],R.__data[5]=P.elements[4],R.__data[6]=P.elements[5],R.__data[7]=0,R.__data[8]=P.elements[6],R.__data[9]=P.elements[7],R.__data[10]=P.elements[8],R.__data[11]=0):(P.toArray(R.__data,O),O+=z.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,H,R.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function f(_,x,y,b){const M=_.value,w=x+"_"+y;if(b[w]===void 0)return typeof M=="number"||typeof M=="boolean"?b[w]=M:b[w]=M.clone(),!0;{const C=b[w];if(typeof M=="number"||typeof M=="boolean"){if(C!==M)return b[w]=M,!0}else if(C.equals(M)===!1)return C.copy(M),!0}return!1}function p(_){const x=_.uniforms;let y=0;const b=16;for(let w=0,C=x.length;w<C;w++){const T=Array.isArray(x[w])?x[w]:[x[w]];for(let S=0,R=T.length;S<R;S++){const H=T[S],D=Array.isArray(H.value)?H.value:[H.value];for(let O=0,G=D.length;O<G;O++){const P=D[O],z=v(P),W=y%b,X=W%z.boundary,re=W+X;y+=X,re!==0&&b-re<z.storage&&(y+=b-re),H.__data=new Float32Array(z.storage/Float32Array.BYTES_PER_ELEMENT),H.__offset=y,y+=z.storage}}}const M=y%b;return M>0&&(y+=b-M),_.__size=y,_.__cache={},this}function v(_){const x={boundary:0,storage:0};return typeof _=="number"||typeof _=="boolean"?(x.boundary=4,x.storage=4):_.isVector2?(x.boundary=8,x.storage=8):_.isVector3||_.isColor?(x.boundary=16,x.storage=12):_.isVector4?(x.boundary=16,x.storage=16):_.isMatrix3?(x.boundary=48,x.storage=48):_.isMatrix4?(x.boundary=64,x.storage=64):_.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",_),x}function g(_){const x=_.target;x.removeEventListener("dispose",g);const y=a.indexOf(x.__bindingPointIndex);a.splice(y,1),r.deleteBuffer(i[x.id]),delete i[x.id],delete s[x.id]}function m(){for(const _ in i)r.deleteBuffer(i[_]);a=[],i={},s={}}return{bind:l,update:c,dispose:m}}let _1=class{constructor(e={}){const{canvas:t=sS(),context:n=null,depth:i=!0,stencil:s=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:u="default",failIfMajorPerformanceCaveat:h=!1,reverseDepthBuffer:d=!1}=e;this.isWebGLRenderer=!0;let f;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");f=n.getContextAttributes().alpha}else f=a;const p=new Uint32Array(4),v=new Int32Array(4);let g=null,m=null;const _=[],x=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=Rs,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const y=this;let b=!1;this._outputColorSpace=In;let M=0,w=0,C=null,T=-1,S=null;const R=new Ht,H=new Ht;let D=null;const O=new Ye(0);let G=0,P=t.width,z=t.height,W=1,X=null,re=null;const ne=new Ht(0,0,P,z),be=new Ht(0,0,P,z);let _e=!1;const $=new Kl;let K=!1,ge=!1;const J=new ft,ue=new ft,Ce=new k,Ee=new Ht,Ue={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let xe=!1;function ye(){return C===null?W:1}let N=n;function pe(B,te){return t.getContext(B,te)}try{const B={alpha:!0,depth:i,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:h};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${rp}`),t.addEventListener("webglcontextlost",Te,!1),t.addEventListener("webglcontextrestored",We,!1),t.addEventListener("webglcontextcreationerror",$e,!1),N===null){const te="webgl2";if(N=pe(te,B),N===null)throw pe(te)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(B){throw console.error("THREE.WebGLRenderer: "+B.message),B}let ie,F,I,oe,j,L,A,Z,ee,V,Y,se,le,ce,Ie,Se,De,nt,Je,ke,ot,pt,Pt,Q;function ze(){ie=new wP(N),ie.init(),pt=new v1(N,ie),F=new vP(N,ie,e,pt),I=new r3(N,ie),F.reverseDepthBuffer&&d&&I.buffers.depth.setReversed(!0),oe=new AP(N),j=new $I,L=new s3(N,ie,I,j,F,pt,oe),A=new yP(y),Z=new SP(y),ee=new DR(N),Pt=new mP(N,ee),V=new TP(N,ee,oe,Pt),Y=new RP(N,V,ee,oe),Je=new CP(N,F,L),Se=new _P(j),se=new WI(y,A,Z,ie,F,Pt,Se),le=new h3(y,j),ce=new qI,Ie=new QI(ie),nt=new pP(y,A,Z,I,Y,f,l),De=new n3(y,Y,F),Q=new d3(N,oe,F,I),ke=new gP(N,ie,oe),ot=new EP(N,ie,oe),oe.programs=se.programs,y.capabilities=F,y.extensions=ie,y.properties=j,y.renderLists=ce,y.shadowMap=De,y.state=I,y.info=oe}ze();const Me=new c3(y,N);this.xr=Me,this.getContext=function(){return N},this.getContextAttributes=function(){return N.getContextAttributes()},this.forceContextLoss=function(){const B=ie.get("WEBGL_lose_context");B&&B.loseContext()},this.forceContextRestore=function(){const B=ie.get("WEBGL_lose_context");B&&B.restoreContext()},this.getPixelRatio=function(){return W},this.setPixelRatio=function(B){B!==void 0&&(W=B,this.setSize(P,z,!1))},this.getSize=function(B){return B.set(P,z)},this.setSize=function(B,te,me=!0){if(Me.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}P=B,z=te,t.width=Math.floor(B*W),t.height=Math.floor(te*W),me===!0&&(t.style.width=B+"px",t.style.height=te+"px"),this.setViewport(0,0,B,te)},this.getDrawingBufferSize=function(B){return B.set(P*W,z*W).floor()},this.setDrawingBufferSize=function(B,te,me){P=B,z=te,W=me,t.width=Math.floor(B*me),t.height=Math.floor(te*me),this.setViewport(0,0,B,te)},this.getCurrentViewport=function(B){return B.copy(R)},this.getViewport=function(B){return B.copy(ne)},this.setViewport=function(B,te,me,ve){B.isVector4?ne.set(B.x,B.y,B.z,B.w):ne.set(B,te,me,ve),I.viewport(R.copy(ne).multiplyScalar(W).round())},this.getScissor=function(B){return B.copy(be)},this.setScissor=function(B,te,me,ve){B.isVector4?be.set(B.x,B.y,B.z,B.w):be.set(B,te,me,ve),I.scissor(H.copy(be).multiplyScalar(W).round())},this.getScissorTest=function(){return _e},this.setScissorTest=function(B){I.setScissorTest(_e=B)},this.setOpaqueSort=function(B){X=B},this.setTransparentSort=function(B){re=B},this.getClearColor=function(B){return B.copy(nt.getClearColor())},this.setClearColor=function(){nt.setClearColor(...arguments)},this.getClearAlpha=function(){return nt.getClearAlpha()},this.setClearAlpha=function(){nt.setClearAlpha(...arguments)},this.clear=function(B=!0,te=!0,me=!0){let ve=0;if(B){let he=!1;if(C!==null){const Oe=C.texture.format;he=Oe===dp||Oe===hp||Oe===Zu}if(he){const Oe=C.texture.type,qe=Oe===Ur||Oe===Is||Oe===Pl||Oe===Il||Oe===lp||Oe===cp,it=nt.getClearColor(),at=nt.getClearAlpha(),At=it.r,Et=it.g,gt=it.b;qe?(p[0]=At,p[1]=Et,p[2]=gt,p[3]=at,N.clearBufferuiv(N.COLOR,0,p)):(v[0]=At,v[1]=Et,v[2]=gt,v[3]=at,N.clearBufferiv(N.COLOR,0,v))}else ve|=N.COLOR_BUFFER_BIT}te&&(ve|=N.DEPTH_BUFFER_BIT),me&&(ve|=N.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),N.clear(ve)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Te,!1),t.removeEventListener("webglcontextrestored",We,!1),t.removeEventListener("webglcontextcreationerror",$e,!1),nt.dispose(),ce.dispose(),Ie.dispose(),j.dispose(),A.dispose(),Z.dispose(),Y.dispose(),Pt.dispose(),Q.dispose(),se.dispose(),Me.dispose(),Me.removeEventListener("sessionstart",fe),Me.removeEventListener("sessionend",de),Ae.stop()};function Te(B){B.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function We(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const B=oe.autoReset,te=De.enabled,me=De.autoUpdate,ve=De.needsUpdate,he=De.type;ze(),oe.autoReset=B,De.enabled=te,De.autoUpdate=me,De.needsUpdate=ve,De.type=he}function $e(B){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",B.statusMessage)}function ht(B){const te=B.target;te.removeEventListener("dispose",ht),Gt(te)}function Gt(B){dn(B),j.remove(B)}function dn(B){const te=j.get(B).programs;te!==void 0&&(te.forEach(function(me){se.releaseProgram(me)}),B.isShaderMaterial&&se.releaseShaderCache(B))}this.renderBufferDirect=function(B,te,me,ve,he,Oe){te===null&&(te=Ue);const qe=he.isMesh&&he.matrixWorld.determinant()<0,it=bn(B,te,me,ve,he);I.setMaterial(ve,qe);let at=me.index,At=1;if(ve.wireframe===!0){if(at=V.getWireframeAttribute(me),at===void 0)return;At=2}const Et=me.drawRange,gt=me.attributes.position;let Zt=Et.start*At,en=(Et.start+Et.count)*At;Oe!==null&&(Zt=Math.max(Zt,Oe.start*At),en=Math.min(en,(Oe.start+Oe.count)*At)),at!==null?(Zt=Math.max(Zt,0),en=Math.min(en,at.count)):gt!=null&&(Zt=Math.max(Zt,0),en=Math.min(en,gt.count));const Un=en-Zt;if(Un<0||Un===1/0)return;Pt.setup(he,ve,it,me,at);let Ln,Yt=ke;if(at!==null&&(Ln=ee.get(at),Yt=ot,Yt.setIndex(Ln)),he.isMesh)ve.wireframe===!0?(I.setLineWidth(ve.wireframeLinewidth*ye()),Yt.setMode(N.LINES)):Yt.setMode(N.TRIANGLES);else if(he.isLine){let vt=ve.linewidth;vt===void 0&&(vt=1),I.setLineWidth(vt*ye()),he.isLineSegments?Yt.setMode(N.LINES):he.isLineLoop?Yt.setMode(N.LINE_LOOP):Yt.setMode(N.LINE_STRIP)}else he.isPoints?Yt.setMode(N.POINTS):he.isSprite&&Yt.setMode(N.TRIANGLES);if(he.isBatchedMesh)if(he._multiDrawInstances!==null)Od("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),Yt.renderMultiDrawInstances(he._multiDrawStarts,he._multiDrawCounts,he._multiDrawCount,he._multiDrawInstances);else if(ie.get("WEBGL_multi_draw"))Yt.renderMultiDraw(he._multiDrawStarts,he._multiDrawCounts,he._multiDrawCount);else{const vt=he._multiDrawStarts,ni=he._multiDrawCounts,tn=he._multiDrawCount,Sr=at?ee.get(at).bytesPerElement:1,To=j.get(ve).currentProgram.getUniforms();for(let $i=0;$i<tn;$i++)To.setValue(N,"_gl_DrawID",$i),Yt.render(vt[$i]/Sr,ni[$i])}else if(he.isInstancedMesh)Yt.renderInstances(Zt,Un,he.count);else if(me.isInstancedBufferGeometry){const vt=me._maxInstanceCount!==void 0?me._maxInstanceCount:1/0,ni=Math.min(me.instanceCount,vt);Yt.renderInstances(Zt,Un,ni)}else Yt.render(Zt,Un)};function et(B,te,me){B.transparent===!0&&B.side===Qi&&B.forceSinglePass===!1?(B.side=gi,B.needsUpdate=!0,Tt(B,te,me),B.side=es,B.needsUpdate=!0,Tt(B,te,me),B.side=Qi):Tt(B,te,me)}this.compile=function(B,te,me=null){me===null&&(me=B),m=Ie.get(me),m.init(te),x.push(m),me.traverseVisible(function(he){he.isLight&&he.layers.test(te.layers)&&(m.pushLight(he),he.castShadow&&m.pushShadow(he))}),B!==me&&B.traverseVisible(function(he){he.isLight&&he.layers.test(te.layers)&&(m.pushLight(he),he.castShadow&&m.pushShadow(he))}),m.setupLights();const ve=new Set;return B.traverse(function(he){if(!(he.isMesh||he.isPoints||he.isLine||he.isSprite))return;const Oe=he.material;if(Oe)if(Array.isArray(Oe))for(let qe=0;qe<Oe.length;qe++){const it=Oe[qe];et(it,me,he),ve.add(it)}else et(Oe,me,he),ve.add(Oe)}),m=x.pop(),ve},this.compileAsync=function(B,te,me=null){const ve=this.compile(B,te,me);return new Promise(he=>{function Oe(){if(ve.forEach(function(qe){j.get(qe).currentProgram.isReady()&&ve.delete(qe)}),ve.size===0){he(B);return}setTimeout(Oe,10)}ie.get("KHR_parallel_shader_compile")!==null?Oe():setTimeout(Oe,10)})};let U=null;function ae(B){U&&U(B)}function fe(){Ae.stop()}function de(){Ae.start()}const Ae=new d1;Ae.setAnimationLoop(ae),typeof self<"u"&&Ae.setContext(self),this.setAnimationLoop=function(B){U=B,Me.setAnimationLoop(B),B===null?Ae.stop():Ae.start()},Me.addEventListener("sessionstart",fe),Me.addEventListener("sessionend",de),this.render=function(B,te){if(te!==void 0&&te.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(b===!0)return;if(B.matrixWorldAutoUpdate===!0&&B.updateMatrixWorld(),te.parent===null&&te.matrixWorldAutoUpdate===!0&&te.updateMatrixWorld(),Me.enabled===!0&&Me.isPresenting===!0&&(Me.cameraAutoUpdate===!0&&Me.updateCamera(te),te=Me.getCamera()),B.isScene===!0&&B.onBeforeRender(y,B,te,C),m=Ie.get(B,x.length),m.init(te),x.push(m),ue.multiplyMatrices(te.projectionMatrix,te.matrixWorldInverse),$.setFromProjectionMatrix(ue),ge=this.localClippingEnabled,K=Se.init(this.clippingPlanes,ge),g=ce.get(B,_.length),g.init(),_.push(g),Me.enabled===!0&&Me.isPresenting===!0){const Oe=y.xr.getDepthSensingMesh();Oe!==null&&Ze(Oe,te,-1/0,y.sortObjects)}Ze(B,te,0,y.sortObjects),g.finish(),y.sortObjects===!0&&g.sort(X,re),xe=Me.enabled===!1||Me.isPresenting===!1||Me.hasDepthSensing()===!1,xe&&nt.addToRenderList(g,B),this.info.render.frame++,K===!0&&Se.beginShadows();const me=m.state.shadowsArray;De.render(me,B,te),K===!0&&Se.endShadows(),this.info.autoReset===!0&&this.info.reset();const ve=g.opaque,he=g.transmissive;if(m.setupLights(),te.isArrayCamera){const Oe=te.cameras;if(he.length>0)for(let qe=0,it=Oe.length;qe<it;qe++){const at=Oe[qe];mt(ve,he,B,at)}xe&&nt.render(B);for(let qe=0,it=Oe.length;qe<it;qe++){const at=Oe[qe];Ve(g,B,at,at.viewport)}}else he.length>0&&mt(ve,he,B,te),xe&&nt.render(B),Ve(g,B,te);C!==null&&w===0&&(L.updateMultisampleRenderTarget(C),L.updateRenderTargetMipmap(C)),B.isScene===!0&&B.onAfterRender(y,B,te),Pt.resetDefaultState(),T=-1,S=null,x.pop(),x.length>0?(m=x[x.length-1],K===!0&&Se.setGlobalState(y.clippingPlanes,m.state.camera)):m=null,_.pop(),_.length>0?g=_[_.length-1]:g=null};function Ze(B,te,me,ve){if(B.visible===!1)return;if(B.layers.test(te.layers)){if(B.isGroup)me=B.renderOrder;else if(B.isLOD)B.autoUpdate===!0&&B.update(te);else if(B.isLight)m.pushLight(B),B.castShadow&&m.pushShadow(B);else if(B.isSprite){if(!B.frustumCulled||$.intersectsSprite(B)){ve&&Ee.setFromMatrixPosition(B.matrixWorld).applyMatrix4(ue);const qe=Y.update(B),it=B.material;it.visible&&g.push(B,qe,it,me,Ee.z,null)}}else if((B.isMesh||B.isLine||B.isPoints)&&(!B.frustumCulled||$.intersectsObject(B))){const qe=Y.update(B),it=B.material;if(ve&&(B.boundingSphere!==void 0?(B.boundingSphere===null&&B.computeBoundingSphere(),Ee.copy(B.boundingSphere.center)):(qe.boundingSphere===null&&qe.computeBoundingSphere(),Ee.copy(qe.boundingSphere.center)),Ee.applyMatrix4(B.matrixWorld).applyMatrix4(ue)),Array.isArray(it)){const at=qe.groups;for(let At=0,Et=at.length;At<Et;At++){const gt=at[At],Zt=it[gt.materialIndex];Zt&&Zt.visible&&g.push(B,qe,Zt,me,Ee.z,gt)}}else it.visible&&g.push(B,qe,it,me,Ee.z,null)}}const Oe=B.children;for(let qe=0,it=Oe.length;qe<it;qe++)Ze(Oe[qe],te,me,ve)}function Ve(B,te,me,ve){const he=B.opaque,Oe=B.transmissive,qe=B.transparent;m.setupLightsView(me),K===!0&&Se.setGlobalState(y.clippingPlanes,me),ve&&I.viewport(R.copy(ve)),he.length>0&&Ot(he,te,me),Oe.length>0&&Ot(Oe,te,me),qe.length>0&&Ot(qe,te,me),I.buffers.depth.setTest(!0),I.buffers.depth.setMask(!0),I.buffers.color.setMask(!0),I.setPolygonOffset(!1)}function mt(B,te,me,ve){if((me.isScene===!0?me.overrideMaterial:null)!==null)return;m.state.transmissionRenderTarget[ve.id]===void 0&&(m.state.transmissionRenderTarget[ve.id]=new ts(1,1,{generateMipmaps:!0,type:ie.has("EXT_color_buffer_half_float")||ie.has("EXT_color_buffer_float")?_o:Ur,minFilter:nr,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:Ut.workingColorSpace}));const Oe=m.state.transmissionRenderTarget[ve.id],qe=ve.viewport||R;Oe.setSize(qe.z*y.transmissionResolutionScale,qe.w*y.transmissionResolutionScale);const it=y.getRenderTarget();y.setRenderTarget(Oe),y.getClearColor(O),G=y.getClearAlpha(),G<1&&y.setClearColor(16777215,.5),y.clear(),xe&&nt.render(me);const at=y.toneMapping;y.toneMapping=Rs;const At=ve.viewport;if(ve.viewport!==void 0&&(ve.viewport=void 0),m.setupLightsView(ve),K===!0&&Se.setGlobalState(y.clippingPlanes,ve),Ot(B,me,ve),L.updateMultisampleRenderTarget(Oe),L.updateRenderTargetMipmap(Oe),ie.has("WEBGL_multisampled_render_to_texture")===!1){let Et=!1;for(let gt=0,Zt=te.length;gt<Zt;gt++){const en=te[gt],Un=en.object,Ln=en.geometry,Yt=en.material,vt=en.group;if(Yt.side===Qi&&Un.layers.test(ve.layers)){const ni=Yt.side;Yt.side=gi,Yt.needsUpdate=!0,dt(Un,me,ve,Ln,Yt,vt),Yt.side=ni,Yt.needsUpdate=!0,Et=!0}}Et===!0&&(L.updateMultisampleRenderTarget(Oe),L.updateRenderTargetMipmap(Oe))}y.setRenderTarget(it),y.setClearColor(O,G),At!==void 0&&(ve.viewport=At),y.toneMapping=at}function Ot(B,te,me){const ve=te.isScene===!0?te.overrideMaterial:null;for(let he=0,Oe=B.length;he<Oe;he++){const qe=B[he],it=qe.object,at=qe.geometry,At=qe.group;let Et=qe.material;Et.allowOverride===!0&&ve!==null&&(Et=ve),it.layers.test(me.layers)&&dt(it,te,me,at,Et,At)}}function dt(B,te,me,ve,he,Oe){B.onBeforeRender(y,te,me,ve,he,Oe),B.modelViewMatrix.multiplyMatrices(me.matrixWorldInverse,B.matrixWorld),B.normalMatrix.getNormalMatrix(B.modelViewMatrix),he.onBeforeRender(y,te,me,ve,B,Oe),he.transparent===!0&&he.side===Qi&&he.forceSinglePass===!1?(he.side=gi,he.needsUpdate=!0,y.renderBufferDirect(me,te,ve,he,B,Oe),he.side=es,he.needsUpdate=!0,y.renderBufferDirect(me,te,ve,he,B,Oe),he.side=Qi):y.renderBufferDirect(me,te,ve,he,B,Oe),B.onAfterRender(y,te,me,ve,he,Oe)}function Tt(B,te,me){te.isScene!==!0&&(te=Ue);const ve=j.get(B),he=m.state.lights,Oe=m.state.shadowsArray,qe=he.state.version,it=se.getParameters(B,he.state,Oe,te,me),at=se.getProgramCacheKey(it);let At=ve.programs;ve.environment=B.isMeshStandardMaterial?te.environment:null,ve.fog=te.fog,ve.envMap=(B.isMeshStandardMaterial?Z:A).get(B.envMap||ve.environment),ve.envMapRotation=ve.environment!==null&&B.envMap===null?te.environmentRotation:B.envMapRotation,At===void 0&&(B.addEventListener("dispose",ht),At=new Map,ve.programs=At);let Et=At.get(at);if(Et!==void 0){if(ve.currentProgram===Et&&ve.lightsStateVersion===qe)return zt(B,it),Et}else it.uniforms=se.getUniforms(B),B.onBeforeCompile(it,y),Et=se.acquireProgram(it,at),At.set(at,Et),ve.uniforms=it.uniforms;const gt=ve.uniforms;return(!B.isShaderMaterial&&!B.isRawShaderMaterial||B.clipping===!0)&&(gt.clippingPlanes=Se.uniform),zt(B,it),ve.needsLights=li(B),ve.lightsStateVersion=qe,ve.needsLights&&(gt.ambientLightColor.value=he.state.ambient,gt.lightProbe.value=he.state.probe,gt.directionalLights.value=he.state.directional,gt.directionalLightShadows.value=he.state.directionalShadow,gt.spotLights.value=he.state.spot,gt.spotLightShadows.value=he.state.spotShadow,gt.rectAreaLights.value=he.state.rectArea,gt.ltc_1.value=he.state.rectAreaLTC1,gt.ltc_2.value=he.state.rectAreaLTC2,gt.pointLights.value=he.state.point,gt.pointLightShadows.value=he.state.pointShadow,gt.hemisphereLights.value=he.state.hemi,gt.directionalShadowMap.value=he.state.directionalShadowMap,gt.directionalShadowMatrix.value=he.state.directionalShadowMatrix,gt.spotShadowMap.value=he.state.spotShadowMap,gt.spotLightMatrix.value=he.state.spotLightMatrix,gt.spotLightMap.value=he.state.spotLightMap,gt.pointShadowMap.value=he.state.pointShadowMap,gt.pointShadowMatrix.value=he.state.pointShadowMatrix),ve.currentProgram=Et,ve.uniformsList=null,Et}function ct(B){if(B.uniformsList===null){const te=B.currentProgram.getUniforms();B.uniformsList=kd.seqWithValue(te.seq,B.uniforms)}return B.uniformsList}function zt(B,te){const me=j.get(B);me.outputColorSpace=te.outputColorSpace,me.batching=te.batching,me.batchingColor=te.batchingColor,me.instancing=te.instancing,me.instancingColor=te.instancingColor,me.instancingMorph=te.instancingMorph,me.skinning=te.skinning,me.morphTargets=te.morphTargets,me.morphNormals=te.morphNormals,me.morphColors=te.morphColors,me.morphTargetsCount=te.morphTargetsCount,me.numClippingPlanes=te.numClippingPlanes,me.numIntersection=te.numClipIntersection,me.vertexAlphas=te.vertexAlphas,me.vertexTangents=te.vertexTangents,me.toneMapping=te.toneMapping}function bn(B,te,me,ve,he){te.isScene!==!0&&(te=Ue),L.resetTextureUnits();const Oe=te.fog,qe=ve.isMeshStandardMaterial?te.environment:null,it=C===null?y.outputColorSpace:C.isXRRenderTarget===!0?C.texture.colorSpace:ai,at=(ve.isMeshStandardMaterial?Z:A).get(ve.envMap||qe),At=ve.vertexColors===!0&&!!me.attributes.color&&me.attributes.color.itemSize===4,Et=!!me.attributes.tangent&&(!!ve.normalMap||ve.anisotropy>0),gt=!!me.morphAttributes.position,Zt=!!me.morphAttributes.normal,en=!!me.morphAttributes.color;let Un=Rs;ve.toneMapped&&(C===null||C.isXRRenderTarget===!0)&&(Un=y.toneMapping);const Ln=me.morphAttributes.position||me.morphAttributes.normal||me.morphAttributes.color,Yt=Ln!==void 0?Ln.length:0,vt=j.get(ve),ni=m.state.lights;if(K===!0&&(ge===!0||B!==S)){const Si=B===S&&ve.id===T;Se.setState(ve,B,Si)}let tn=!1;ve.version===vt.__version?(vt.needsLights&&vt.lightsStateVersion!==ni.state.version||vt.outputColorSpace!==it||he.isBatchedMesh&&vt.batching===!1||!he.isBatchedMesh&&vt.batching===!0||he.isBatchedMesh&&vt.batchingColor===!0&&he.colorTexture===null||he.isBatchedMesh&&vt.batchingColor===!1&&he.colorTexture!==null||he.isInstancedMesh&&vt.instancing===!1||!he.isInstancedMesh&&vt.instancing===!0||he.isSkinnedMesh&&vt.skinning===!1||!he.isSkinnedMesh&&vt.skinning===!0||he.isInstancedMesh&&vt.instancingColor===!0&&he.instanceColor===null||he.isInstancedMesh&&vt.instancingColor===!1&&he.instanceColor!==null||he.isInstancedMesh&&vt.instancingMorph===!0&&he.morphTexture===null||he.isInstancedMesh&&vt.instancingMorph===!1&&he.morphTexture!==null||vt.envMap!==at||ve.fog===!0&&vt.fog!==Oe||vt.numClippingPlanes!==void 0&&(vt.numClippingPlanes!==Se.numPlanes||vt.numIntersection!==Se.numIntersection)||vt.vertexAlphas!==At||vt.vertexTangents!==Et||vt.morphTargets!==gt||vt.morphNormals!==Zt||vt.morphColors!==en||vt.toneMapping!==Un||vt.morphTargetsCount!==Yt)&&(tn=!0):(tn=!0,vt.__version=ve.version);let Sr=vt.currentProgram;tn===!0&&(Sr=Tt(ve,te,he));let To=!1,$i=!1,uc=!1;const gn=Sr.getUniforms(),or=vt.uniforms;if(I.useProgram(Sr.program)&&(To=!0,$i=!0,uc=!0),ve.id!==T&&(T=ve.id,$i=!0),To||S!==B){I.buffers.depth.getReversed()?(J.copy(B.projectionMatrix),sA(J),aA(J),gn.setValue(N,"projectionMatrix",J)):gn.setValue(N,"projectionMatrix",B.projectionMatrix),gn.setValue(N,"viewMatrix",B.matrixWorldInverse);const Ni=gn.map.cameraPosition;Ni!==void 0&&Ni.setValue(N,Ce.setFromMatrixPosition(B.matrixWorld)),F.logarithmicDepthBuffer&&gn.setValue(N,"logDepthBufFC",2/(Math.log(B.far+1)/Math.LN2)),(ve.isMeshPhongMaterial||ve.isMeshToonMaterial||ve.isMeshLambertMaterial||ve.isMeshBasicMaterial||ve.isMeshStandardMaterial||ve.isShaderMaterial)&&gn.setValue(N,"isOrthographic",B.isOrthographicCamera===!0),S!==B&&(S=B,$i=!0,uc=!0)}if(he.isSkinnedMesh){gn.setOptional(N,he,"bindMatrix"),gn.setOptional(N,he,"bindMatrixInverse");const Si=he.skeleton;Si&&(Si.boneTexture===null&&Si.computeBoneTexture(),gn.setValue(N,"boneTexture",Si.boneTexture,L))}he.isBatchedMesh&&(gn.setOptional(N,he,"batchingTexture"),gn.setValue(N,"batchingTexture",he._matricesTexture,L),gn.setOptional(N,he,"batchingIdTexture"),gn.setValue(N,"batchingIdTexture",he._indirectTexture,L),gn.setOptional(N,he,"batchingColorTexture"),he._colorsTexture!==null&&gn.setValue(N,"batchingColorTexture",he._colorsTexture,L));const lr=me.morphAttributes;if((lr.position!==void 0||lr.normal!==void 0||lr.color!==void 0)&&Je.update(he,me,Sr),($i||vt.receiveShadow!==he.receiveShadow)&&(vt.receiveShadow=he.receiveShadow,gn.setValue(N,"receiveShadow",he.receiveShadow)),ve.isMeshGouraudMaterial&&ve.envMap!==null&&(or.envMap.value=at,or.flipEnvMap.value=at.isCubeTexture&&at.isRenderTargetTexture===!1?-1:1),ve.isMeshStandardMaterial&&ve.envMap===null&&te.environment!==null&&(or.envMapIntensity.value=te.environmentIntensity),$i&&(gn.setValue(N,"toneMappingExposure",y.toneMappingExposure),vt.needsLights&&Rn(or,uc),Oe&&ve.fog===!0&&le.refreshFogUniforms(or,Oe),le.refreshMaterialUniforms(or,ve,W,z,m.state.transmissionRenderTarget[B.id]),kd.upload(N,ct(vt),or,L)),ve.isShaderMaterial&&ve.uniformsNeedUpdate===!0&&(kd.upload(N,ct(vt),or,L),ve.uniformsNeedUpdate=!1),ve.isSpriteMaterial&&gn.setValue(N,"center",he.center),gn.setValue(N,"modelViewMatrix",he.modelViewMatrix),gn.setValue(N,"normalMatrix",he.normalMatrix),gn.setValue(N,"modelMatrix",he.matrixWorld),ve.isShaderMaterial||ve.isRawShaderMaterial){const Si=ve.uniformsGroups;for(let Ni=0,sm=Si.length;Ni<sm;Ni++){const Ta=Si[Ni];Q.update(Ta,Sr),Q.bind(Ta,Sr)}}return Sr}function Rn(B,te){B.ambientLightColor.needsUpdate=te,B.lightProbe.needsUpdate=te,B.directionalLights.needsUpdate=te,B.directionalLightShadows.needsUpdate=te,B.pointLights.needsUpdate=te,B.pointLightShadows.needsUpdate=te,B.spotLights.needsUpdate=te,B.spotLightShadows.needsUpdate=te,B.rectAreaLights.needsUpdate=te,B.hemisphereLights.needsUpdate=te}function li(B){return B.isMeshLambertMaterial||B.isMeshToonMaterial||B.isMeshPhongMaterial||B.isMeshStandardMaterial||B.isShadowMaterial||B.isShaderMaterial&&B.lights===!0}this.getActiveCubeFace=function(){return M},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return C},this.setRenderTargetTextures=function(B,te,me){const ve=j.get(B);ve.__autoAllocateDepthBuffer=B.resolveDepthBuffer===!1,ve.__autoAllocateDepthBuffer===!1&&(ve.__useRenderToTexture=!1),j.get(B.texture).__webglTexture=te,j.get(B.depthTexture).__webglTexture=ve.__autoAllocateDepthBuffer?void 0:me,ve.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(B,te){const me=j.get(B);me.__webglFramebuffer=te,me.__useDefaultFramebuffer=te===void 0};const Jt=N.createFramebuffer();this.setRenderTarget=function(B,te=0,me=0){C=B,M=te,w=me;let ve=!0,he=null,Oe=!1,qe=!1;if(B){const at=j.get(B);if(at.__useDefaultFramebuffer!==void 0)I.bindFramebuffer(N.FRAMEBUFFER,null),ve=!1;else if(at.__webglFramebuffer===void 0)L.setupRenderTarget(B);else if(at.__hasExternalTextures)L.rebindTextures(B,j.get(B.texture).__webglTexture,j.get(B.depthTexture).__webglTexture);else if(B.depthBuffer){const gt=B.depthTexture;if(at.__boundDepthTexture!==gt){if(gt!==null&&j.has(gt)&&(B.width!==gt.image.width||B.height!==gt.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");L.setupDepthRenderbuffer(B)}}const At=B.texture;(At.isData3DTexture||At.isDataArrayTexture||At.isCompressedArrayTexture)&&(qe=!0);const Et=j.get(B).__webglFramebuffer;B.isWebGLCubeRenderTarget?(Array.isArray(Et[te])?he=Et[te][me]:he=Et[te],Oe=!0):B.samples>0&&L.useMultisampledRTT(B)===!1?he=j.get(B).__webglMultisampledFramebuffer:Array.isArray(Et)?he=Et[me]:he=Et,R.copy(B.viewport),H.copy(B.scissor),D=B.scissorTest}else R.copy(ne).multiplyScalar(W).floor(),H.copy(be).multiplyScalar(W).floor(),D=_e;if(me!==0&&(he=Jt),I.bindFramebuffer(N.FRAMEBUFFER,he)&&ve&&I.drawBuffers(B,he),I.viewport(R),I.scissor(H),I.setScissorTest(D),Oe){const at=j.get(B.texture);N.framebufferTexture2D(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_CUBE_MAP_POSITIVE_X+te,at.__webglTexture,me)}else if(qe){const at=j.get(B.texture),At=te;N.framebufferTextureLayer(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,at.__webglTexture,me,At)}else if(B!==null&&me!==0){const at=j.get(B.texture);N.framebufferTexture2D(N.FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,at.__webglTexture,me)}T=-1},this.readRenderTargetPixels=function(B,te,me,ve,he,Oe,qe){if(!(B&&B.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let it=j.get(B).__webglFramebuffer;if(B.isWebGLCubeRenderTarget&&qe!==void 0&&(it=it[qe]),it){I.bindFramebuffer(N.FRAMEBUFFER,it);try{const at=B.texture,At=at.format,Et=at.type;if(!F.textureFormatReadable(At)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!F.textureTypeReadable(Et)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}te>=0&&te<=B.width-ve&&me>=0&&me<=B.height-he&&N.readPixels(te,me,ve,he,pt.convert(At),pt.convert(Et),Oe)}finally{const at=C!==null?j.get(C).__webglFramebuffer:null;I.bindFramebuffer(N.FRAMEBUFFER,at)}}},this.readRenderTargetPixelsAsync=async function(B,te,me,ve,he,Oe,qe){if(!(B&&B.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let it=j.get(B).__webglFramebuffer;if(B.isWebGLCubeRenderTarget&&qe!==void 0&&(it=it[qe]),it)if(te>=0&&te<=B.width-ve&&me>=0&&me<=B.height-he){I.bindFramebuffer(N.FRAMEBUFFER,it);const at=B.texture,At=at.format,Et=at.type;if(!F.textureFormatReadable(At))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!F.textureTypeReadable(Et))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const gt=N.createBuffer();N.bindBuffer(N.PIXEL_PACK_BUFFER,gt),N.bufferData(N.PIXEL_PACK_BUFFER,Oe.byteLength,N.STREAM_READ),N.readPixels(te,me,ve,he,pt.convert(At),pt.convert(Et),0);const Zt=C!==null?j.get(C).__webglFramebuffer:null;I.bindFramebuffer(N.FRAMEBUFFER,Zt);const en=N.fenceSync(N.SYNC_GPU_COMMANDS_COMPLETE,0);return N.flush(),await rA(N,en,4),N.bindBuffer(N.PIXEL_PACK_BUFFER,gt),N.getBufferSubData(N.PIXEL_PACK_BUFFER,0,Oe),N.deleteBuffer(gt),N.deleteSync(en),Oe}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")},this.copyFramebufferToTexture=function(B,te=null,me=0){const ve=Math.pow(2,-me),he=Math.floor(B.image.width*ve),Oe=Math.floor(B.image.height*ve),qe=te!==null?te.x:0,it=te!==null?te.y:0;L.setTexture2D(B,0),N.copyTexSubImage2D(N.TEXTURE_2D,me,0,0,qe,it,he,Oe),I.unbindTexture()};const Wi=N.createFramebuffer(),fn=N.createFramebuffer();this.copyTextureToTexture=function(B,te,me=null,ve=null,he=0,Oe=null){Oe===null&&(he!==0?(Od("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),Oe=he,he=0):Oe=0);let qe,it,at,At,Et,gt,Zt,en,Un;const Ln=B.isCompressedTexture?B.mipmaps[Oe]:B.image;if(me!==null)qe=me.max.x-me.min.x,it=me.max.y-me.min.y,at=me.isBox3?me.max.z-me.min.z:1,At=me.min.x,Et=me.min.y,gt=me.isBox3?me.min.z:0;else{const lr=Math.pow(2,-he);qe=Math.floor(Ln.width*lr),it=Math.floor(Ln.height*lr),B.isDataArrayTexture?at=Ln.depth:B.isData3DTexture?at=Math.floor(Ln.depth*lr):at=1,At=0,Et=0,gt=0}ve!==null?(Zt=ve.x,en=ve.y,Un=ve.z):(Zt=0,en=0,Un=0);const Yt=pt.convert(te.format),vt=pt.convert(te.type);let ni;te.isData3DTexture?(L.setTexture3D(te,0),ni=N.TEXTURE_3D):te.isDataArrayTexture||te.isCompressedArrayTexture?(L.setTexture2DArray(te,0),ni=N.TEXTURE_2D_ARRAY):(L.setTexture2D(te,0),ni=N.TEXTURE_2D),N.pixelStorei(N.UNPACK_FLIP_Y_WEBGL,te.flipY),N.pixelStorei(N.UNPACK_PREMULTIPLY_ALPHA_WEBGL,te.premultiplyAlpha),N.pixelStorei(N.UNPACK_ALIGNMENT,te.unpackAlignment);const tn=N.getParameter(N.UNPACK_ROW_LENGTH),Sr=N.getParameter(N.UNPACK_IMAGE_HEIGHT),To=N.getParameter(N.UNPACK_SKIP_PIXELS),$i=N.getParameter(N.UNPACK_SKIP_ROWS),uc=N.getParameter(N.UNPACK_SKIP_IMAGES);N.pixelStorei(N.UNPACK_ROW_LENGTH,Ln.width),N.pixelStorei(N.UNPACK_IMAGE_HEIGHT,Ln.height),N.pixelStorei(N.UNPACK_SKIP_PIXELS,At),N.pixelStorei(N.UNPACK_SKIP_ROWS,Et),N.pixelStorei(N.UNPACK_SKIP_IMAGES,gt);const gn=B.isDataArrayTexture||B.isData3DTexture,or=te.isDataArrayTexture||te.isData3DTexture;if(B.isDepthTexture){const lr=j.get(B),Si=j.get(te),Ni=j.get(lr.__renderTarget),sm=j.get(Si.__renderTarget);I.bindFramebuffer(N.READ_FRAMEBUFFER,Ni.__webglFramebuffer),I.bindFramebuffer(N.DRAW_FRAMEBUFFER,sm.__webglFramebuffer);for(let Ta=0;Ta<at;Ta++)gn&&(N.framebufferTextureLayer(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,j.get(B).__webglTexture,he,gt+Ta),N.framebufferTextureLayer(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,j.get(te).__webglTexture,Oe,Un+Ta)),N.blitFramebuffer(At,Et,qe,it,Zt,en,qe,it,N.DEPTH_BUFFER_BIT,N.NEAREST);I.bindFramebuffer(N.READ_FRAMEBUFFER,null),I.bindFramebuffer(N.DRAW_FRAMEBUFFER,null)}else if(he!==0||B.isRenderTargetTexture||j.has(B)){const lr=j.get(B),Si=j.get(te);I.bindFramebuffer(N.READ_FRAMEBUFFER,Wi),I.bindFramebuffer(N.DRAW_FRAMEBUFFER,fn);for(let Ni=0;Ni<at;Ni++)gn?N.framebufferTextureLayer(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,lr.__webglTexture,he,gt+Ni):N.framebufferTexture2D(N.READ_FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,lr.__webglTexture,he),or?N.framebufferTextureLayer(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,Si.__webglTexture,Oe,Un+Ni):N.framebufferTexture2D(N.DRAW_FRAMEBUFFER,N.COLOR_ATTACHMENT0,N.TEXTURE_2D,Si.__webglTexture,Oe),he!==0?N.blitFramebuffer(At,Et,qe,it,Zt,en,qe,it,N.COLOR_BUFFER_BIT,N.NEAREST):or?N.copyTexSubImage3D(ni,Oe,Zt,en,Un+Ni,At,Et,qe,it):N.copyTexSubImage2D(ni,Oe,Zt,en,At,Et,qe,it);I.bindFramebuffer(N.READ_FRAMEBUFFER,null),I.bindFramebuffer(N.DRAW_FRAMEBUFFER,null)}else or?B.isDataTexture||B.isData3DTexture?N.texSubImage3D(ni,Oe,Zt,en,Un,qe,it,at,Yt,vt,Ln.data):te.isCompressedArrayTexture?N.compressedTexSubImage3D(ni,Oe,Zt,en,Un,qe,it,at,Yt,Ln.data):N.texSubImage3D(ni,Oe,Zt,en,Un,qe,it,at,Yt,vt,Ln):B.isDataTexture?N.texSubImage2D(N.TEXTURE_2D,Oe,Zt,en,qe,it,Yt,vt,Ln.data):B.isCompressedTexture?N.compressedTexSubImage2D(N.TEXTURE_2D,Oe,Zt,en,Ln.width,Ln.height,Yt,Ln.data):N.texSubImage2D(N.TEXTURE_2D,Oe,Zt,en,qe,it,Yt,vt,Ln);N.pixelStorei(N.UNPACK_ROW_LENGTH,tn),N.pixelStorei(N.UNPACK_IMAGE_HEIGHT,Sr),N.pixelStorei(N.UNPACK_SKIP_PIXELS,To),N.pixelStorei(N.UNPACK_SKIP_ROWS,$i),N.pixelStorei(N.UNPACK_SKIP_IMAGES,uc),Oe===0&&te.generateMipmaps&&N.generateMipmap(ni),I.unbindTexture()},this.copyTextureToTexture3D=function(B,te,me=null,ve=null,he=0){return Od('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(B,te,me,ve,he)},this.initRenderTarget=function(B){j.get(B).__webglFramebuffer===void 0&&L.setupRenderTarget(B)},this.initTexture=function(B){B.isCubeTexture?L.setTextureCube(B,0):B.isData3DTexture?L.setTexture3D(B,0):B.isDataArrayTexture||B.isCompressedArrayTexture?L.setTexture2DArray(B,0):L.setTexture2D(B,0),I.unbindTexture()},this.resetState=function(){M=0,w=0,C=null,I.reset(),Pt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return pr}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=Ut._getDrawingBufferColorSpace(e),t.unpackColorSpace=Ut._getUnpackColorSpace()}};const f3=Object.freeze(Object.defineProperty({__proto__:null,ACESFilmicToneMapping:Bb,AddEquation:ta,AddOperation:Nb,AdditiveAnimationBlendMode:Wv,AdditiveBlending:Rl,AgXToneMapping:nf,AlphaFormat:kv,AlwaysCompare:tS,AlwaysDepth:jd,AlwaysStencilFunc:Kg,AmbientLight:KS,AnimationAction:l1,AnimationClip:Vl,AnimationLoader:IC,AnimationMixer:c1,AnimationObjectGroup:tR,AnimationUtils:CC,ArcCurve:bS,ArrayCamera:s1,ArrowHelper:wR,AttachedBindMode:Jg,Audio:S_,AudioAnalyser:$C,AudioContext:x_,AudioListener:a1,AudioLoader:M_,AxesHelper:TR,BackSide:gi,BasicDepthPacking:Xb,BasicShadowMap:oE,BatchedMesh:_S,Bone:Mp,BooleanKeyframeTrack:xo,Box2:hR,Box3:On,Box3Helper:bR,BoxGeometry:Jl,BoxHelper:MR,BufferAttribute:qt,BufferGeometry:Lt,BufferGeometryLoader:i1,ByteType:Uv,Cache:Es,Camera:_p,CameraHelper:xR,CanvasTexture:xS,CapsuleGeometry:Ap,CatmullRomCurve3:SS,CineonToneMapping:Ub,CircleGeometry:Cp,ClampToEdgeWrapping:tr,Clock:b_,Color:Ye,ColorKeyframeTrack:f_,ColorManagement:Ut,CompressedArrayTexture:YA,CompressedCubeTexture:jA,CompressedTexture:Tp,CompressedTextureLoader:DC,ConeGeometry:eh,ConstantAlphaFactor:Pb,ConstantColorFactor:Rb,Controls:AR,CubeCamera:jv,CubeReflectionMapping:Ps,CubeRefractionMapping:da,CubeTexture:ju,CubeTextureLoader:NC,CubeUVReflectionMapping:jl,CubicBezierCurve:r_,CubicBezierCurve3:wS,CubicInterpolant:ZS,CullFaceBack:jg,CullFaceFront:pb,CullFaceFrontBack:aE,CullFaceNone:fb,Curve:Vr,CurvePath:ES,CustomBlending:mb,CustomToneMapping:zb,CylinderGeometry:Qu,Cylindrical:uR,Data3DTexture:mp,DataArrayTexture:Yu,DataTexture:Jr,DataTextureLoader:FC,DataUtils:MA,DecrementStencilOp:_E,DecrementWrapStencilOp:xE,DefaultLoadingManager:bo,DepthArrayTexture:JA,DepthFormat:Dl,DepthStencilFormat:Nl,DepthTexture:Ep,DetachedBindMode:Vb,DirectionalLight:y_,DirectionalLightHelper:yR,DiscreteInterpolant:YS,DodecahedronGeometry:Rp,DoubleSide:Qi,DstAlphaFactor:wb,DstColorFactor:Eb,DynamicCopyUsage:FE,DynamicDrawUsage:RE,DynamicReadUsage:IE,EdgesGeometry:MS,EllipseCurve:Lp,EqualCompare:Jb,EqualDepth:Kd,EqualStencilFunc:wE,EquirectangularReflectionMapping:du,EquirectangularRefractionMapping:fu,Euler:Vi,EventDispatcher:ss,ExtrudeGeometry:IS,FileLoader:ar,Float16BufferAttribute:CA,Float32BufferAttribute:rt,FloatType:zi,Fog:xp,FogExp2:yp,FramebufferTexture:ZA,FrontSide:es,Frustum:Kl,FrustumArray:bp,GLBufferAttribute:lR,GLSL1:UE,GLSL3:Qg,GreaterCompare:Kb,GreaterDepth:ef,GreaterEqualCompare:eS,GreaterEqualDepth:Qd,GreaterEqualStencilFunc:CE,GreaterStencilFunc:EE,GridHelper:vR,Group:mr,HalfFloatType:_o,HemisphereLight:JS,HemisphereLightHelper:gR,IcosahedronGeometry:Pp,ImageBitmapLoader:r1,ImageLoader:bu,ImageUtils:aS,IncrementStencilOp:vE,IncrementWrapStencilOp:yE,InstancedBufferAttribute:ao,InstancedBufferGeometry:n1,InstancedInterleavedBuffer:oR,InstancedMesh:t_,Int16BufferAttribute:EA,Int32BufferAttribute:AA,Int8BufferAttribute:SA,IntType:op,InterleavedBuffer:Ju,InterleavedBufferAttribute:zl,Interpolant:Ql,InterpolateDiscrete:Fl,InterpolateLinear:Ol,InterpolateSmooth:Fd,InterpolationSamplingMode:kE,InterpolationSamplingType:zE,InvertStencilOp:ME,KeepStencilOp:Wa,KeyframeTrack:xr,LOD:vS,LatheGeometry:Ip,Layers:gp,LessCompare:jb,LessDepth:Jd,LessEqualCompare:Xv,LessEqualDepth:so,LessEqualStencilFunc:TE,LessStencilFunc:SE,Light:ba,LightProbe:t1,Line:Ds,Line3:u1,LineBasicMaterial:Mi,LineCurve:s_,LineCurve3:TS,LineDashedMaterial:$S,LineLoop:n_,LineSegments:kr,LinearFilter:xn,LinearInterpolant:d_,LinearMipMapLinearFilter:hE,LinearMipMapNearestFilter:uE,LinearMipmapLinearFilter:nr,LinearMipmapNearestFilter:wl,LinearSRGBColorSpace:ai,LinearToneMapping:Fb,LinearTransfer:mu,Loader:bi,LoaderUtils:la,LoadingManager:p_,LoopOnce:Hb,LoopPingPong:Wb,LoopRepeat:Gb,MOUSE:rE,Material:$n,MaterialLoader:zp,MathUtils:er,Matrix2:C_,Matrix3:Nt,Matrix4:ft,MaxEquation:yb,Mesh:Mn,MeshBasicMaterial:ir,MeshDepthMaterial:c_,MeshDistanceMaterial:u_,MeshLambertMaterial:GS,MeshMatcapMaterial:WS,MeshNormalMaterial:HS,MeshPhongMaterial:kS,MeshPhysicalMaterial:yr,MeshStandardMaterial:ih,MeshToonMaterial:VS,MinEquation:_b,MirroredRepeatWrapping:Ll,MixOperation:Db,MultiplyBlending:Xd,MultiplyOperation:qu,NearestFilter:Wn,NearestMipMapLinearFilter:cE,NearestMipMapNearestFilter:lE,NearestMipmapLinearFilter:Ya,NearestMipmapNearestFilter:ap,NeutralToneMapping:kb,NeverCompare:Yb,NeverDepth:Yd,NeverStencilFunc:bE,NoBlending:jr,NoColorSpace:bs,NoToneMapping:Rs,NormalAnimationBlendMode:fp,NormalBlending:Cs,NotEqualCompare:Qb,NotEqualDepth:tf,NotEqualStencilFunc:AE,NumberKeyframeTrack:lo,Object3D:Wt,ObjectLoader:zC,ObjectSpaceNormalMap:Zb,OctahedronGeometry:th,OneFactor:Mb,OneMinusConstantAlphaFactor:Ib,OneMinusConstantColorFactor:Lb,OneMinusDstAlphaFactor:Tb,OneMinusDstColorFactor:Ab,OneMinusSrcAlphaFactor:Zd,OneMinusSrcColorFactor:Sb,OrthographicCamera:ec,PCFShadowMap:Ov,PCFSoftShadowMap:qc,PMREMGenerator:ov,Path:Nf,PerspectiveCamera:Hn,Plane:Qs,PlaneGeometry:Dp,PlaneHelper:SR,PointLight:__,PointLightHelper:pR,Points:wp,PointsMaterial:Sp,PolarGridHelper:_R,PolyhedronGeometry:Ma,PositionalAudio:WC,PropertyBinding:ln,PropertyMixer:o1,QuadraticBezierCurve:a_,QuadraticBezierCurve3:o_,Quaternion:Dn,QuaternionKeyframeTrack:co,QuaternionLinearInterpolant:jS,RED_GREEN_RGTC2_Format:Cf,RED_RGTC1_Format:Gv,REVISION:rp,RGBADepthPacking:qb,RGBAFormat:Ri,RGBAIntegerFormat:dp,RGBA_ASTC_10x10_Format:bf,RGBA_ASTC_10x5_Format:yf,RGBA_ASTC_10x6_Format:xf,RGBA_ASTC_10x8_Format:Mf,RGBA_ASTC_12x10_Format:Sf,RGBA_ASTC_12x12_Format:wf,RGBA_ASTC_4x4_Format:hf,RGBA_ASTC_5x4_Format:df,RGBA_ASTC_5x5_Format:ff,RGBA_ASTC_6x5_Format:pf,RGBA_ASTC_6x6_Format:mf,RGBA_ASTC_8x5_Format:gf,RGBA_ASTC_8x6_Format:vf,RGBA_ASTC_8x8_Format:_f,RGBA_BPTC_Format:Kc,RGBA_ETC2_EAC_Format:uf,RGBA_PVRTC_2BPPV1_Format:of,RGBA_PVRTC_4BPPV1_Format:af,RGBA_S3TC_DXT1_Format:Yc,RGBA_S3TC_DXT3_Format:jc,RGBA_S3TC_DXT5_Format:Jc,RGBDepthPacking:fE,RGBFormat:Vv,RGBIntegerFormat:dE,RGB_BPTC_SIGNED_Format:Tf,RGB_BPTC_UNSIGNED_Format:Ef,RGB_ETC1_Format:lf,RGB_ETC2_Format:cf,RGB_PVRTC_2BPPV1_Format:sf,RGB_PVRTC_4BPPV1_Format:rf,RGB_S3TC_DXT1_Format:Zc,RGDepthPacking:pE,RGFormat:Hv,RGIntegerFormat:hp,RawShaderMaterial:zS,Ray:yo,Raycaster:A_,RectAreaLight:QS,RedFormat:up,RedIntegerFormat:Zu,ReinhardToneMapping:Ob,RenderTarget:pp,RenderTarget3D:iR,RenderTargetArray:rR,RepeatWrapping:fa,ReplaceStencilOp:gE,ReverseSubtractEquation:vb,RingGeometry:Np,SIGNED_RED_GREEN_RGTC2_Format:Rf,SIGNED_RED_RGTC1_Format:Af,SRGBColorSpace:In,SRGBTransfer:sn,Scene:Kv,ShaderChunk:_t,ShaderLib:dr,ShaderMaterial:Pi,ShadowMaterial:BS,Shape:eo,ShapeGeometry:FS,ShapePath:ER,ShapeUtils:Ts,ShortType:Bv,Skeleton:Ku,SkeletonHelper:fR,SkinnedMesh:e_,Source:ra,Sphere:kn,SphereGeometry:nh,Spherical:cR,SphericalHarmonics3:e1,SplineCurve:l_,SpotLight:v_,SpotLightHelper:dR,Sprite:gS,SpriteMaterial:Qv,SrcAlphaFactor:qd,SrcAlphaSaturateFactor:Cb,SrcColorFactor:bb,StaticCopyUsage:NE,StaticDrawUsage:gu,StaticReadUsage:PE,StereoCamera:VC,StreamCopyUsage:OE,StreamDrawUsage:LE,StreamReadUsage:DE,StringKeyframeTrack:Mo,SubtractEquation:gb,SubtractiveBlending:$d,TOUCH:sE,TangentSpaceNormalMap:xa,TetrahedronGeometry:Fp,Texture:Vn,TextureLoader:m_,TextureUtils:IR,TimestampQuery:BE,TorusGeometry:Op,TorusKnotGeometry:Up,Triangle:na,TriangleFanDrawMode:Lf,TriangleStripDrawMode:$v,TrianglesDrawMode:$b,TubeGeometry:Bp,UVMapping:sp,Uint16BufferAttribute:Zv,Uint32BufferAttribute:Yv,Uint8BufferAttribute:wA,Uint8ClampedBufferAttribute:TA,Uniform:E_,UniformsGroup:aR,UniformsLib:je,UniformsUtils:vp,UnsignedByteType:Ur,UnsignedInt248Type:Il,UnsignedInt5999Type:zv,UnsignedIntType:Is,UnsignedShort4444Type:lp,UnsignedShort5551Type:cp,UnsignedShortType:Pl,VSMShadowMap:Xr,Vector2:Pe,Vector3:k,Vector4:Ht,VectorKeyframeTrack:uo,VideoFrameTexture:qA,VideoTexture:yS,WebGL3DRenderTarget:hA,WebGLArrayRenderTarget:uA,WebGLCoordinateSystem:pr,WebGLCubeRenderTarget:Jv,WebGLRenderTarget:ts,WebGLRenderer:_1,WebGLUtils:v1,WebGPUCoordinateSystem:vu,WebXRController:zd,WireframeGeometry:US,WrapAroundEnding:pu,ZeroCurvatureEnding:ja,ZeroFactor:xb,ZeroSlopeEnding:Ja,ZeroStencilOp:mE,createCanvasElement:sS},Symbol.toStringTag,{value:"Module"}));function p3(r){Ne(r,r.v+1)}function m3(r){let e=0,t=fr(0),n;return()=>{rb()&&(E(t),tp(()=>(e===0&&(n=_n(()=>r(()=>p3(t)))),e+=1,()=>{np().then(()=>{e-=1,e===0&&(n?.(),n=void 0)})})))}}function g3(r){let e;const t=m3(i=>{let s=!1;const a=r.subscribe(o=>{e=o,s&&i()});return s=!0,a});function n(){return rb()?(t(),e):Wd(r)}return"set"in r?{get current(){return n()},set current(i){r.set(i)}}:{get current(){return n()}}}const Ky=Symbol(),v3=r=>typeof r?.subscribe=="function",y1=(r,e,t)=>{const n=r().map(a=>v3(a)?g3(a):Ky),i=xt(()=>r().map((a,o)=>n[o]===Ky?a:n[o].current)),s=()=>{E(i);let a;return _n(()=>{a=e(E(i))}),a};t?fi(s):nn(s)},_3=(r,e)=>y1(r,e,!1),y3=(r,e)=>y1(r,e,!0),x1=Object.assign(_3,{pre:y3}),mi=(r,e)=>r?.[`is${e}`]===!0,Jm=r=>{const e=ki(void 0),t=ki(void 0);return r.then(n=>{e.set(n)}).catch(n=>{console.error("Error in asyncWritable:",n.message),t.set(n)}),Object.assign(Object.assign(r,e),{error:t,promise:r})},x3=typeof window<"u",ri=(r,e)=>{const t=Zl(r,s=>s);let n;const i=t.subscribe(async s=>{n&&n();const a=await e(s);a&&(n=a)});Gi(()=>{i(),n&&n()})},un=r=>{const e=ki(r),t={set:n=>{t.current=n,e.set(n)},subscribe:e.subscribe,update:n=>{const i=n(t.current);t.current=i,e.set(i)},current:r};return t},M3=r=>({subscribe:r.subscribe,get current(){return r.current}}),M1=(r,e)=>{if(e.includes(".")){const t=e.split("."),n=t.pop();for(let i=0;i<t.length;i+=1)r=r[t[i]];return{target:r,key:n}}else return{target:r,key:e}},b3=r=>{const{dom:e,canvas:t}=r,n=un({width:e.offsetWidth,height:e.offsetHeight});ql(()=>{const s=new ResizeObserver(()=>{const{offsetWidth:a,offsetHeight:o}=e;(n.current.width!==a||n.current.height!==o)&&n.set({width:a,height:o})});return s.observe(e),()=>{s.disconnect()}});const i={dom:e,canvas:t,size:M3(n)};return Hi("threlte-dom-context",i),i},Vp=()=>{const r=yi("threlte-dom-context");if(!r)throw new Error("useDOM can only be used in a child component to <Canvas>.");return r};function S3(r){return{all:r=r||new Map,on:function(e,t){var n=r.get(e);n?n.push(t):r.set(e,[t])},off:function(e,t){var n=r.get(e);n&&(t?n.splice(n.indexOf(t)>>>0,1):r.set(e,[]))},emit:function(e,t){var n=r.get(e);n&&n.slice().map(function(i){i(t)}),(n=r.get("*"))&&n.slice().map(function(i){i(e,t)})}}}class ea{allVertices={};isolatedVertices={};connectedVertices={};sortedConnectedValues=[];needsSort=!1;emitter=S3();emit=this.emitter.emit.bind(this.emitter);on=this.emitter.on.bind(this.emitter);off=this.emitter.off.bind(this.emitter);get sortedVertices(){return this.mapNodes(e=>e)}moveToIsolated(e){const t=this.connectedVertices[e];t&&(this.isolatedVertices[e]=t,delete this.connectedVertices[e])}moveToConnected(e){const t=this.isolatedVertices[e];t&&(this.connectedVertices[e]=t,delete this.isolatedVertices[e])}getKey=e=>typeof e=="object"?e.key:e;add(e,t,n){if(this.allVertices[e]&&this.allVertices[e].value!==void 0)throw new Error(`A node with the key ${e.toString()} already exists`);let i=this.allVertices[e];i?i.value===void 0&&(i.value=t):(i={value:t,previous:new Set,next:new Set},this.allVertices[e]=i);const s=i.next.size>0||i.previous.size>0;if(!n?.after&&!n?.before&&!s){this.isolatedVertices[e]=i,this.emit("node:added",{key:e,type:"isolated",value:t});return}else this.connectedVertices[e]=i;if(n?.after){const a=Array.isArray(n.after)?n.after:[n.after];a.forEach(o=>{i.previous.add(this.getKey(o))}),a.forEach(o=>{const l=this.getKey(o),c=this.allVertices[l];c?(c.next.add(e),this.moveToConnected(l)):(this.allVertices[l]={value:void 0,previous:new Set,next:new Set([e])},this.connectedVertices[l]=this.allVertices[l])})}if(n?.before){const a=Array.isArray(n.before)?n.before:[n.before];a.forEach(o=>{i.next.add(this.getKey(o))}),a.forEach(o=>{const l=this.getKey(o),c=this.allVertices[l];c?(c.previous.add(e),this.moveToConnected(l)):(this.allVertices[l]={value:void 0,previous:new Set([e]),next:new Set},this.connectedVertices[l]=this.allVertices[l])})}this.emit("node:added",{key:e,type:"connected",value:t}),this.needsSort=!0}remove(e){const t=this.getKey(e);if(this.isolatedVertices[t]){delete this.isolatedVertices[t],delete this.allVertices[t],this.emit("node:removed",{key:t,type:"isolated"});return}const i=this.connectedVertices[t];i&&(i.next.forEach(s=>{const a=this.connectedVertices[s];a&&(a.previous.delete(t),a.previous.size===0&&a.next.size===0&&this.moveToIsolated(s))}),i.previous.forEach(s=>{const a=this.connectedVertices[s];a&&(a.next.delete(t),a.previous.size===0&&a.next.size===0&&this.moveToIsolated(s))}),delete this.connectedVertices[t],delete this.allVertices[t],this.emit("node:removed",{key:t,type:"connected"}),this.needsSort=!0)}mapNodes(e){this.needsSort&&this.sort();const t=[];return this.forEachNode((n,i)=>{t.push(e(n,i))}),t}forEachNode(e){this.needsSort&&this.sort();let t=0;for(;t<this.sortedConnectedValues.length;t++)e(this.sortedConnectedValues[t],t);Reflect.ownKeys(this.isolatedVertices).forEach(n=>{const i=this.isolatedVertices[n];i.value!==void 0&&e(i.value,t++)})}getValueByKey(e){return this.allVertices[e]?.value}getKeyByValue(e){return Reflect.ownKeys(this.connectedVertices).find(t=>this.connectedVertices[t].value===e)??Reflect.ownKeys(this.isolatedVertices).find(t=>this.isolatedVertices[t].value===e)}sort(){const e=new Map,t=[],n=[],i=Reflect.ownKeys(this.connectedVertices).filter(a=>this.connectedVertices[a].value!==void 0);for(i.forEach(a=>{e.set(a,0)}),i.forEach(a=>{this.connectedVertices[a].next.forEach(l=>{this.connectedVertices[l]&&e.set(l,(e.get(l)||0)+1)})}),e.forEach((a,o)=>{a===0&&t.push(o)});t.length>0;){const a=t.shift();n.push(a);const o=i.find(l=>l===a);o&&this.connectedVertices[o]?.next.forEach(l=>{const c=(e.get(l)||0)-1;e.set(l,c),c===0&&t.push(l)})}if(n.length!==i.length)throw new Error("The graph contains a cycle, and thus can not be sorted topologically.");const s=a=>a!==void 0;this.sortedConnectedValues=n.map(a=>this.connectedVertices[a].value).filter(s),this.needsSort=!1}clear(){this.allVertices={},this.isolatedVertices={},this.connectedVertices={},this.sortedConnectedValues=[],this.needsSort=!1}static isKey(e){return typeof e=="string"||typeof e=="symbol"}static isValue(e){return typeof e=="object"&&"key"in e}}class w3{key;stage;callback;runTask=!0;stop(){this.runTask=!1}start(){this.runTask=!0}constructor(e,t,n){this.stage=e,this.key=t,this.callback=n}run(e){this.runTask&&this.callback(e)}}class T3 extends ea{key;scheduler;runTask=!0;stop(){this.runTask=!1}start(){this.runTask=!0}get tasks(){return this.sortedVertices}callback=(e,t)=>t();constructor(e,t,n){super(),this.scheduler=e,this.key=t,this.start=this.start.bind(this),this.stop=this.stop.bind(this),n&&(this.callback=n.bind(this))}createTask(e,t,n){const i=new w3(this,e,t);return this.add(e,i,n),i}getTask(e){return this.getValueByKey(e)}removeTask=this.remove.bind(this);run(e){this.runTask&&this.callback(e,t=>{this.forEachNode(n=>{n.run(t??e)})})}runWithTiming(e){if(!this.runTask)return{};const t={};return this.callback(e,n=>{this.forEachNode(i=>{const s=performance.now();i.run(n??e);const a=performance.now()-s;t[i.key]=a})}),t}getSchedule(){return this.mapNodes(e=>e.key.toString())}}class E3 extends ea{lastTime=performance.now();clampDeltaTo=.1;get stages(){return this.sortedVertices}constructor(e){super(),e?.clampDeltaTo&&(this.clampDeltaTo=e.clampDeltaTo),this.run=this.run.bind(this)}createStage(e,t){const n=new T3(this,e,t?.callback);return this.add(e,n,{after:t?.after,before:t?.before}),n}getStage(e){return this.getValueByKey(e)}removeStage=this.remove.bind(this);run(e){const t=e-this.lastTime;this.forEachNode(n=>{n.run(Math.min(t/1e3,this.clampDeltaTo))}),this.lastTime=e}runWithTiming(e){const t=e-this.lastTime,n={},i=performance.now();return this.forEachNode(s=>{const a=performance.now(),o=s.runWithTiming(Math.min(t/1e3,this.clampDeltaTo)),l=performance.now()-a;n[s.key.toString()]={duration:l,tasks:o}}),{total:performance.now()-i,stages:n}}getSchedule(e={tasks:!0}){return{stages:this.mapNodes(t=>{if(t===void 0)throw new Error("Stage not found");return{key:t.key.toString(),tasks:e.tasks?t.getSchedule():void 0}})}}dispose(){this.clear()}}const A3=r=>{const e=new E3,t=e.createStage(Symbol("threlte-main-stage")),n={scheduler:e,frameInvalidated:!0,autoInvalidations:new Set,shouldAdvance:!1,advance:()=>{n.shouldAdvance=!0},autoRender:un(r.autoRender??!0),renderMode:un(r.renderMode??"on-demand"),invalidate(){n.frameInvalidated=!0},mainStage:t,shouldRender:()=>n.renderMode.current==="always"||n.renderMode.current==="on-demand"&&(n.frameInvalidated||n.autoInvalidations.size>0)||n.renderMode.current==="manual"&&n.shouldAdvance,renderStage:e.createStage(Symbol("threlte-render-stage"),{after:t,callback(i,s){n.shouldRender()&&s()}}),resetFrameInvalidation(){n.frameInvalidated=!1,n.shouldAdvance=!1}};return nn(()=>{n.autoRender.set(r.autoRender??!0)}),nn(()=>{n.renderMode.set(r.renderMode??"on-demand")}),Gi(()=>{n.scheduler.dispose()}),Hi("threlte-scheduler-context",n),n},Hp=()=>{const r=yi("threlte-scheduler-context");if(!r)throw new Error("useScheduler can only be used in a child component to <Canvas>.");return r},C3=()=>{const{size:r}=Vp(),{invalidate:e}=Hp(),t=new Hn(75,0,.1,1e3);t.position.z=5,t.lookAt(0,0,0);const n=un(t);ri(r,s=>{if(n.current===t){const a=n.current;a.aspect=s.width/s.height,a.updateProjectionMatrix(),e()}});const i={camera:n};return Hi("threlte-camera-context",i),i},b1=()=>{const r=yi("threlte-camera-context");if(!r)throw new Error("useCamera can only be used in a child component to <Canvas>.");return r},R3=()=>{const r={removeObjectFromDisposal:e=>{r.disposableObjects.delete(e)},disposableObjectMounted:e=>{const t=r.disposableObjects.get(e);t?r.disposableObjects.set(e,t+1):r.disposableObjects.set(e,1)},disposableObjectUnmounted:e=>{const t=r.disposableObjects.get(e);t&&t>0&&(r.disposableObjects.set(e,t-1),t-1<=0&&(r.shouldDispose=!0))},disposableObjects:new Map,shouldDispose:!1,dispose:async(e=!1)=>{await np(),!(!r.shouldDispose&&!e)&&(r.disposableObjects.forEach((t,n)=>{(t===0||e)&&(n?.dispose?.(),r.disposableObjects.delete(n))}),r.shouldDispose=!1)}};return Gi(()=>{r.dispose(!0)}),Hi("threlte-disposal-context",r),r},S1=()=>{const r=yi("threlte-disposal-context");if(!r)throw new Error("useDisposal can only be used in a child component to <Canvas>.");return r},w1=Symbol("threlte-parent-context"),T1=r=>{const e=un(r);return Hi(w1,e),e},L3=()=>yi(w1),Ff=Symbol("threlte-parent-object3d-context"),P3=r=>{const e=ip(r);return Hi(Ff,e),e},I3=r=>{const e=yi(Ff),t=ki(r),n=Zl([t,e],([i,s])=>i??s);return Hi(Ff,n),t},D3=()=>yi(Ff);function Ns(r,e,t){if(!x3)return{task:void 0,start:()=>{},stop:()=>{},started:ip(!1)};let n,i,s;ea.isKey(r)?(n=r,i=e,s=t):(n=Symbol("useTask"),i=r,s=e);const a=Hp();let o=a.mainStage;if(s){if(s.stage)if(ea.isValue(s.stage))o=s.stage;else{const d=a.scheduler.getStage(s.stage);if(!d)throw new Error(`No stage found with key ${s.stage.toString()}`);o=d}else if(s.after)if(Array.isArray(s.after))for(let d=0;d<s.after.length;d++){const f=s.after[d];if(ea.isValue(f)){o=f.stage;break}}else ea.isValue(s.after)&&(o=s.after.stage);else if(s.before)if(Array.isArray(s.before))for(let d=0;d<s.before.length;d++){const f=s.before[d];if(ea.isValue(f)){o=f.stage;break}}else ea.isValue(s.before)&&(o=s.before.stage)}const l=ki(!1),c=o.createTask(n,i,s),u=()=>{l.set(!0),(s?.autoInvalidate??!0)&&a.autoInvalidations.add(i),c.start()},h=()=>{l.set(!1),(s?.autoInvalidate??!0)&&a.autoInvalidations.delete(i),c.stop()};return s?.autoStart??!0?u():h(),Gi(()=>{h(),o.removeTask(n)}),{task:c,start:u,stop:h,started:{subscribe:l.subscribe}}}const N3=r=>{const e={scene:new Kv};return Hi("threlte-scene-context",e),e},E1=()=>{const r=yi("threlte-scene-context");if(!r)throw new Error("useScene can only be used in a child component to <Canvas>.");return r},F3=r=>{const{dispose:e}=S1(),{camera:t}=b1(),{scene:n}=E1(),{invalidate:i,renderStage:s,autoRender:a,scheduler:o,resetFrameInvalidation:l}=Hp(),{size:c,canvas:u}=Vp(),h=r.createRenderer?r.createRenderer(u):new _1({canvas:u,powerPreference:"high-performance",antialias:!0,alpha:!0}),d=s.createTask(Symbol("threlte-auto-render-task"),()=>{h.render(n,t.current)}),f={renderer:h,colorManagementEnabled:un(r.colorManagementEnabled??!0),colorSpace:un(r.colorSpace??"srgb"),dpr:un(r.dpr??window.devicePixelRatio),shadows:un(r.shadows??qc),toneMapping:un(r.toneMapping??nf),autoRenderTask:d};Hi("threlte-renderer-context",f),ri([f.colorManagementEnabled],([g])=>{Ut.enabled=g}),ri([f.colorSpace],([g])=>{"outputColorSpace"in h&&(h.outputColorSpace=g)}),ri([f.dpr],([g])=>{"setPixelRatio"in h&&h.setPixelRatio(g)});const{start:p,stop:v}=Ns(()=>{!("xr"in h)||h.xr?.isPresenting||(h.setSize(c.current.width,c.current.height),i(),v())},{before:d,autoStart:!1,autoInvalidate:!1});return ri([c],()=>{p()}),ri([f.shadows],([g])=>{"shadowMap"in h&&(h.shadowMap.enabled=!!g,g&&g!==!0?h.shadowMap.type=g:g===!0&&(h.shadowMap.type=qc))}),ri([f.toneMapping],([g])=>{"toneMapping"in h&&(h.toneMapping=g)}),ri([a],([g])=>(g?f.autoRenderTask.start():f.autoRenderTask.stop(),()=>{f.autoRenderTask.stop()})),"setAnimationLoop"in f.renderer&&f.renderer.setAnimationLoop(m=>{e(),o.run(m),l()}),Gi(()=>{if("dispose"in f.renderer){const g=f.renderer.dispose;g()}}),nn(()=>{f.colorManagementEnabled.set(r.colorManagementEnabled??!0)}),nn(()=>{f.colorSpace.set(r.colorSpace??"srgb")}),nn(()=>{f.toneMapping.set(r.toneMapping??nf)}),nn(()=>{f.shadows.set(r.shadows??qc)}),nn(()=>{f.dpr.set(r.dpr??window.devicePixelRatio)}),f},O3=()=>{const r=yi("threlte-renderer-context");if(!r)throw new Error("useRenderer can only be used in a child component to <Canvas>.");return r},U3=()=>{const r=un({});return Hi("threlte-user-context",r),r},B3=()=>{const r=yi("threlte-user-context");if(!r)throw new Error("useUserContext can only be used in a child component to <Canvas>.");return r},z3=r=>{const{scene:e}=N3();return{scene:e,...b3(r),...nE(),...T1(e),...P3(e),...R3(),...A3(r),...C3(),...F3(r),...U3()}};function k3(r,e){An(e,!0),z3(ti(e,["$$slots","$$events","$$legacy","children"]));var n=Xe(),i=Re(n);Bt(i,()=>e.children),we(r,n),Cn()}var V3=bt('<div class="svelte-1osucwe"><canvas class="svelte-1osucwe"><!></canvas></div>');function H3(r,e){let t=ti(e,["$$slots","$$events","$$legacy","children"]),n=ut(void 0),i=ut(void 0);var s=V3(),a=Qt(s),o=Qt(a);{var l=c=>{k3(c,xi({get dom(){return E(i)},get canvas(){return E(n)}},()=>t,{children:(u,h)=>{var d=Xe(),f=Re(d);Bt(f,()=>e.children??Rt),we(u,d)},$$slots:{default:!0}}))};yn(o,c=>{E(n)&&E(i)&&c(l)})}$t(a),Xc(a,c=>Ne(n,c),()=>E(n)),$t(s),Xc(s,c=>Ne(i,c),()=>E(i)),we(r,s)}const Sa=()=>{const r=Hp(),e=O3(),t=b1(),n=E1(),i=Vp();return{advance:r.advance,autoRender:r.autoRender,autoRenderTask:e.autoRenderTask,camera:t.camera,colorManagementEnabled:e.colorManagementEnabled,colorSpace:e.colorSpace,dpr:e.dpr,invalidate:r.invalidate,mainStage:r.mainStage,renderer:e.renderer,renderMode:r.renderMode,renderStage:r.renderStage,scheduler:r.scheduler,shadows:e.shadows,shouldRender:r.shouldRender,dom:i.dom,canvas:i.canvas,size:i.size,toneMapping:e.toneMapping,get scene(){return n.scene},set scene(a){n.scene=a}}},G3=r=>typeof r=="object"&&r!==null,W3=()=>{const{invalidate:r}=Sa();let e;const t=ki(),n=L3(),i=D3(),s=T1(),a=I3();ri([t,s,n,i],([c,u,h,d])=>{if(e?.(),e=void 0,!u){r();return}if(c!==void 0){if(c){if(typeof c=="function")e=c({ref:u,parent:h,parentObject3D:d});else if(mi(c,"Object3D")&&mi(u,"Object3D"))e=()=>c?.remove(u),c?.add(u);else if(typeof c=="string"){const{target:f,key:p}=M1(h,c),v=f[p];e=()=>f[p]=v,f[p]=u}}}else mi(u,"Object3D")?(e=()=>d?.remove(u),d?.add(u)):G3(h)&&(mi(u,"Material")?h.material=u:mi(u,"BufferGeometry")&&(h.geometry=u));r()});const o=c=>{t.set(c)},l=c=>{s.set(c),mi(c,"Object3D")&&a.set(c)};return Gi(()=>{e?.(),r()}),{updateRef:l,updateAttach:o}},$3=r=>mi(r,"PerspectiveCamera")||mi(r,"OrthographicCamera"),X3=()=>{const{invalidate:r,size:e,camera:t}=Sa(),n=ki(),i=ki(!0),s=ki(!1);return ri([n,s],([c,u])=>{!c||!u||(t.set(c),r())}),ri([n,i,e],([c,u,h])=>{!c||u||(mi(c,"OrthographicCamera")?(c.left=h.width/-2,c.right=h.width/2,c.top=h.height/2,c.bottom=h.height/-2,c.updateProjectionMatrix(),c.updateMatrixWorld(),r()):mi(c,"PerspectiveCamera")&&(c.aspect=h.width/h.height,c.updateProjectionMatrix(),c.updateMatrixWorld(),r()))}),{updateRef:c=>{$3(c)&&n.set(c)},updateManual:c=>{i.set(c)},updateMakeDefault:c=>{s.set(c)}}},q3=r=>{let e,t,n=!1;const i=()=>{e?.(),e=r?.(t)},s=a=>{t=a,n&&i()};return ql(()=>{i(),n=!0}),Gi(()=>e?.()),{updateRef:s}},Qy=Symbol("threlte-disposable-object-context"),Z3=r=>typeof r?.dispose=="function"&&!mi(r,"Scene"),Y3=r=>{let e;const t=ki(void 0),n=ki(r),{disposableObjectMounted:i,disposableObjectUnmounted:s,removeObjectFromDisposal:a}=S1(),o=yi(Qy),l=Zl([n,o??ki(!0)],([h,d])=>h??d??!0);return Hi(Qy,l),ri([t,l],([h,d])=>{h===e?d?e&&i(e):e&&a(e):d&&(e&&s(e),h&&i(h)),e=h}),Gi(()=>{if(!Wd(l))return;const h=Wd(t);h&&s(h)}),{updateRef:h=>{Z3(h)&&t.set(h)},updateDispose:h=>{n.set(h)}}},j3=r=>r!==null&&typeof r=="object"&&"addEventListener"in r&&"removeEventListener"in r,J3=(r={})=>{const e=i=>{i?.type&&r[`on${i.type}`]?.(i)},t=(i,s)=>{const a=[];for(const o of Object.keys(s))o.startsWith("on")&&(i.addEventListener(o.slice(2),e),a.push(o));return()=>{for(let o=0;o<a.length;o++)i.removeEventListener(a[o],e)}};return{updateRef:i=>{if(j3(i))return t(i,r)}}};let cv;const K3=r=>{cv=r},Q3=()=>{const r=cv;return cv=void 0,r},eD=r=>{const t=yi("threlte-plugin-context");if(!t)return;const n=[],i=Object.values(t);if(i.length){const s=r();for(let a=0;a<i.length;a++){const o=i[a],l=o(s);l&&l.pluginProps&&n.push(...l.pluginProps)}}return{pluginsProps:n}},tD=new Set(["$$scope","$$slots","type","args","attach","instance"]),nD=new Set(["fov","aspect","near","far","left","right","top","bottom","zoom"]),iD=r=>typeof r=="string"||typeof r=="number"||typeof r=="boolean"||typeof r>"u"||r===null,ex=(r,e,t)=>!Array.isArray(t)&&typeof t=="number"&&typeof r[e]=="object"&&r[e]!==null&&typeof r[e]?.setScalar=="function"&&!r[e]?.isColor?(n,i,s)=>{n[i].setScalar(s)}:typeof r[e]?.set=="function"&&typeof r=="object"&&r!==null?Array.isArray(t)?(n,i,s)=>{n[i].set(...s)}:(n,i,s)=>{n[i].set(s)}:(n,i,s)=>{n[i]=s},rD=()=>{const{invalidate:r}=Sa(),e=new Map,t=new Map,n=(s,a,o,l)=>{if(iD(o)){const h=e.get(a);if(h&&h.instance===s&&h.value===o)return;e.set(a,{instance:s,value:o})}const{key:c,target:u}=M1(s,a);if(o!=null){const h=t.get(a);if(h)h(u,c,o);else{const d=ex(u,c,o);t.set(a,d),d(u,c,o)}}else ex(u,c,o)(u,c,o);l.manualCamera||nD.has(c)&&(u.isPerspectiveCamera||u.isOrthographicCamera)&&u.updateProjectionMatrix()};return{updateProp:(s,a,o,l)=>{!tD.has(a)&&!l.pluginsProps?.includes(a)&&n(s,a,o,l),r()}}},sD=/^\s*class\s+/,aD=r=>typeof r!="function"?!1:sD.test(r.toString()),oD=r=>Array.isArray(r),lD=(r,e)=>aD(r)?oD(e)?new r(...e):new r:r;function Km(r,e){An(e,!0);let t=st(e,"is",19,Q3),n=st(e,"manual",3,!1),i=st(e,"makeDefault",3,!1),s=st(e,"ref",15),a=ti(e,["$$slots","$$events","$$legacy","is","args","attach","manual","makeDefault","dispose","ref","oncreate","children"]),o=xt(()=>lD(t(),e.args));const l=q3(e.oncreate);fi(()=>{s()!==E(o)&&(s(E(o)),l.updateRef(E(o)))});const c=eD(()=>({get ref(){return E(o)},get args(){return e.args},get attach(){return e.attach},get manual(){return n()},get makeDefault(){return i()},get dispose(){return e.dispose},get props(){return a}})),{updateProp:u}=rD();Object.keys(a).forEach(m=>{fi(()=>{u(E(o),m,a[m],{manualCamera:n(),pluginsProps:c?.pluginsProps})})});const h=W3();fi(()=>h.updateAttach(e.attach)),fi(()=>h.updateRef(E(o)));const d=X3();fi(()=>d.updateRef(E(o))),fi(()=>d.updateManual(n())),fi(()=>d.updateMakeDefault(i()));const f=Y3(e.dispose);fi(()=>f.updateRef(E(o))),fi(()=>f.updateDispose(e.dispose));const p=J3(a);fi(()=>p.updateRef(E(o)));var v=Xe(),g=Re(v);Bt(g,()=>e.children??Rt,()=>({ref:E(o)})),we(r,v),Cn()}const cD={},Le=new Proxy(function(){},{apply(r,e,t){return Km(...t)},get(r,e){if(typeof e!="string")return Km;const t=cD[e]||f3[e];if(t===void 0)throw new Error(`No Three.js module found for ${e}. Did you forget to extend the catalogue?`);return K3(t),Km}});function uD(r,e){const t="threlte-plugin-context";e&&Hi(t,{...yi(t),[r]:e})}function hD(r,e,t){const n=B3();if(!n)throw new Error("No user context store found, did you invoke this function outside of your main <Canvas> component?");return e?(n.update(i=>{if(r in i)return i;const s=typeof e=="function"?e():e;return i[r]=s,i}),n.current[r]):Zl(n,i=>i[r])}function L_(r,e){const{remember:t,clear:n}=iE();let i;const s=()=>{const l=new r(...e?.args??[]);return e?.extend?.(l),l};return{load:(l,c)=>{const u=async h=>{if(i||(i=s()),"loadAsync"in i){const d=await i.loadAsync(h,c?.onProgress);return c?.transform?.(d)??d}else return new Promise((d,f)=>{i.load(h,p=>d(c?.transform?.(p)??p),p=>c?.onProgress?.(p),f)})};if(Array.isArray(l)){const h=l.map(f=>t(()=>u(f),[r,f]));return Jm(Promise.all(h))}else if(typeof l=="string"){const h=t(()=>u(l),[r,l]);return Jm(h)}else{const h=Object.values(l).map(f=>t(()=>u(f),[r,f]));return Jm(Promise.all(h).then(f=>Object.fromEntries(Object.entries(l).map(([p],v)=>[p,f[v]]))))}},clear:l=>{Array.isArray(l)?l.forEach(c=>{n([r,c])}):typeof l=="string"?n([r,l]):Object.entries(l).forEach(([c,u])=>{n([r,c,u])})},loader:i}}function tx(r,e){if(e===$b)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),r;if(e===Lf||e===$v){let t=r.getIndex();if(t===null){const a=[],o=r.getAttribute("position");if(o!==void 0){for(let l=0;l<o.count;l++)a.push(l);r.setIndex(a),t=r.getIndex()}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),r}const n=t.count-2,i=[];if(e===Lf)for(let a=1;a<=n;a++)i.push(t.getX(0)),i.push(t.getX(a)),i.push(t.getX(a+1));else for(let a=0;a<n;a++)a%2===0?(i.push(t.getX(a)),i.push(t.getX(a+1)),i.push(t.getX(a+2))):(i.push(t.getX(a+2)),i.push(t.getX(a+1)),i.push(t.getX(a)));i.length/3!==n&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");const s=r.clone();return s.setIndex(i),s.clearGroups(),s}else return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",e),r}class dD extends bi{constructor(e){super(e),this.dracoLoader=null,this.ktx2Loader=null,this.meshoptDecoder=null,this.pluginCallbacks=[],this.register(function(t){return new vD(t)}),this.register(function(t){return new _D(t)}),this.register(function(t){return new AD(t)}),this.register(function(t){return new CD(t)}),this.register(function(t){return new RD(t)}),this.register(function(t){return new xD(t)}),this.register(function(t){return new MD(t)}),this.register(function(t){return new bD(t)}),this.register(function(t){return new SD(t)}),this.register(function(t){return new gD(t)}),this.register(function(t){return new wD(t)}),this.register(function(t){return new yD(t)}),this.register(function(t){return new ED(t)}),this.register(function(t){return new TD(t)}),this.register(function(t){return new pD(t)}),this.register(function(t){return new LD(t)}),this.register(function(t){return new PD(t)})}load(e,t,n,i){const s=this;let a;if(this.resourcePath!=="")a=this.resourcePath;else if(this.path!==""){const c=la.extractUrlBase(e);a=la.resolveURL(c,this.path)}else a=la.extractUrlBase(e);this.manager.itemStart(e);const o=function(c){i?i(c):console.error(c),s.manager.itemError(e),s.manager.itemEnd(e)},l=new ar(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,function(c){try{s.parse(c,a,function(u){t(u),s.manager.itemEnd(e)},o)}catch(u){o(u)}},n,o)}setDRACOLoader(e){return this.dracoLoader=e,this}setKTX2Loader(e){return this.ktx2Loader=e,this}setMeshoptDecoder(e){return this.meshoptDecoder=e,this}register(e){return this.pluginCallbacks.indexOf(e)===-1&&this.pluginCallbacks.push(e),this}unregister(e){return this.pluginCallbacks.indexOf(e)!==-1&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this}parse(e,t,n,i){let s;const a={},o={},l=new TextDecoder;if(typeof e=="string")s=JSON.parse(e);else if(e instanceof ArrayBuffer)if(l.decode(new Uint8Array(e,0,4))===A1){try{a[Vt.KHR_BINARY_GLTF]=new ID(e)}catch(h){i&&i(h);return}s=JSON.parse(a[Vt.KHR_BINARY_GLTF].content)}else s=JSON.parse(l.decode(e));else s=e;if(s.asset===void 0||s.asset.version[0]<2){i&&i(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));return}const c=new $D(s,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,requestHeader:this.requestHeader,manager:this.manager,ktx2Loader:this.ktx2Loader,meshoptDecoder:this.meshoptDecoder});c.fileLoader.setRequestHeader(this.requestHeader);for(let u=0;u<this.pluginCallbacks.length;u++){const h=this.pluginCallbacks[u](c);h.name||console.error("THREE.GLTFLoader: Invalid plugin found: missing name"),o[h.name]=h,a[h.name]=!0}if(s.extensionsUsed)for(let u=0;u<s.extensionsUsed.length;++u){const h=s.extensionsUsed[u],d=s.extensionsRequired||[];switch(h){case Vt.KHR_MATERIALS_UNLIT:a[h]=new mD;break;case Vt.KHR_DRACO_MESH_COMPRESSION:a[h]=new DD(s,this.dracoLoader);break;case Vt.KHR_TEXTURE_TRANSFORM:a[h]=new ND;break;case Vt.KHR_MESH_QUANTIZATION:a[h]=new FD;break;default:d.indexOf(h)>=0&&o[h]===void 0&&console.warn('THREE.GLTFLoader: Unknown extension "'+h+'".')}}c.setExtensions(a),c.setPlugins(o),c.parse(n,i)}parseAsync(e,t){const n=this;return new Promise(function(i,s){n.parse(e,t,i,s)})}}function fD(){let r={};return{get:function(e){return r[e]},add:function(e,t){r[e]=t},remove:function(e){delete r[e]},removeAll:function(){r={}}}}const Vt={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_DISPERSION:"KHR_materials_dispersion",KHR_MATERIALS_IOR:"KHR_materials_ior",KHR_MATERIALS_SHEEN:"KHR_materials_sheen",KHR_MATERIALS_SPECULAR:"KHR_materials_specular",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_IRIDESCENCE:"KHR_materials_iridescence",KHR_MATERIALS_ANISOTROPY:"KHR_materials_anisotropy",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_MATERIALS_VOLUME:"KHR_materials_volume",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",KHR_MATERIALS_EMISSIVE_STRENGTH:"KHR_materials_emissive_strength",EXT_MATERIALS_BUMP:"EXT_materials_bump",EXT_TEXTURE_WEBP:"EXT_texture_webp",EXT_TEXTURE_AVIF:"EXT_texture_avif",EXT_MESHOPT_COMPRESSION:"EXT_meshopt_compression",EXT_MESH_GPU_INSTANCING:"EXT_mesh_gpu_instancing"};class pD{constructor(e){this.parser=e,this.name=Vt.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}_markDefs(){const e=this.parser,t=this.parser.json.nodes||[];for(let n=0,i=t.length;n<i;n++){const s=t[n];s.extensions&&s.extensions[this.name]&&s.extensions[this.name].light!==void 0&&e._addNodeRef(this.cache,s.extensions[this.name].light)}}_loadLight(e){const t=this.parser,n="light:"+e;let i=t.cache.get(n);if(i)return i;const s=t.json,l=((s.extensions&&s.extensions[this.name]||{}).lights||[])[e];let c;const u=new Ye(16777215);l.color!==void 0&&u.setRGB(l.color[0],l.color[1],l.color[2],ai);const h=l.range!==void 0?l.range:0;switch(l.type){case"directional":c=new y_(u),c.target.position.set(0,0,-1),c.add(c.target);break;case"point":c=new __(u),c.distance=h;break;case"spot":c=new v_(u),c.distance=h,l.spot=l.spot||{},l.spot.innerConeAngle=l.spot.innerConeAngle!==void 0?l.spot.innerConeAngle:0,l.spot.outerConeAngle=l.spot.outerConeAngle!==void 0?l.spot.outerConeAngle:Math.PI/4,c.angle=l.spot.outerConeAngle,c.penumbra=1-l.spot.innerConeAngle/l.spot.outerConeAngle,c.target.position.set(0,0,-1),c.add(c.target);break;default:throw new Error("THREE.GLTFLoader: Unexpected light type: "+l.type)}return c.position.set(0,0,0),ys(c,l),l.intensity!==void 0&&(c.intensity=l.intensity),c.name=t.createUniqueName(l.name||"light_"+e),i=Promise.resolve(c),t.cache.add(n,i),i}getDependency(e,t){if(e==="light")return this._loadLight(t)}createNodeAttachment(e){const t=this,n=this.parser,s=n.json.nodes[e],o=(s.extensions&&s.extensions[this.name]||{}).light;return o===void 0?null:this._loadLight(o).then(function(l){return n._getNodeRef(t.cache,o,l)})}}class mD{constructor(){this.name=Vt.KHR_MATERIALS_UNLIT}getMaterialType(){return ir}extendParams(e,t,n){const i=[];e.color=new Ye(1,1,1),e.opacity=1;const s=t.pbrMetallicRoughness;if(s){if(Array.isArray(s.baseColorFactor)){const a=s.baseColorFactor;e.color.setRGB(a[0],a[1],a[2],ai),e.opacity=a[3]}s.baseColorTexture!==void 0&&i.push(n.assignTexture(e,"map",s.baseColorTexture,In))}return Promise.all(i)}}class gD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_EMISSIVE_STRENGTH}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=i.extensions[this.name].emissiveStrength;return s!==void 0&&(t.emissiveIntensity=s),Promise.resolve()}}class vD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_CLEARCOAT}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];if(a.clearcoatFactor!==void 0&&(t.clearcoat=a.clearcoatFactor),a.clearcoatTexture!==void 0&&s.push(n.assignTexture(t,"clearcoatMap",a.clearcoatTexture)),a.clearcoatRoughnessFactor!==void 0&&(t.clearcoatRoughness=a.clearcoatRoughnessFactor),a.clearcoatRoughnessTexture!==void 0&&s.push(n.assignTexture(t,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),a.clearcoatNormalTexture!==void 0&&(s.push(n.assignTexture(t,"clearcoatNormalMap",a.clearcoatNormalTexture)),a.clearcoatNormalTexture.scale!==void 0)){const o=a.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new Pe(o,o)}return Promise.all(s)}}class _D{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_DISPERSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=i.extensions[this.name];return t.dispersion=s.dispersion!==void 0?s.dispersion:0,Promise.resolve()}}class yD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_IRIDESCENCE}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];return a.iridescenceFactor!==void 0&&(t.iridescence=a.iridescenceFactor),a.iridescenceTexture!==void 0&&s.push(n.assignTexture(t,"iridescenceMap",a.iridescenceTexture)),a.iridescenceIor!==void 0&&(t.iridescenceIOR=a.iridescenceIor),t.iridescenceThicknessRange===void 0&&(t.iridescenceThicknessRange=[100,400]),a.iridescenceThicknessMinimum!==void 0&&(t.iridescenceThicknessRange[0]=a.iridescenceThicknessMinimum),a.iridescenceThicknessMaximum!==void 0&&(t.iridescenceThicknessRange[1]=a.iridescenceThicknessMaximum),a.iridescenceThicknessTexture!==void 0&&s.push(n.assignTexture(t,"iridescenceThicknessMap",a.iridescenceThicknessTexture)),Promise.all(s)}}class xD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_SHEEN}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[];t.sheenColor=new Ye(0,0,0),t.sheenRoughness=0,t.sheen=1;const a=i.extensions[this.name];if(a.sheenColorFactor!==void 0){const o=a.sheenColorFactor;t.sheenColor.setRGB(o[0],o[1],o[2],ai)}return a.sheenRoughnessFactor!==void 0&&(t.sheenRoughness=a.sheenRoughnessFactor),a.sheenColorTexture!==void 0&&s.push(n.assignTexture(t,"sheenColorMap",a.sheenColorTexture,In)),a.sheenRoughnessTexture!==void 0&&s.push(n.assignTexture(t,"sheenRoughnessMap",a.sheenRoughnessTexture)),Promise.all(s)}}class MD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_TRANSMISSION}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];return a.transmissionFactor!==void 0&&(t.transmission=a.transmissionFactor),a.transmissionTexture!==void 0&&s.push(n.assignTexture(t,"transmissionMap",a.transmissionTexture)),Promise.all(s)}}class bD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_VOLUME}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];t.thickness=a.thicknessFactor!==void 0?a.thicknessFactor:0,a.thicknessTexture!==void 0&&s.push(n.assignTexture(t,"thicknessMap",a.thicknessTexture)),t.attenuationDistance=a.attenuationDistance||1/0;const o=a.attenuationColor||[1,1,1];return t.attenuationColor=new Ye().setRGB(o[0],o[1],o[2],ai),Promise.all(s)}}class SD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_IOR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const i=this.parser.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=i.extensions[this.name];return t.ior=s.ior!==void 0?s.ior:1.5,Promise.resolve()}}class wD{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_SPECULAR}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];t.specularIntensity=a.specularFactor!==void 0?a.specularFactor:1,a.specularTexture!==void 0&&s.push(n.assignTexture(t,"specularIntensityMap",a.specularTexture));const o=a.specularColorFactor||[1,1,1];return t.specularColor=new Ye().setRGB(o[0],o[1],o[2],ai),a.specularColorTexture!==void 0&&s.push(n.assignTexture(t,"specularColorMap",a.specularColorTexture,In)),Promise.all(s)}}class TD{constructor(e){this.parser=e,this.name=Vt.EXT_MATERIALS_BUMP}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];return t.bumpScale=a.bumpFactor!==void 0?a.bumpFactor:1,a.bumpTexture!==void 0&&s.push(n.assignTexture(t,"bumpMap",a.bumpTexture)),Promise.all(s)}}class ED{constructor(e){this.parser=e,this.name=Vt.KHR_MATERIALS_ANISOTROPY}getMaterialType(e){const n=this.parser.json.materials[e];return!n.extensions||!n.extensions[this.name]?null:yr}extendMaterialParams(e,t){const n=this.parser,i=n.json.materials[e];if(!i.extensions||!i.extensions[this.name])return Promise.resolve();const s=[],a=i.extensions[this.name];return a.anisotropyStrength!==void 0&&(t.anisotropy=a.anisotropyStrength),a.anisotropyRotation!==void 0&&(t.anisotropyRotation=a.anisotropyRotation),a.anisotropyTexture!==void 0&&s.push(n.assignTexture(t,"anisotropyMap",a.anisotropyTexture)),Promise.all(s)}}class AD{constructor(e){this.parser=e,this.name=Vt.KHR_TEXTURE_BASISU}loadTexture(e){const t=this.parser,n=t.json,i=n.textures[e];if(!i.extensions||!i.extensions[this.name])return null;const s=i.extensions[this.name],a=t.options.ktx2Loader;if(!a){if(n.extensionsRequired&&n.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return null}return t.loadTextureImage(e,s.source,a)}}class CD{constructor(e){this.parser=e,this.name=Vt.EXT_TEXTURE_WEBP}loadTexture(e){const t=this.name,n=this.parser,i=n.json,s=i.textures[e];if(!s.extensions||!s.extensions[t])return null;const a=s.extensions[t],o=i.images[a.source];let l=n.textureLoader;if(o.uri){const c=n.options.manager.getHandler(o.uri);c!==null&&(l=c)}return n.loadTextureImage(e,a.source,l)}}class RD{constructor(e){this.parser=e,this.name=Vt.EXT_TEXTURE_AVIF}loadTexture(e){const t=this.name,n=this.parser,i=n.json,s=i.textures[e];if(!s.extensions||!s.extensions[t])return null;const a=s.extensions[t],o=i.images[a.source];let l=n.textureLoader;if(o.uri){const c=n.options.manager.getHandler(o.uri);c!==null&&(l=c)}return n.loadTextureImage(e,a.source,l)}}class LD{constructor(e){this.name=Vt.EXT_MESHOPT_COMPRESSION,this.parser=e}loadBufferView(e){const t=this.parser.json,n=t.bufferViews[e];if(n.extensions&&n.extensions[this.name]){const i=n.extensions[this.name],s=this.parser.getDependency("buffer",i.buffer),a=this.parser.options.meshoptDecoder;if(!a||!a.supported){if(t.extensionsRequired&&t.extensionsRequired.indexOf(this.name)>=0)throw new Error("THREE.GLTFLoader: setMeshoptDecoder must be called before loading compressed files");return null}return s.then(function(o){const l=i.byteOffset||0,c=i.byteLength||0,u=i.count,h=i.byteStride,d=new Uint8Array(o,l,c);return a.decodeGltfBufferAsync?a.decodeGltfBufferAsync(u,h,d,i.mode,i.filter).then(function(f){return f.buffer}):a.ready.then(function(){const f=new ArrayBuffer(u*h);return a.decodeGltfBuffer(new Uint8Array(f),u,h,d,i.mode,i.filter),f})})}else return null}}class PD{constructor(e){this.name=Vt.EXT_MESH_GPU_INSTANCING,this.parser=e}createNodeMesh(e){const t=this.parser.json,n=t.nodes[e];if(!n.extensions||!n.extensions[this.name]||n.mesh===void 0)return null;const i=t.meshes[n.mesh];for(const c of i.primitives)if(c.mode!==ur.TRIANGLES&&c.mode!==ur.TRIANGLE_STRIP&&c.mode!==ur.TRIANGLE_FAN&&c.mode!==void 0)return null;const a=n.extensions[this.name].attributes,o=[],l={};for(const c in a)o.push(this.parser.getDependency("accessor",a[c]).then(u=>(l[c]=u,l[c])));return o.length<1?null:(o.push(this.parser.createNodeMesh(e)),Promise.all(o).then(c=>{const u=c.pop(),h=u.isGroup?u.children:[u],d=c[0].count,f=[];for(const p of h){const v=new ft,g=new k,m=new Dn,_=new k(1,1,1),x=new t_(p.geometry,p.material,d);for(let y=0;y<d;y++)l.TRANSLATION&&g.fromBufferAttribute(l.TRANSLATION,y),l.ROTATION&&m.fromBufferAttribute(l.ROTATION,y),l.SCALE&&_.fromBufferAttribute(l.SCALE,y),x.setMatrixAt(y,v.compose(g,m,_));for(const y in l)if(y==="_COLOR_0"){const b=l[y];x.instanceColor=new ao(b.array,b.itemSize,b.normalized)}else y!=="TRANSLATION"&&y!=="ROTATION"&&y!=="SCALE"&&p.geometry.setAttribute(y,l[y]);Wt.prototype.copy.call(x,p),this.parser.assignFinalMaterial(x),f.push(x)}return u.isGroup?(u.clear(),u.add(...f),u):f[0]}))}}const A1="glTF",Tc=12,nx={JSON:1313821514,BIN:5130562};class ID{constructor(e){this.name=Vt.KHR_BINARY_GLTF,this.content=null,this.body=null;const t=new DataView(e,0,Tc),n=new TextDecoder;if(this.header={magic:n.decode(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==A1)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");const i=this.header.length-Tc,s=new DataView(e,Tc);let a=0;for(;a<i;){const o=s.getUint32(a,!0);a+=4;const l=s.getUint32(a,!0);if(a+=4,l===nx.JSON){const c=new Uint8Array(e,Tc+a,o);this.content=n.decode(c)}else if(l===nx.BIN){const c=Tc+a;this.body=e.slice(c,c+o)}a+=o}if(this.content===null)throw new Error("THREE.GLTFLoader: JSON content not found.")}}class DD{constructor(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=Vt.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}decodePrimitive(e,t){const n=this.json,i=this.dracoLoader,s=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,o={},l={},c={};for(const u in a){const h=uv[u]||u.toLowerCase();o[h]=a[u]}for(const u in e.attributes){const h=uv[u]||u.toLowerCase();if(a[u]!==void 0){const d=n.accessors[e.attributes[u]],f=El[d.componentType];c[h]=f.name,l[h]=d.normalized===!0}}return t.getDependency("bufferView",s).then(function(u){return new Promise(function(h,d){i.decodeDracoFile(u,function(f){for(const p in f.attributes){const v=f.attributes[p],g=l[p];g!==void 0&&(v.normalized=g)}h(f)},o,c,ai,d)})})}}class ND{constructor(){this.name=Vt.KHR_TEXTURE_TRANSFORM}extendTexture(e,t){return(t.texCoord===void 0||t.texCoord===e.channel)&&t.offset===void 0&&t.rotation===void 0&&t.scale===void 0||(e=e.clone(),t.texCoord!==void 0&&(e.channel=t.texCoord),t.offset!==void 0&&e.offset.fromArray(t.offset),t.rotation!==void 0&&(e.rotation=t.rotation),t.scale!==void 0&&e.repeat.fromArray(t.scale),e.needsUpdate=!0),e}}class FD{constructor(){this.name=Vt.KHR_MESH_QUANTIZATION}}class C1 extends Ql{constructor(e,t,n,i){super(e,t,n,i)}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i*3+i;for(let a=0;a!==i;a++)t[a]=n[s+a];return t}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=o*2,c=o*3,u=i-t,h=(n-t)/u,d=h*h,f=d*h,p=e*c,v=p-c,g=-2*f+3*d,m=f-d,_=1-g,x=m-d+h;for(let y=0;y!==o;y++){const b=a[v+y+o],M=a[v+y+l]*u,w=a[p+y+o],C=a[p+y]*u;s[y]=_*b+x*M+g*w+m*C}return s}}const OD=new Dn;class UD extends C1{interpolate_(e,t,n,i){const s=super.interpolate_(e,t,n,i);return OD.fromArray(s).normalize().toArray(s),s}}const ur={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6},El={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},ix={9728:Wn,9729:xn,9984:ap,9985:wl,9986:Ya,9987:nr},rx={33071:tr,33648:Ll,10497:fa},Qm={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},uv={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv1",TEXCOORD_2:"uv2",TEXCOORD_3:"uv3",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},Gs={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},BD={CUBICSPLINE:void 0,LINEAR:Ol,STEP:Fl},eg={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};function zD(r){return r.DefaultMaterial===void 0&&(r.DefaultMaterial=new ih({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:es})),r.DefaultMaterial}function za(r,e,t){for(const n in t.extensions)r[n]===void 0&&(e.userData.gltfExtensions=e.userData.gltfExtensions||{},e.userData.gltfExtensions[n]=t.extensions[n])}function ys(r,e){e.extras!==void 0&&(typeof e.extras=="object"?Object.assign(r.userData,e.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+e.extras))}function kD(r,e,t){let n=!1,i=!1,s=!1;for(let c=0,u=e.length;c<u;c++){const h=e[c];if(h.POSITION!==void 0&&(n=!0),h.NORMAL!==void 0&&(i=!0),h.COLOR_0!==void 0&&(s=!0),n&&i&&s)break}if(!n&&!i&&!s)return Promise.resolve(r);const a=[],o=[],l=[];for(let c=0,u=e.length;c<u;c++){const h=e[c];if(n){const d=h.POSITION!==void 0?t.getDependency("accessor",h.POSITION):r.attributes.position;a.push(d)}if(i){const d=h.NORMAL!==void 0?t.getDependency("accessor",h.NORMAL):r.attributes.normal;o.push(d)}if(s){const d=h.COLOR_0!==void 0?t.getDependency("accessor",h.COLOR_0):r.attributes.color;l.push(d)}}return Promise.all([Promise.all(a),Promise.all(o),Promise.all(l)]).then(function(c){const u=c[0],h=c[1],d=c[2];return n&&(r.morphAttributes.position=u),i&&(r.morphAttributes.normal=h),s&&(r.morphAttributes.color=d),r.morphTargetsRelative=!0,r})}function VD(r,e){if(r.updateMorphTargets(),e.weights!==void 0)for(let t=0,n=e.weights.length;t<n;t++)r.morphTargetInfluences[t]=e.weights[t];if(e.extras&&Array.isArray(e.extras.targetNames)){const t=e.extras.targetNames;if(r.morphTargetInfluences.length===t.length){r.morphTargetDictionary={};for(let n=0,i=t.length;n<i;n++)r.morphTargetDictionary[t[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function HD(r){let e;const t=r.extensions&&r.extensions[Vt.KHR_DRACO_MESH_COMPRESSION];if(t?e="draco:"+t.bufferView+":"+t.indices+":"+tg(t.attributes):e=r.indices+":"+tg(r.attributes)+":"+r.mode,r.targets!==void 0)for(let n=0,i=r.targets.length;n<i;n++)e+=":"+tg(r.targets[n]);return e}function tg(r){let e="";const t=Object.keys(r).sort();for(let n=0,i=t.length;n<i;n++)e+=t[n]+":"+r[t[n]]+";";return e}function hv(r){switch(r){case Int8Array:return 1/127;case Uint8Array:return 1/255;case Int16Array:return 1/32767;case Uint16Array:return 1/65535;default:throw new Error("THREE.GLTFLoader: Unsupported normalized accessor component type.")}}function GD(r){return r.search(/\.jpe?g($|\?)/i)>0||r.search(/^data\:image\/jpeg/)===0?"image/jpeg":r.search(/\.webp($|\?)/i)>0||r.search(/^data\:image\/webp/)===0?"image/webp":r.search(/\.ktx2($|\?)/i)>0||r.search(/^data\:image\/ktx2/)===0?"image/ktx2":"image/png"}const WD=new ft;class $D{constructor(e={},t={}){this.json=e,this.extensions={},this.plugins={},this.options=t,this.cache=new fD,this.associations=new Map,this.primitiveCache={},this.nodeCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.sourceCache={},this.textureCache={},this.nodeNamesUsed={};let n=!1,i=-1,s=!1,a=-1;if(typeof navigator<"u"){const o=navigator.userAgent;n=/^((?!chrome|android).)*safari/i.test(o)===!0;const l=o.match(/Version\/(\d+)/);i=n&&l?parseInt(l[1],10):-1,s=o.indexOf("Firefox")>-1,a=s?o.match(/Firefox\/([0-9]+)\./)[1]:-1}typeof createImageBitmap>"u"||n&&i<17||s&&a<98?this.textureLoader=new m_(this.options.manager):this.textureLoader=new r1(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.textureLoader.setRequestHeader(this.options.requestHeader),this.fileLoader=new ar(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),this.options.crossOrigin==="use-credentials"&&this.fileLoader.setWithCredentials(!0)}setExtensions(e){this.extensions=e}setPlugins(e){this.plugins=e}parse(e,t){const n=this,i=this.json,s=this.extensions;this.cache.removeAll(),this.nodeCache={},this._invokeAll(function(a){return a._markDefs&&a._markDefs()}),Promise.all(this._invokeAll(function(a){return a.beforeRoot&&a.beforeRoot()})).then(function(){return Promise.all([n.getDependencies("scene"),n.getDependencies("animation"),n.getDependencies("camera")])}).then(function(a){const o={scene:a[0][i.scene||0],scenes:a[0],animations:a[1],cameras:a[2],asset:i.asset,parser:n,userData:{}};return za(s,o,i),ys(o,i),Promise.all(n._invokeAll(function(l){return l.afterRoot&&l.afterRoot(o)})).then(function(){for(const l of o.scenes)l.updateMatrixWorld();e(o)})}).catch(t)}_markDefs(){const e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[];for(let i=0,s=t.length;i<s;i++){const a=t[i].joints;for(let o=0,l=a.length;o<l;o++)e[a[o]].isBone=!0}for(let i=0,s=e.length;i<s;i++){const a=e[i];a.mesh!==void 0&&(this._addNodeRef(this.meshCache,a.mesh),a.skin!==void 0&&(n[a.mesh].isSkinnedMesh=!0)),a.camera!==void 0&&this._addNodeRef(this.cameraCache,a.camera)}}_addNodeRef(e,t){t!==void 0&&(e.refs[t]===void 0&&(e.refs[t]=e.uses[t]=0),e.refs[t]++)}_getNodeRef(e,t,n){if(e.refs[t]<=1)return n;const i=n.clone(),s=(a,o)=>{const l=this.associations.get(a);l!=null&&this.associations.set(o,l);for(const[c,u]of a.children.entries())s(u,o.children[c])};return s(n,i),i.name+="_instance_"+e.uses[t]++,i}_invokeOne(e){const t=Object.values(this.plugins);t.push(this);for(let n=0;n<t.length;n++){const i=e(t[n]);if(i)return i}return null}_invokeAll(e){const t=Object.values(this.plugins);t.unshift(this);const n=[];for(let i=0;i<t.length;i++){const s=e(t[i]);s&&n.push(s)}return n}getDependency(e,t){const n=e+":"+t;let i=this.cache.get(n);if(!i){switch(e){case"scene":i=this.loadScene(t);break;case"node":i=this._invokeOne(function(s){return s.loadNode&&s.loadNode(t)});break;case"mesh":i=this._invokeOne(function(s){return s.loadMesh&&s.loadMesh(t)});break;case"accessor":i=this.loadAccessor(t);break;case"bufferView":i=this._invokeOne(function(s){return s.loadBufferView&&s.loadBufferView(t)});break;case"buffer":i=this.loadBuffer(t);break;case"material":i=this._invokeOne(function(s){return s.loadMaterial&&s.loadMaterial(t)});break;case"texture":i=this._invokeOne(function(s){return s.loadTexture&&s.loadTexture(t)});break;case"skin":i=this.loadSkin(t);break;case"animation":i=this._invokeOne(function(s){return s.loadAnimation&&s.loadAnimation(t)});break;case"camera":i=this.loadCamera(t);break;default:if(i=this._invokeOne(function(s){return s!=this&&s.getDependency&&s.getDependency(e,t)}),!i)throw new Error("Unknown type: "+e);break}this.cache.add(n,i)}return i}getDependencies(e){let t=this.cache.get(e);if(!t){const n=this,i=this.json[e+(e==="mesh"?"es":"s")]||[];t=Promise.all(i.map(function(s,a){return n.getDependency(e,a)})),this.cache.add(e,t)}return t}loadBuffer(e){const t=this.json.buffers[e],n=this.fileLoader;if(t.type&&t.type!=="arraybuffer")throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(t.uri===void 0&&e===0)return Promise.resolve(this.extensions[Vt.KHR_BINARY_GLTF].body);const i=this.options;return new Promise(function(s,a){n.load(la.resolveURL(t.uri,i.path),s,void 0,function(){a(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))})})}loadBufferView(e){const t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then(function(n){const i=t.byteLength||0,s=t.byteOffset||0;return n.slice(s,s+i)})}loadAccessor(e){const t=this,n=this.json,i=this.json.accessors[e];if(i.bufferView===void 0&&i.sparse===void 0){const a=Qm[i.type],o=El[i.componentType],l=i.normalized===!0,c=new o(i.count*a);return Promise.resolve(new qt(c,a,l))}const s=[];return i.bufferView!==void 0?s.push(this.getDependency("bufferView",i.bufferView)):s.push(null),i.sparse!==void 0&&(s.push(this.getDependency("bufferView",i.sparse.indices.bufferView)),s.push(this.getDependency("bufferView",i.sparse.values.bufferView))),Promise.all(s).then(function(a){const o=a[0],l=Qm[i.type],c=El[i.componentType],u=c.BYTES_PER_ELEMENT,h=u*l,d=i.byteOffset||0,f=i.bufferView!==void 0?n.bufferViews[i.bufferView].byteStride:void 0,p=i.normalized===!0;let v,g;if(f&&f!==h){const m=Math.floor(d/f),_="InterleavedBuffer:"+i.bufferView+":"+i.componentType+":"+m+":"+i.count;let x=t.cache.get(_);x||(v=new c(o,m*f,i.count*f/u),x=new Ju(v,f/u),t.cache.add(_,x)),g=new zl(x,l,d%f/u,p)}else o===null?v=new c(i.count*l):v=new c(o,d,i.count*l),g=new qt(v,l,p);if(i.sparse!==void 0){const m=Qm.SCALAR,_=El[i.sparse.indices.componentType],x=i.sparse.indices.byteOffset||0,y=i.sparse.values.byteOffset||0,b=new _(a[1],x,i.sparse.count*m),M=new c(a[2],y,i.sparse.count*l);o!==null&&(g=new qt(g.array.slice(),g.itemSize,g.normalized)),g.normalized=!1;for(let w=0,C=b.length;w<C;w++){const T=b[w];if(g.setX(T,M[w*l]),l>=2&&g.setY(T,M[w*l+1]),l>=3&&g.setZ(T,M[w*l+2]),l>=4&&g.setW(T,M[w*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}g.normalized=p}return g})}loadTexture(e){const t=this.json,n=this.options,s=t.textures[e].source,a=t.images[s];let o=this.textureLoader;if(a.uri){const l=n.manager.getHandler(a.uri);l!==null&&(o=l)}return this.loadTextureImage(e,s,o)}loadTextureImage(e,t,n){const i=this,s=this.json,a=s.textures[e],o=s.images[t],l=(o.uri||o.bufferView)+":"+a.sampler;if(this.textureCache[l])return this.textureCache[l];const c=this.loadImageSource(t,n).then(function(u){u.flipY=!1,u.name=a.name||o.name||"",u.name===""&&typeof o.uri=="string"&&o.uri.startsWith("data:image/")===!1&&(u.name=o.uri);const d=(s.samplers||{})[a.sampler]||{};return u.magFilter=ix[d.magFilter]||xn,u.minFilter=ix[d.minFilter]||nr,u.wrapS=rx[d.wrapS]||fa,u.wrapT=rx[d.wrapT]||fa,u.generateMipmaps=!u.isCompressedTexture&&u.minFilter!==Wn&&u.minFilter!==xn,i.associations.set(u,{textures:e}),u}).catch(function(){return null});return this.textureCache[l]=c,c}loadImageSource(e,t){const n=this,i=this.json,s=this.options;if(this.sourceCache[e]!==void 0)return this.sourceCache[e].then(h=>h.clone());const a=i.images[e],o=self.URL||self.webkitURL;let l=a.uri||"",c=!1;if(a.bufferView!==void 0)l=n.getDependency("bufferView",a.bufferView).then(function(h){c=!0;const d=new Blob([h],{type:a.mimeType});return l=o.createObjectURL(d),l});else if(a.uri===void 0)throw new Error("THREE.GLTFLoader: Image "+e+" is missing URI and bufferView");const u=Promise.resolve(l).then(function(h){return new Promise(function(d,f){let p=d;t.isImageBitmapLoader===!0&&(p=function(v){const g=new Vn(v);g.needsUpdate=!0,d(g)}),t.load(la.resolveURL(h,s.path),p,void 0,f)})}).then(function(h){return c===!0&&o.revokeObjectURL(l),ys(h,a),h.userData.mimeType=a.mimeType||GD(a.uri),h}).catch(function(h){throw console.error("THREE.GLTFLoader: Couldn't load texture",l),h});return this.sourceCache[e]=u,u}assignTexture(e,t,n,i){const s=this;return this.getDependency("texture",n.index).then(function(a){if(!a)return null;if(n.texCoord!==void 0&&n.texCoord>0&&(a=a.clone(),a.channel=n.texCoord),s.extensions[Vt.KHR_TEXTURE_TRANSFORM]){const o=n.extensions!==void 0?n.extensions[Vt.KHR_TEXTURE_TRANSFORM]:void 0;if(o){const l=s.associations.get(a);a=s.extensions[Vt.KHR_TEXTURE_TRANSFORM].extendTexture(a,o),s.associations.set(a,l)}}return i!==void 0&&(a.colorSpace=i),e[t]=a,a})}assignFinalMaterial(e){const t=e.geometry;let n=e.material;const i=t.attributes.tangent===void 0,s=t.attributes.color!==void 0,a=t.attributes.normal===void 0;if(e.isPoints){const o="PointsMaterial:"+n.uuid;let l=this.cache.get(o);l||(l=new Sp,$n.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,l.sizeAttenuation=!1,this.cache.add(o,l)),n=l}else if(e.isLine){const o="LineBasicMaterial:"+n.uuid;let l=this.cache.get(o);l||(l=new Mi,$n.prototype.copy.call(l,n),l.color.copy(n.color),l.map=n.map,this.cache.add(o,l)),n=l}if(i||s||a){let o="ClonedMaterial:"+n.uuid+":";i&&(o+="derivative-tangents:"),s&&(o+="vertex-colors:"),a&&(o+="flat-shading:");let l=this.cache.get(o);l||(l=n.clone(),s&&(l.vertexColors=!0),a&&(l.flatShading=!0),i&&(l.normalScale&&(l.normalScale.y*=-1),l.clearcoatNormalScale&&(l.clearcoatNormalScale.y*=-1)),this.cache.add(o,l),this.associations.set(l,this.associations.get(n))),n=l}e.material=n}getMaterialType(){return ih}loadMaterial(e){const t=this,n=this.json,i=this.extensions,s=n.materials[e];let a;const o={},l=s.extensions||{},c=[];if(l[Vt.KHR_MATERIALS_UNLIT]){const h=i[Vt.KHR_MATERIALS_UNLIT];a=h.getMaterialType(),c.push(h.extendParams(o,s,t))}else{const h=s.pbrMetallicRoughness||{};if(o.color=new Ye(1,1,1),o.opacity=1,Array.isArray(h.baseColorFactor)){const d=h.baseColorFactor;o.color.setRGB(d[0],d[1],d[2],ai),o.opacity=d[3]}h.baseColorTexture!==void 0&&c.push(t.assignTexture(o,"map",h.baseColorTexture,In)),o.metalness=h.metallicFactor!==void 0?h.metallicFactor:1,o.roughness=h.roughnessFactor!==void 0?h.roughnessFactor:1,h.metallicRoughnessTexture!==void 0&&(c.push(t.assignTexture(o,"metalnessMap",h.metallicRoughnessTexture)),c.push(t.assignTexture(o,"roughnessMap",h.metallicRoughnessTexture))),a=this._invokeOne(function(d){return d.getMaterialType&&d.getMaterialType(e)}),c.push(Promise.all(this._invokeAll(function(d){return d.extendMaterialParams&&d.extendMaterialParams(e,o)})))}s.doubleSided===!0&&(o.side=Qi);const u=s.alphaMode||eg.OPAQUE;if(u===eg.BLEND?(o.transparent=!0,o.depthWrite=!1):(o.transparent=!1,u===eg.MASK&&(o.alphaTest=s.alphaCutoff!==void 0?s.alphaCutoff:.5)),s.normalTexture!==void 0&&a!==ir&&(c.push(t.assignTexture(o,"normalMap",s.normalTexture)),o.normalScale=new Pe(1,1),s.normalTexture.scale!==void 0)){const h=s.normalTexture.scale;o.normalScale.set(h,h)}if(s.occlusionTexture!==void 0&&a!==ir&&(c.push(t.assignTexture(o,"aoMap",s.occlusionTexture)),s.occlusionTexture.strength!==void 0&&(o.aoMapIntensity=s.occlusionTexture.strength)),s.emissiveFactor!==void 0&&a!==ir){const h=s.emissiveFactor;o.emissive=new Ye().setRGB(h[0],h[1],h[2],ai)}return s.emissiveTexture!==void 0&&a!==ir&&c.push(t.assignTexture(o,"emissiveMap",s.emissiveTexture,In)),Promise.all(c).then(function(){const h=new a(o);return s.name&&(h.name=s.name),ys(h,s),t.associations.set(h,{materials:e}),s.extensions&&za(i,h,s),h})}createUniqueName(e){const t=ln.sanitizeNodeName(e||"");return t in this.nodeNamesUsed?t+"_"+ ++this.nodeNamesUsed[t]:(this.nodeNamesUsed[t]=0,t)}loadGeometries(e){const t=this,n=this.extensions,i=this.primitiveCache;function s(o){return n[Vt.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(o,t).then(function(l){return sx(l,o,t)})}const a=[];for(let o=0,l=e.length;o<l;o++){const c=e[o],u=HD(c),h=i[u];if(h)a.push(h.promise);else{let d;c.extensions&&c.extensions[Vt.KHR_DRACO_MESH_COMPRESSION]?d=s(c):d=sx(new Lt,c,t),i[u]={primitive:c,promise:d},a.push(d)}}return Promise.all(a)}loadMesh(e){const t=this,n=this.json,i=this.extensions,s=n.meshes[e],a=s.primitives,o=[];for(let l=0,c=a.length;l<c;l++){const u=a[l].material===void 0?zD(this.cache):this.getDependency("material",a[l].material);o.push(u)}return o.push(t.loadGeometries(a)),Promise.all(o).then(function(l){const c=l.slice(0,l.length-1),u=l[l.length-1],h=[];for(let f=0,p=u.length;f<p;f++){const v=u[f],g=a[f];let m;const _=c[f];if(g.mode===ur.TRIANGLES||g.mode===ur.TRIANGLE_STRIP||g.mode===ur.TRIANGLE_FAN||g.mode===void 0)m=s.isSkinnedMesh===!0?new e_(v,_):new Mn(v,_),m.isSkinnedMesh===!0&&m.normalizeSkinWeights(),g.mode===ur.TRIANGLE_STRIP?m.geometry=tx(m.geometry,$v):g.mode===ur.TRIANGLE_FAN&&(m.geometry=tx(m.geometry,Lf));else if(g.mode===ur.LINES)m=new kr(v,_);else if(g.mode===ur.LINE_STRIP)m=new Ds(v,_);else if(g.mode===ur.LINE_LOOP)m=new n_(v,_);else if(g.mode===ur.POINTS)m=new wp(v,_);else throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+g.mode);Object.keys(m.geometry.morphAttributes).length>0&&VD(m,s),m.name=t.createUniqueName(s.name||"mesh_"+e),ys(m,s),g.extensions&&za(i,m,g),t.assignFinalMaterial(m),h.push(m)}for(let f=0,p=h.length;f<p;f++)t.associations.set(h[f],{meshes:e,primitives:f});if(h.length===1)return s.extensions&&za(i,h[0],s),h[0];const d=new mr;s.extensions&&za(i,d,s),t.associations.set(d,{meshes:e});for(let f=0,p=h.length;f<p;f++)d.add(h[f]);return d})}loadCamera(e){let t;const n=this.json.cameras[e],i=n[n.type];if(!i){console.warn("THREE.GLTFLoader: Missing camera parameters.");return}return n.type==="perspective"?t=new Hn(er.radToDeg(i.yfov),i.aspectRatio||1,i.znear||1,i.zfar||2e6):n.type==="orthographic"&&(t=new ec(-i.xmag,i.xmag,i.ymag,-i.ymag,i.znear,i.zfar)),n.name&&(t.name=this.createUniqueName(n.name)),ys(t,n),Promise.resolve(t)}loadSkin(e){const t=this.json.skins[e],n=[];for(let i=0,s=t.joints.length;i<s;i++)n.push(this._loadNodeShallow(t.joints[i]));return t.inverseBindMatrices!==void 0?n.push(this.getDependency("accessor",t.inverseBindMatrices)):n.push(null),Promise.all(n).then(function(i){const s=i.pop(),a=i,o=[],l=[];for(let c=0,u=a.length;c<u;c++){const h=a[c];if(h){o.push(h);const d=new ft;s!==null&&d.fromArray(s.array,c*16),l.push(d)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[c])}return new Ku(o,l)})}loadAnimation(e){const t=this.json,n=this,i=t.animations[e],s=i.name?i.name:"animation_"+e,a=[],o=[],l=[],c=[],u=[];for(let h=0,d=i.channels.length;h<d;h++){const f=i.channels[h],p=i.samplers[f.sampler],v=f.target,g=v.node,m=i.parameters!==void 0?i.parameters[p.input]:p.input,_=i.parameters!==void 0?i.parameters[p.output]:p.output;v.node!==void 0&&(a.push(this.getDependency("node",g)),o.push(this.getDependency("accessor",m)),l.push(this.getDependency("accessor",_)),c.push(p),u.push(v))}return Promise.all([Promise.all(a),Promise.all(o),Promise.all(l),Promise.all(c),Promise.all(u)]).then(function(h){const d=h[0],f=h[1],p=h[2],v=h[3],g=h[4],m=[];for(let _=0,x=d.length;_<x;_++){const y=d[_],b=f[_],M=p[_],w=v[_],C=g[_];if(y===void 0)continue;y.updateMatrix&&y.updateMatrix();const T=n._createAnimationTracks(y,b,M,w,C);if(T)for(let S=0;S<T.length;S++)m.push(T[S])}return new Vl(s,void 0,m)})}createNodeMesh(e){const t=this.json,n=this,i=t.nodes[e];return i.mesh===void 0?null:n.getDependency("mesh",i.mesh).then(function(s){const a=n._getNodeRef(n.meshCache,i.mesh,s);return i.weights!==void 0&&a.traverse(function(o){if(o.isMesh)for(let l=0,c=i.weights.length;l<c;l++)o.morphTargetInfluences[l]=i.weights[l]}),a})}loadNode(e){const t=this.json,n=this,i=t.nodes[e],s=n._loadNodeShallow(e),a=[],o=i.children||[];for(let c=0,u=o.length;c<u;c++)a.push(n.getDependency("node",o[c]));const l=i.skin===void 0?Promise.resolve(null):n.getDependency("skin",i.skin);return Promise.all([s,Promise.all(a),l]).then(function(c){const u=c[0],h=c[1],d=c[2];d!==null&&u.traverse(function(f){f.isSkinnedMesh&&f.bind(d,WD)});for(let f=0,p=h.length;f<p;f++)u.add(h[f]);return u})}_loadNodeShallow(e){const t=this.json,n=this.extensions,i=this;if(this.nodeCache[e]!==void 0)return this.nodeCache[e];const s=t.nodes[e],a=s.name?i.createUniqueName(s.name):"",o=[],l=i._invokeOne(function(c){return c.createNodeMesh&&c.createNodeMesh(e)});return l&&o.push(l),s.camera!==void 0&&o.push(i.getDependency("camera",s.camera).then(function(c){return i._getNodeRef(i.cameraCache,s.camera,c)})),i._invokeAll(function(c){return c.createNodeAttachment&&c.createNodeAttachment(e)}).forEach(function(c){o.push(c)}),this.nodeCache[e]=Promise.all(o).then(function(c){let u;if(s.isBone===!0?u=new Mp:c.length>1?u=new mr:c.length===1?u=c[0]:u=new Wt,u!==c[0])for(let h=0,d=c.length;h<d;h++)u.add(c[h]);if(s.name&&(u.userData.name=s.name,u.name=a),ys(u,s),s.extensions&&za(n,u,s),s.matrix!==void 0){const h=new ft;h.fromArray(s.matrix),u.applyMatrix4(h)}else s.translation!==void 0&&u.position.fromArray(s.translation),s.rotation!==void 0&&u.quaternion.fromArray(s.rotation),s.scale!==void 0&&u.scale.fromArray(s.scale);return i.associations.has(u)||i.associations.set(u,{}),i.associations.get(u).nodes=e,u}),this.nodeCache[e]}loadScene(e){const t=this.extensions,n=this.json.scenes[e],i=this,s=new mr;n.name&&(s.name=i.createUniqueName(n.name)),ys(s,n),n.extensions&&za(t,s,n);const a=n.nodes||[],o=[];for(let l=0,c=a.length;l<c;l++)o.push(i.getDependency("node",a[l]));return Promise.all(o).then(function(l){for(let u=0,h=l.length;u<h;u++)s.add(l[u]);const c=u=>{const h=new Map;for(const[d,f]of i.associations)(d instanceof $n||d instanceof Vn)&&h.set(d,f);return u.traverse(d=>{const f=i.associations.get(d);f!=null&&h.set(d,f)}),h};return i.associations=c(s),s})}_createAnimationTracks(e,t,n,i,s){const a=[],o=e.name?e.name:e.uuid,l=[];Gs[s.path]===Gs.weights?e.traverse(function(d){d.morphTargetInfluences&&l.push(d.name?d.name:d.uuid)}):l.push(o);let c;switch(Gs[s.path]){case Gs.weights:c=lo;break;case Gs.rotation:c=co;break;case Gs.translation:case Gs.scale:c=uo;break;default:switch(n.itemSize){case 1:c=lo;break;case 2:case 3:default:c=uo;break}break}const u=i.interpolation!==void 0?BD[i.interpolation]:Ol,h=this._getArrayFromAccessor(n);for(let d=0,f=l.length;d<f;d++){const p=new c(l[d]+"."+Gs[s.path],t.array,h,u);i.interpolation==="CUBICSPLINE"&&this._createCubicSplineTrackInterpolant(p),a.push(p)}return a}_getArrayFromAccessor(e){let t=e.array;if(e.normalized){const n=hv(t.constructor),i=new Float32Array(t.length);for(let s=0,a=t.length;s<a;s++)i[s]=t[s]*n;t=i}return t}_createCubicSplineTrackInterpolant(e){e.createInterpolant=function(n){const i=this instanceof co?UD:C1;return new i(this.times,this.values,this.getValueSize()/3,n)},e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0}}function XD(r,e,t){const n=e.attributes,i=new On;if(n.POSITION!==void 0){const o=t.json.accessors[n.POSITION],l=o.min,c=o.max;if(l!==void 0&&c!==void 0){if(i.set(new k(l[0],l[1],l[2]),new k(c[0],c[1],c[2])),o.normalized){const u=hv(El[o.componentType]);i.min.multiplyScalar(u),i.max.multiplyScalar(u)}}else{console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.");return}}else return;const s=e.targets;if(s!==void 0){const o=new k,l=new k;for(let c=0,u=s.length;c<u;c++){const h=s[c];if(h.POSITION!==void 0){const d=t.json.accessors[h.POSITION],f=d.min,p=d.max;if(f!==void 0&&p!==void 0){if(l.setX(Math.max(Math.abs(f[0]),Math.abs(p[0]))),l.setY(Math.max(Math.abs(f[1]),Math.abs(p[1]))),l.setZ(Math.max(Math.abs(f[2]),Math.abs(p[2]))),d.normalized){const v=hv(El[d.componentType]);l.multiplyScalar(v)}o.max(l)}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}i.expandByVector(o)}r.boundingBox=i;const a=new kn;i.getCenter(a.center),a.radius=i.min.distanceTo(i.max)/2,r.boundingSphere=a}function sx(r,e,t){const n=e.attributes,i=[];function s(a,o){return t.getDependency("accessor",a).then(function(l){r.setAttribute(o,l)})}for(const a in n){const o=uv[a]||a.toLowerCase();o in r.attributes||i.push(s(n[a],o))}if(e.indices!==void 0&&!r.index){const a=t.getDependency("accessor",e.indices).then(function(o){r.setIndex(o)});i.push(a)}return Ut.workingColorSpace!==ai&&"COLOR_0"in n&&console.warn(`THREE.GLTFLoader: Converting vertex colors from "srgb-linear" to "${Ut.workingColorSpace}" not supported.`),ys(r,e),XD(r,e,t),Promise.all(i).then(function(){return e.targets!==void 0?kD(r,e.targets,t):r})}const qD=r=>{const e={nodes:{},materials:{}};return r&&r.traverse(t=>{t.name&&(e.nodes[t.name]=t),t.material&&!e.materials[t.material.name]&&(e.materials[t.material.name]=t.material)}),e};function Mr(r,e){const t=typeof r=="string"?e:r,n=L_(dD,{extend(a){t?.dracoLoader&&a.setDRACOLoader(t.dracoLoader),t?.meshoptDecoder&&a.setMeshoptDecoder(t.meshoptDecoder),t?.ktx2Loader&&a.setKTX2Loader(t.ktx2Loader)}}),i=a=>n.load(a,{transform(o){return{...o,...qD(o.scene)}}}),s=typeof r=="string"?r:void 0;return s?i(s):{load:i}}const ng=new WeakMap;class ZD extends bi{constructor(e){super(e),this.decoderPath="",this.decoderConfig={},this.decoderBinary=null,this.decoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.defaultAttributeIDs={position:"POSITION",normal:"NORMAL",color:"COLOR",uv:"TEX_COORD"},this.defaultAttributeTypes={position:"Float32Array",normal:"Float32Array",color:"Float32Array",uv:"Float32Array"}}setDecoderPath(e){return this.decoderPath=e,this}setDecoderConfig(e){return this.decoderConfig=e,this}setWorkerLimit(e){return this.workerLimit=e,this}load(e,t,n,i){const s=new ar(this.manager);s.setPath(this.path),s.setResponseType("arraybuffer"),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,a=>{this.parse(a,t,i)},n,i)}parse(e,t,n=()=>{}){this.decodeDracoFile(e,t,null,null,In,n).catch(n)}decodeDracoFile(e,t,n,i,s=ai,a=()=>{}){const o={attributeIDs:n||this.defaultAttributeIDs,attributeTypes:i||this.defaultAttributeTypes,useUniqueIDs:!!n,vertexColorSpace:s};return this.decodeGeometry(e,o).then(t).catch(a)}decodeGeometry(e,t){const n=JSON.stringify(t);if(ng.has(e)){const l=ng.get(e);if(l.key===n)return l.promise;if(e.byteLength===0)throw new Error("THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.")}let i;const s=this.workerNextTaskID++,a=e.byteLength,o=this._getWorker(s,a).then(l=>(i=l,new Promise((c,u)=>{i._callbacks[s]={resolve:c,reject:u},i.postMessage({type:"decode",id:s,taskConfig:t,buffer:e},[e])}))).then(l=>this._createGeometry(l.geometry));return o.catch(()=>!0).then(()=>{i&&s&&this._releaseTask(i,s)}),ng.set(e,{key:n,promise:o}),o}_createGeometry(e){const t=new Lt;e.index&&t.setIndex(new qt(e.index.array,1));for(let n=0;n<e.attributes.length;n++){const i=e.attributes[n],s=i.name,a=i.array,o=i.itemSize,l=new qt(a,o);s==="color"&&(this._assignVertexColorSpace(l,i.vertexColorSpace),l.normalized=!(a instanceof Float32Array)),t.setAttribute(s,l)}return t}_assignVertexColorSpace(e,t){if(t!==In)return;const n=new Ye;for(let i=0,s=e.count;i<s;i++)n.fromBufferAttribute(e,i),Ut.toWorkingColorSpace(n,In),e.setXYZ(i,n.r,n.g,n.b)}_loadLibrary(e,t){const n=new ar(this.manager);return n.setPath(this.decoderPath),n.setResponseType(t),n.setWithCredentials(this.withCredentials),new Promise((i,s)=>{n.load(e,i,void 0,s)})}preload(){return this._initDecoder(),this}_initDecoder(){if(this.decoderPending)return this.decoderPending;const e=typeof WebAssembly!="object"||this.decoderConfig.type==="js",t=[];return e?t.push(this._loadLibrary("draco_decoder.js","text")):(t.push(this._loadLibrary("draco_wasm_wrapper.js","text")),t.push(this._loadLibrary("draco_decoder.wasm","arraybuffer"))),this.decoderPending=Promise.all(t).then(n=>{const i=n[0];e||(this.decoderConfig.wasmBinary=n[1]);const s=YD.toString(),a=["/* draco decoder */",i,"","/* worker */",s.substring(s.indexOf("{")+1,s.lastIndexOf("}"))].join(`
`);this.workerSourceURL=URL.createObjectURL(new Blob([a]))}),this.decoderPending}_getWorker(e,t){return this._initDecoder().then(()=>{if(this.workerPool.length<this.workerLimit){const i=new Worker(this.workerSourceURL);i._callbacks={},i._taskCosts={},i._taskLoad=0,i.postMessage({type:"init",decoderConfig:this.decoderConfig}),i.onmessage=function(s){const a=s.data;switch(a.type){case"decode":i._callbacks[a.id].resolve(a);break;case"error":i._callbacks[a.id].reject(a);break;default:console.error('THREE.DRACOLoader: Unexpected message, "'+a.type+'"')}},this.workerPool.push(i)}else this.workerPool.sort(function(i,s){return i._taskLoad>s._taskLoad?-1:1});const n=this.workerPool[this.workerPool.length-1];return n._taskCosts[e]=t,n._taskLoad+=t,n})}_releaseTask(e,t){e._taskLoad-=e._taskCosts[t],delete e._callbacks[t],delete e._taskCosts[t]}debug(){console.log("Task load: ",this.workerPool.map(e=>e._taskLoad))}dispose(){for(let e=0;e<this.workerPool.length;++e)this.workerPool[e].terminate();return this.workerPool.length=0,this.workerSourceURL!==""&&URL.revokeObjectURL(this.workerSourceURL),this}}function YD(){let r,e;onmessage=function(a){const o=a.data;switch(o.type){case"init":r=o.decoderConfig,e=new Promise(function(u){r.onModuleLoaded=function(h){u({draco:h})},DracoDecoderModule(r)});break;case"decode":const l=o.buffer,c=o.taskConfig;e.then(u=>{const h=u.draco,d=new h.Decoder;try{const f=t(h,d,new Int8Array(l),c),p=f.attributes.map(v=>v.array.buffer);f.index&&p.push(f.index.array.buffer),self.postMessage({type:"decode",id:o.id,geometry:f},p)}catch(f){console.error(f),self.postMessage({type:"error",id:o.id,error:f.message})}finally{h.destroy(d)}});break}};function t(a,o,l,c){const u=c.attributeIDs,h=c.attributeTypes;let d,f;const p=o.GetEncodedGeometryType(l);if(p===a.TRIANGULAR_MESH)d=new a.Mesh,f=o.DecodeArrayToMesh(l,l.byteLength,d);else if(p===a.POINT_CLOUD)d=new a.PointCloud,f=o.DecodeArrayToPointCloud(l,l.byteLength,d);else throw new Error("THREE.DRACOLoader: Unexpected geometry type.");if(!f.ok()||d.ptr===0)throw new Error("THREE.DRACOLoader: Decoding failed: "+f.error_msg());const v={index:null,attributes:[]};for(const g in u){const m=self[h[g]];let _,x;if(c.useUniqueIDs)x=u[g],_=o.GetAttributeByUniqueId(d,x);else{if(x=o.GetAttributeId(d,a[u[g]]),x===-1)continue;_=o.GetAttribute(d,x)}const y=i(a,o,d,g,m,_);g==="color"&&(y.vertexColorSpace=c.vertexColorSpace),v.attributes.push(y)}return p===a.TRIANGULAR_MESH&&(v.index=n(a,o,d)),a.destroy(d),v}function n(a,o,l){const u=l.num_faces()*3,h=u*4,d=a._malloc(h);o.GetTrianglesUInt32Array(l,h,d);const f=new Uint32Array(a.HEAPF32.buffer,d,u).slice();return a._free(d),{array:f,itemSize:1}}function i(a,o,l,c,u,h){const d=h.num_components(),p=l.num_points()*d,v=p*u.BYTES_PER_ELEMENT,g=s(a,u),m=a._malloc(v);o.GetAttributeDataArrayForAllPoints(l,h,g,v,m);const _=new u(a.HEAPF32.buffer,m,p).slice();return a._free(m),{name:c,array:_,itemSize:d}}function s(a,o){switch(o){case Float32Array:return a.DT_FLOAT32;case Int8Array:return a.DT_INT8;case Int16Array:return a.DT_INT16;case Int32Array:return a.DT_INT32;case Uint8Array:return a.DT_UINT8;case Uint16Array:return a.DT_UINT16;case Uint32Array:return a.DT_UINT32}}}const jD="https://www.gstatic.com/draco/versioned/decoders/1.4.3/",ax={},Gp=(r=jD)=>{const e=ax[r];if(e)return e;const t=new ZD().setDecoderPath(r);return ax[r]=t,t},ox=r=>!!r?.isObject3D,JD=r=>!!r?.subscribe&&typeof r.subscribe=="function";function R1(r,e){const t=JD(r)?r:ki(void 0),n=un(ox(r)?r:ox(e)?e:void 0),i=Zl([n,t],([c,u])=>c??u?.scene),s=un({}),a=new c1(void 0);ri([t,i],async([c,u])=>{if(!c||!c.animations.length||!u)return;await np();const h=c.animations.reduce((d,f)=>{const p=a.clipAction(f,u);return{...d,[f.name]:p}},{});return s.set(h),()=>{Object.values(h).forEach(d=>{const f=d;f.stop(),a.uncacheClip(f.getClip())})}});const{start:o,stop:l}=Ns(c=>{a.update(c)},{autoStart:!1});return ri(s,c=>{Object.keys(c).length?o():l()}),{gltf:t,root:n,mixer:a,actions:s}}const ka=r=>({subscribe:r.subscribe,get current(){return r.current}});let nu=0;const P_=un(!1),Wp=un(!1),I_=un(void 0),D_=un(0),N_=un(0),L1=un([]),F_=un(0),{onStart:KD,onLoad:QD,onError:eN}=bo;bo.onStart=(r,e,t)=>{KD?.(r,e,t),Wp.set(!0),I_.set(r),D_.set(e),N_.set(t);const n=(e-nu)/(t-nu);F_.set(n),n===1&&P_.set(!0)};bo.onLoad=()=>{QD?.(),Wp.set(!1)};bo.onError=r=>{eN?.(r),L1.update(e=>[...e,r])};bo.onProgress=(r,e,t)=>{e===t&&(nu=t),Wp.set(!0),I_.set(r),D_.set(e),N_.set(t);const n=(e-nu)/(t-nu)||1;F_.set(n),n===1&&P_.set(!0)};ka(Wp),ka(I_),ka(D_),ka(N_),ka(L1),ka(F_),ka(P_);new k;new k;new k;new kn;new ft;new yo;new k;const tN=Symbol("THRELTE_SUSPENSE_CONTEXT_IDENTIFIER"),P1=()=>{const r=yi(tN),e=new Set,t=i=>(r&&(r.suspend(i),e.add(i)),i),n={suspended:Zl(r?.suspended??ip(!1),i=>i)};return Gi(()=>{if(r){for(const i of e)r.onComponentDestroy(i);e.clear()}}),Object.assign(t,n)},nN=`
#include <common>
#include <logdepthbuf_pars_vertex>
void main() {
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    #include <logdepthbuf_vertex>
}`,lx=`
#include <logdepthbuf_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4(0.0,0.0,0.0,0.0);
}`,iN=`
#include <common>
#include <logdepthbuf_pars_vertex>

void main() {
  vec2 center = vec2(0., 1.);
  float rotation = 0.0;
  
  // This is somewhat arbitrary, but it seems to work well
  // Need to figure out how to derive this dynamically if it even matters
  float size = 0.03;

  vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
  vec2 scale = vec2(
    length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) ),
    length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) )
  );

  bool isPerspective = isPerspectiveMatrix( projectionMatrix );
  if ( isPerspective ) scale *= - mvPosition.z;

  vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;
  vec2 rotatedPosition;
  rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
  rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
  mvPosition.xy += rotatedPosition;

  gl_Position = projectionMatrix * mvPosition;
  #include <logdepthbuf_vertex>
}`,ho=new k,$p=new k,rN=new k,sN=new Pe,aN=(r,e,t)=>{const n=ho.setFromMatrixPosition(r.matrixWorld);n.project(e);const i=t.width/2,s=t.height/2;return[n.x*i+i,-(n.y*s)+s]},oN=(r,e)=>{const t=ho.setFromMatrixPosition(r.matrixWorld),n=$p.setFromMatrixPosition(e.matrixWorld),i=t.sub(n),s=e.getWorldDirection(rN);return i.angleTo(s)>Math.PI/2},lN=(r,e,t,n)=>{const i=ho.setFromMatrixPosition(r.matrixWorld),s=$p.copy(ho);s.project(e),t.setFromCamera(sN.set(s.x,s.y),e);const a=t.intersectObjects(n,!0);if(a.length){const o=a[0].distance;return i.distanceTo(t.ray.origin)<o}return!0},cN=(r,e)=>{if(mi(e,"OrthographicCamera"))return e.zoom;if(mi(e,"PerspectiveCamera")){const t=ho.setFromMatrixPosition(r.matrixWorld),n=$p.setFromMatrixPosition(e.matrixWorld),i=e.fov*Math.PI/180,s=t.distanceTo(n);return 1/(2*Math.tan(i/2)*s)}else return 1},uN=(r,e,t)=>{const n=ho.setFromMatrixPosition(r.matrixWorld),i=$p.setFromMatrixPosition(e.matrixWorld),s=n.distanceTo(i),a=(t[1]-t[0])/(e.far-e.near),o=t[1]-a*e.far;return Math.round(a*s+o)},jn=r=>Math.abs(r)<1e-10?0:r,I1=(r,e,t="")=>{const{elements:n}=r;return`${t}matrix3d(
    ${jn(e[0]*n[0])},${jn(e[1]*n[1])},${jn(e[2]*n[2])},${jn(e[3]*n[3])},
    ${jn(e[4]*n[4])},${jn(e[5]*n[5])},${jn(e[6]*n[6])},${jn(e[7]*n[7])},
    ${jn(e[8]*n[8])},${jn(e[9]*n[9])},${jn(e[10]*n[10])},${jn(e[11]*n[11])},
    ${jn(e[12]*n[12])},${jn(e[13]*n[13])},${jn(e[14]*n[14])},${jn(e[15]*n[15])}
  )`},hN=(r=>e=>I1(e,r))([1,-1,1,1,1,-1,1,1,1,-1,1,1,1,-1,1,1]),dN=(r=>(e,t)=>I1(e,r(t),"translate(-50%,-50%)"))(r=>[1/r,1/r,1/r,1,-1/r,-1/r,-1/r,-1,1/r,1/r,1/r,1,1,1,1,1]),fN=(r,e,t)=>{if(mi(r,"OrthographicCamera"))return 1;if(mi(r,"PerspectiveCamera")){const{width:n,height:i}=t,s=r.getWorldPosition(ho).distanceTo(e),a=r.fov*Math.PI/180,l=2*Math.tan(a/2)*s*(n/i);return n/l}throw new Error("getViewportFactor needs a Perspective or Orthographic Camera")};let td=!1,Of=0,cx="",ux="",hx="";const dx=(r,e)=>{Of===1&&!td?(cx=r.style.zIndex,ux=r.style.position,hx=r.style.pointerEvents,r.style.zIndex=`${Math.floor(e/2)}`,r.style.position="absolute",r.style.pointerEvents="none",td=!0):Of===0&&td&&(r.style.zIndex=cx,r.style.position=ux,r.style.pointerEvents=hx,td=!1)};var pN=bt("<!> <!>",1),mN=bt("<div><div><div><!></div></div></div>"),gN=bt("<div><!></div>"),vN=bt("<!> <!>",1);function nd(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(T,"$size",t),s=()=>As(w,"$camera",t),a=()=>As(pe,"$suspended",t);let o=st(e,"autoRender",3,!0),l=st(e,"eps",3,.001),c=st(e,"center",3,!1),u=st(e,"fullscreen",3,!1),h=st(e,"sprite",3,!1),d=st(e,"transform",3,!1),f=st(e,"occlude",3,!1),p=st(e,"castShadow",3,!1),v=st(e,"receiveShadow",3,!1),g=st(e,"zIndexRange",19,()=>[16777271,0]),m=st(e,"calculatePosition",3,aN),_=st(e,"as",3,"div"),x=st(e,"pointerEvents",3,"auto"),y=st(e,"ref",15),b=st(e,"visible",15),M=ti(e,["$$slots","$$events","$$legacy","autoRender","eps","center","fullscreen","portal","distanceFactor","sprite","transform","occlude","castShadow","receiveShadow","material","geometry","zIndexRange","calculatePosition","as","wrapperClass","pointerEvents","ref","visible","children"]);b(!0);const{camera:w,scene:C,size:T,dom:S,canvas:R,renderStage:H}=Sa(),D=new mr;let O=document.createElement(_()),G=0,P=[0,0],z=ut(void 0),W=ut(void 0),X=!1;const re=new Mn,ne=new A_;let be=xt(()=>f()&&f()!=="blending"||Array.isArray(f())&&f().length>0),_e=new ft,$=xt(()=>i().width),K=xt(()=>i().height),ge=xt(()=>E($)/2),J=xt(()=>E(K)/2),ue=xt(()=>s().projectionMatrix.elements[5]*E(J)),Ce=xt(()=>fN(s(),new k,i()));fi(()=>{e.wrapperClass&&(O.className=e.wrapperClass)}),fi(()=>(f()==="blending"&&(Of+=1,dx(R,g()[0])),()=>{Of-=1,dx(R,g()[0])}));const Ee=()=>{w.current.updateMatrixWorld(),D.updateWorldMatrix(!0,!1);const j=d()?P:m()(D,w.current,i());if(d()||Math.abs(G-w.current.zoom)>l()||Math.abs(P[0]-j[0])>l()||Math.abs(P[1]-j[1])>l()){const L=oN(D,w.current);let A=!1;E(be)&&(Array.isArray(f())?A=f():f()!=="blending"&&(A=[C]));const Z=b();if(A){const Y=lN(D,w.current,ne,A);b(Y&&!L)}else b(!L);Z!==b()&&(e.onvisibilitychange?e.onvisibilitychange(b()):O.style.display=b()?"block":"none");const ee=Math.floor(g()[0]/2),V=f()?E(be)?[g()[0],ee]:[ee-1,0]:g();if(O.style.zIndex=`${uN(D,w.current,V)}`,d()&&E(z)&&E(W)){const{isOrthographicCamera:Y,top:se,left:le,bottom:ce,right:Ie}=w.current,Se=hN(w.current.matrixWorldInverse),De=Y?`scale(${E(ue)})translate(${jn(-(Ie+le)/2)}px,${jn((se+ce)/2)}px)`:`translateZ(${E(ue)}px)`;h()?(_e.copy(w.current.matrixWorldInverse).transpose().copyPosition(_e).scale(D.scale),_e.elements[3]=_e.elements[7]=_e.elements[11]=0,_e.elements[15]=1):_e.copy(D.matrixWorld),O.style.width=`${E($)}px`,O.style.height=`${E(K)}px`,O.style.perspective=Y?"":`${E(ue)}px`,E(z).style.transform=`${De}${Se}translate(${E(ge)}px,${E(J)}px)`,E(W).style.transform=dN(_e,1/((e.distanceFactor||10)/400))}else{const Y=e.distanceFactor===void 0?1:cN(D,w.current)*e.distanceFactor;O.style.transform=`translate3d(${j[0]}px,${j[1]}px,0) scale(${Y})`}P=j,G=w.current.zoom}if(!E(be)&&!X)if(d()&&E(z)){const L=E(z).children[0];if(L?.clientWidth&&L?.clientHeight){const{isOrthographicCamera:A}=w.current;if(A||e.geometry){const{scale:Z}=M;Z&&(Array.isArray(Z)?re.scale.set(1/Z[0],1/Z[1],1/Z[2]):re.scale.setScalar(1/Z))}else{const Z=(e.distanceFactor??10)/400,ee=L.clientWidth*Z,V=L.clientHeight*Z;re.scale.set(ee,V,1)}X=!0}}else{const L=O.children[0];if(L?.clientWidth&&L?.clientHeight){const A=1/E(Ce),Z=L.clientWidth*A,ee=L.clientHeight*A;re.scale.set(Z,ee,1),X=!0}re.lookAt(w.current.position)}},{start:Ue,stop:xe}=Ns(Ee,{autoStart:!1,autoInvalidate:!1,stage:H});nn(()=>{if(o())return Ue(),()=>{xe()}});let ye=xt(()=>(C.updateMatrixWorld(),m()(D,s(),i())));const N=j=>{const L=e.portal??S;if(!L){console.warn("<HTML>: target is undefined.");return}return L.append(j),{destroy:()=>j.remove()}},{suspended:pe}=P1();var ie=vN(),F=Re(ie);Le(F,xi({is:D},()=>M,{get ref(){return y()},set ref(j){y(j)},children:(j,L)=>{var A=Xe(),Z=Re(A);{var ee=V=>{Le(V,{is:re,get castShadow(){return p()},get receiveShadow(){return v()},children:(Y,se)=>{var le=pN(),ce=Re(le);{var Ie=ke=>{Le(ke,{get is(){return e.geometry}})},Se=ke=>{var ot=Xe(),pt=Re(ot);Fe(pt,()=>Le.PlaneGeometry,(Pt,Q)=>{Q(Pt,{})}),we(ke,ot)};yn(ce,ke=>{e.geometry?ke(Ie):ke(Se,!1)})}var De=He(ce,2);{var nt=ke=>{Le(ke,{get is(){return e.material}})},Je=(ke,ot)=>{{var pt=Q=>{var ze=Xe(),Me=Re(ze);Fe(Me,()=>Le.ShaderMaterial,(Te,We)=>{We(Te,{side:Qi,vertexShader:iN,fragmentShader:lx})}),we(Q,ze)},Pt=Q=>{var ze=Xe(),Me=Re(ze);Fe(Me,()=>Le.ShaderMaterial,(Te,We)=>{We(Te,{side:Qi,vertexShader:nN,fragmentShader:lx})}),we(Q,ze)};yn(ke,Q=>{d()?Q(Pt,!1):Q(pt)},ot)}};yn(De,ke=>{e.material?ke(nt):ke(Je,!1)})}we(Y,le)},$$slots:{default:!0}})};yn(Z,V=>{f()&&!E(be)&&V(ee)})}we(j,A)},$$slots:{default:!0}}));var I=He(F,2);GT(I,_,!1,(j,L)=>{WT(j,se=>N?.(se)),Xc(j,se=>O=se,()=>O);let A;Bi(()=>A=YT(j,A,{style:"",[ul]:{position:"absolute",top:"0",left:"0","pointer-events":d()?"none":void 0,overflow:d()?"hidden":void 0,transform:d()?void 0:`translate3d(${E(ye)[0]}px,${E(ye)[1]}px,0)`,"transform-origin":d()?void 0:"0 0",display:a()?"none":void 0}}));var Z=Xe(),ee=Re(Z);{var V=se=>{var le=mN();let ce;var Ie=Qt(le);let Se;var De=Qt(Ie),nt=Qt(De);Bt(nt,()=>e.children??Rt,()=>({render:Ee,startRendering:Ue,stopRendering:xe})),$t(De),$t(Ie),Xc(Ie,Je=>Ne(W,Je),()=>E(W)),$t(le),Xc(le,Je=>Ne(z,Je),()=>E(z)),Bi(()=>{ce=ws(le,"",ce,{position:"absolute",top:"0",left:"0","transform-style":"preserve-3d","pointer-events":"none",width:`${E($)}px`,height:`${E(K)}px`}),Se=ws(Ie,"",Se,{position:"absolute","pointer-events":x()}),Zg(De,1,qg(e.class)),ws(De,e.style)}),we(se,le)},Y=se=>{var le=gN();let ce;var Ie=Qt(le);Bt(Ie,()=>e.children??Rt,()=>({render:Ee,startRendering:Ue,stopRendering:xe})),$t(le),Bi(()=>{ce=ws(le,e.style,ce,{position:"absolute",transform:c()?"translate3d(-50%,-50%,0)":"none",top:u()?`${-E(K)/2}px`:void 0,left:u()?`${-E($)/2}px`:void 0,width:u()?`${E($)}px`:void 0,height:u()?`${E(K)}px`:void 0}),Zg(le,1,qg(e.class))}),we(se,le)};yn(ee,se=>{d()?se(V):se(Y,!1)})}we(L,Z)}),we(r,ie);var oe=Cn({render:Ee,startRendering:Ue,stopRendering:xe});return n(),oe}const _N="Right",yN="Top",xN="Front",MN="Left",bN="Bottom",SN="Back";[_N,yN,xN,MN,bN,SN].map(r=>r.toLocaleLowerCase());new On;new k;je.line={worldUnits:{value:1},linewidth:{value:1},resolution:{value:new Pe(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}};dr.line={uniforms:vp.merge([je.common,je.fog,je.line]),vertexShader:`
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`,fragmentShader:`
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`};new Ht;new k;new k;new Ht;new Ht;new Ht;new k;new ft;new u1;new k;new On;new kn;new Ht;new ft;new ft;new Mn;`${_t.logdepthbuf_pars_vertex}${_t.fog_pars_vertex}${_t.logdepthbuf_vertex}${_t.fog_vertex}`;class Xp extends Mn{constructor(){const e=Xp.SkyShader,t=new Pi({name:e.name,uniforms:vp.clone(e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,side:gi,depthWrite:!1});super(new Jl(1,1,1),t),this.isSky=!0}}Xp.SkyShader={name:"SkyShader",uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new k},up:{value:new k(0,1,0)}},vertexShader:`
		uniform vec3 sunPosition;
		uniform float rayleigh;
		uniform float turbidity;
		uniform float mieCoefficient;
		uniform vec3 up;

		varying vec3 vWorldPosition;
		varying vec3 vSunDirection;
		varying float vSunfade;
		varying vec3 vBetaR;
		varying vec3 vBetaM;
		varying float vSunE;

		// constants for atmospheric scattering
		const float e = 2.71828182845904523536028747135266249775724709369995957;
		const float pi = 3.141592653589793238462643383279502884197169;

		// wavelength of used primaries, according to preetham
		const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );
		// this pre-calculation replaces older TotalRayleigh(vec3 lambda) function:
		// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))
		const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );

		// mie stuff
		// K coefficient for the primaries
		const float v = 4.0;
		const vec3 K = vec3( 0.686, 0.678, 0.666 );
		// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K
		const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );

		// earth shadow hack
		// cutoffAngle = pi / 1.95;
		const float cutoffAngle = 1.6110731556870734;
		const float steepness = 1.5;
		const float EE = 1000.0;

		float sunIntensity( float zenithAngleCos ) {
			zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );
			return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );
		}

		vec3 totalMie( float T ) {
			float c = ( 0.2 * T ) * 10E-18;
			return 0.434 * c * MieConst;
		}

		void main() {

			vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
			vWorldPosition = worldPosition.xyz;

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			gl_Position.z = gl_Position.w; // set z to camera.far

			vSunDirection = normalize( sunPosition );

			vSunE = sunIntensity( dot( vSunDirection, up ) );

			vSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );

			float rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );

			// extinction (absorption + out scattering)
			// rayleigh coefficients
			vBetaR = totalRayleigh * rayleighCoefficient;

			// mie coefficients
			vBetaM = totalMie( turbidity ) * mieCoefficient;

		}`,fragmentShader:`
		varying vec3 vWorldPosition;
		varying vec3 vSunDirection;
		varying float vSunfade;
		varying vec3 vBetaR;
		varying vec3 vBetaM;
		varying float vSunE;

		uniform float mieDirectionalG;
		uniform vec3 up;

		// constants for atmospheric scattering
		const float pi = 3.141592653589793238462643383279502884197169;

		const float n = 1.0003; // refractive index of air
		const float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)

		// optical length at zenith for molecules
		const float rayleighZenithLength = 8.4E3;
		const float mieZenithLength = 1.25E3;
		// 66 arc seconds -> degrees, and the cosine of that
		const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;

		// 3.0 / ( 16.0 * pi )
		const float THREE_OVER_SIXTEENPI = 0.05968310365946075;
		// 1.0 / ( 4.0 * pi )
		const float ONE_OVER_FOURPI = 0.07957747154594767;

		float rayleighPhase( float cosTheta ) {
			return THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );
		}

		float hgPhase( float cosTheta, float g ) {
			float g2 = pow( g, 2.0 );
			float inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );
			return ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );
		}

		void main() {

			vec3 direction = normalize( vWorldPosition - cameraPosition );

			// optical length
			// cutoff angle at 90 to avoid singularity in next formula.
			float zenithAngle = acos( max( 0.0, dot( up, direction ) ) );
			float inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );
			float sR = rayleighZenithLength * inverse;
			float sM = mieZenithLength * inverse;

			// combined extinction factor
			vec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );

			// in scattering
			float cosTheta = dot( direction, vSunDirection );

			float rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );
			vec3 betaRTheta = vBetaR * rPhase;

			float mPhase = hgPhase( cosTheta, mieDirectionalG );
			vec3 betaMTheta = vBetaM * mPhase;

			vec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );
			Lin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );

			// nightsky
			float theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]
			float phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]
			vec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );
			vec3 L0 = vec3( 0.1 ) * Fex;

			// composition + solar disc
			float sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );
			L0 += ( vSunE * 19000.0 * Fex ) * sundisk;

			vec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );

			vec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );

			gl_FragColor = vec4( retColor, 1.0 );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`};function wN(r,e){An(e,!0);let t=st(e,"scale",3,1e3),n=st(e,"turbidity",3,10),i=st(e,"rayleigh",3,3),s=st(e,"mieCoefficient",3,.005),a=st(e,"mieDirectionalG",3,.7),o=st(e,"elevation",3,2),l=st(e,"azimuth",3,180),c=st(e,"setEnvironment",3,!0),u=st(e,"cubeMapSize",3,128),h=st(e,"webGLRenderTargetOptions",19,()=>({})),d=st(e,"ref",15),f=ti(e,["$$slots","$$events","$$legacy","scale","turbidity","rayleigh","mieCoefficient","mieDirectionalG","elevation","azimuth","setEnvironment","cubeMapSize","webGLRenderTargetOptions","ref","children"]);const p=new Xp,v=new k,{uniforms:g}=p.material,{renderer:m,scene:_,invalidate:x}=Sa();let y=ut(void 0),b;const M=()=>{Ne(y,new Jv(u(),{type:_o,generateMipmaps:!0,minFilter:nr,...h()}),!0),b=new jv(1,1.1,E(y))},w=_.environment;fi(()=>{c()&&E(y)?(_.environment=E(y).texture,x()):c()||(_.environment=w,x())});const{start:C,stop:T}=Ns(()=>{p.scale.setScalar(t()),g.turbidity.value=n(),g.rayleigh.value=i(),g.mieCoefficient.value=s(),g.mieDirectionalG.value=a();const S=er.degToRad(90-o()),R=er.degToRad(l());v.setFromSphericalCoords(1,S,R),g.sunPosition.value.copy(v),c()&&((!E(y)||!b)&&M(),b?.update(m,p)),x(),T()},{autoStart:!1,autoInvalidate:!1});x1.pre(()=>[t(),n(),i(),s(),a(),o(),l()],()=>C()),Gi(()=>{p.material.dispose(),_.environment=w;try{E(y)?.dispose()}catch(S){console.warn("Could not dispose renderTarget:",S)}}),Le(r,xi({is:p},()=>f,{get ref(){return d()},set ref(S){d(S)},children:(S,R)=>{var H=Xe(),D=Re(H);Bt(D,()=>e.children??Rt,()=>({ref:p,sunPosition:v,renderTarget:E(y)})),we(S,H)},$$slots:{default:!0}})),Cn()}`${_t.tonemapping_fragment}${_t.colorspace_fragment}`;`${_t.tonemapping_fragment}${_t.colorspace_fragment}`;const TN=`

// A stack of uint32 indices can can store the indices for
// a perfectly balanced tree with a depth up to 31. Lower stack
// depth gets higher performance.
//
// However not all trees are balanced. Best value to set this to
// is the trees max depth.
#ifndef BVH_STACK_DEPTH
#define BVH_STACK_DEPTH 60
#endif

#ifndef INFINITY
#define INFINITY 1e20
#endif

// Utilities
uvec4 uTexelFetch1D( usampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

ivec4 iTexelFetch1D( isampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 texelFetch1D( sampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {

	return
		barycoord.x * texelFetch1D( tex, faceIndices.x ) +
		barycoord.y * texelFetch1D( tex, faceIndices.y ) +
		barycoord.z * texelFetch1D( tex, faceIndices.z );

}

void ndcToCameraRay(
	vec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,
	out vec3 rayOrigin, out vec3 rayDirection
) {

	// get camera look direction and near plane for camera clipping
	vec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );
	vec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );
	float near = abs( nearVector.z / nearVector.w );

	// get the camera direction and position from camera matrices
	vec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );
	direction /= direction.w;
	direction = cameraWorld * direction - origin;

	// slide the origin along the ray until it sits at the near clip plane position
	origin.xyz += direction.xyz * near / dot( direction, lookDirection );

	rayOrigin = origin.xyz;
	rayDirection = direction.xyz;

}
`,EN=`

#ifndef TRI_INTERSECT_EPSILON
#define TRI_INTERSECT_EPSILON 1e-5
#endif

// Raycasting
bool intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax, out float dist ) {

	// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/
	// https://tavianator.com/2011/ray_box.html
	vec3 invDir = 1.0 / rayDirection;

	// find intersection distances for each plane
	vec3 tMinPlane = invDir * ( boundsMin - rayOrigin );
	vec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );

	// get the min and max distances from each intersection
	vec3 tMinHit = min( tMaxPlane, tMinPlane );
	vec3 tMaxHit = max( tMaxPlane, tMinPlane );

	// get the furthest hit distance
	vec2 t = max( tMinHit.xx, tMinHit.yz );
	float t0 = max( t.x, t.y );

	// get the minimum hit distance
	t = min( tMaxHit.xx, tMaxHit.yz );
	float t1 = min( t.x, t.y );

	// set distance to 0.0 if the ray starts inside the box
	dist = max( t0, 0.0 );

	return t1 >= dist;

}

bool intersectsTriangle(
	vec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,
	out vec3 barycoord, out vec3 norm, out float dist, out float side
) {

	// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d
	vec3 edge1 = b - a;
	vec3 edge2 = c - a;
	norm = cross( edge1, edge2 );

	float det = - dot( rayDirection, norm );
	float invdet = 1.0 / det;

	vec3 AO = rayOrigin - a;
	vec3 DAO = cross( AO, rayDirection );

	vec4 uvt;
	uvt.x = dot( edge2, DAO ) * invdet;
	uvt.y = - dot( edge1, DAO ) * invdet;
	uvt.z = dot( AO, norm ) * invdet;
	uvt.w = 1.0 - uvt.x - uvt.y;

	// set the hit information
	barycoord = uvt.wxy; // arranged in A, B, C order
	dist = uvt.z;
	side = sign( det );
	norm = side * normalize( norm );

	// add an epsilon to avoid misses between triangles
	uvt += vec4( TRI_INTERSECT_EPSILON );

	return all( greaterThanEqual( uvt, vec4( 0.0 ) ) );

}

bool intersectTriangles(
	// geometry info and triangle range
	sampler2D positionAttr, usampler2D indexAttr, uint offset, uint count,

	// ray
	vec3 rayOrigin, vec3 rayDirection,

	// outputs
	inout float minDistance, inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,
	inout float side, inout float dist
) {

	bool found = false;
	vec3 localBarycoord, localNormal;
	float localDist, localSide;
	for ( uint i = offset, l = offset + count; i < l; i ++ ) {

		uvec3 indices = uTexelFetch1D( indexAttr, i ).xyz;
		vec3 a = texelFetch1D( positionAttr, indices.x ).rgb;
		vec3 b = texelFetch1D( positionAttr, indices.y ).rgb;
		vec3 c = texelFetch1D( positionAttr, indices.z ).rgb;

		if (
			intersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )
			&& localDist < minDistance
		) {

			found = true;
			minDistance = localDist;

			faceIndices = uvec4( indices.xyz, i );
			faceNormal = localNormal;

			side = localSide;
			barycoord = localBarycoord;
			dist = localDist;

		}

	}

	return found;

}

bool intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, sampler2D bvhBounds, uint currNodeIndex, out float dist ) {

	uint cni2 = currNodeIndex * 2u;
	vec3 boundsMin = texelFetch1D( bvhBounds, cni2 ).xyz;
	vec3 boundsMax = texelFetch1D( bvhBounds, cni2 + 1u ).xyz;
	return intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax, dist );

}

// use a macro to hide the fact that we need to expand the struct into separate fields
#define	bvhIntersectFirstHit(		bvh,		rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist	)	_bvhIntersectFirstHit(		bvh.position, bvh.index, bvh.bvhBounds, bvh.bvhContents,		rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist	)

bool _bvhIntersectFirstHit(
	// bvh info
	sampler2D bvh_position, usampler2D bvh_index, sampler2D bvh_bvhBounds, usampler2D bvh_bvhContents,

	// ray
	vec3 rayOrigin, vec3 rayDirection,

	// output variables split into separate variables due to output precision
	inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,
	inout float side, inout float dist
) {

	// stack needs to be twice as long as the deepest tree we expect because
	// we push both the left and right child onto the stack every traversal
	int ptr = 0;
	uint stack[ BVH_STACK_DEPTH ];
	stack[ 0 ] = 0u;

	float triangleDistance = INFINITY;
	bool found = false;
	while ( ptr > - 1 && ptr < BVH_STACK_DEPTH ) {

		uint currNodeIndex = stack[ ptr ];
		ptr --;

		// check if we intersect the current bounds
		float boundsHitDistance;
		if (
			! intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh_bvhBounds, currNodeIndex, boundsHitDistance )
			|| boundsHitDistance > triangleDistance
		) {

			continue;

		}

		uvec2 boundsInfo = uTexelFetch1D( bvh_bvhContents, currNodeIndex ).xy;
		bool isLeaf = bool( boundsInfo.x & 0xffff0000u );

		if ( isLeaf ) {

			uint count = boundsInfo.x & 0x0000ffffu;
			uint offset = boundsInfo.y;

			found = intersectTriangles(
				bvh_position, bvh_index, offset, count,
				rayOrigin, rayDirection, triangleDistance,
				faceIndices, faceNormal, barycoord, side, dist
			) || found;

		} else {

			uint leftIndex = currNodeIndex + 1u;
			uint splitAxis = boundsInfo.x & 0x0000ffffu;
			uint rightIndex = boundsInfo.y;

			bool leftToRight = rayDirection[ splitAxis ] >= 0.0;
			uint c1 = leftToRight ? leftIndex : rightIndex;
			uint c2 = leftToRight ? rightIndex : leftIndex;

			// set c2 in the stack so we traverse it later. We need to keep track of a pointer in
			// the stack while we traverse. The second pointer added is the one that will be
			// traversed first
			ptr ++;
			stack[ ptr ] = c2;

			ptr ++;
			stack[ ptr ] = c1;

		}

	}

	return found;

}
`,AN=`
struct BVH {

	usampler2D index;
	sampler2D position;

	sampler2D bvhBounds;
	usampler2D bvhContents;

};
`,CN=AN,RN=`
	${TN}
	${EN}
`;`${CN}${RN}${_t.tonemapping_fragment}${_t.colorspace_fragment}`;function LN(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}new On;new Ye;typeof window<"u"&&document.createElement("div");const Va=new Map,PN={audioListeners:Va,addAudioListener:(r,e="default")=>{if(Va.has(e)){console.warn(`An AudioListener with the id "${e}" has already been added, aborting.`);return}Va.set(e,r)},removeAudioListener:(r="default")=>{if(!Va.has(r)){console.warn(`No AudioListener with the id "${r}" found, aborting.`);return}Va.delete(r)},getAudioListener:(r="default")=>{if(!Va.has(r)){console.warn(`No AudioListener with the id "${r}" found, aborting.`);return}return Va.get(r)}};function O_(){return hD("threlte-audio",PN)}function IN(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","id","masterVolume","ref","children"]);const i=new a1,s=i.context,a=()=>i.context.resume();fi(()=>{e.masterVolume!==void 0&&i.setMasterVolume(e.masterVolume)});const{addAudioListener:o,removeAudioListener:l}=O_();return o(i,e.id),Gi(()=>{l(e.id)}),Le(r,xi({is:i},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=Xe(),d=Re(h);Bt(d,()=>e.children??Rt,()=>({ref:i})),we(c,h)},$$slots:{default:!0}})),Cn({audioContext:s,resumeContext:a})}const DN=(r,e={})=>{const t=un(!1),n=un(!1),i=un(!1);let s=!1;const a=L_(M_),o=async g=>{t.set(!1);try{if(typeof g=="string"){const m=await a.load(g,{onProgress(_){e.onprogress?.(_)}});r.setBuffer(m)}else g instanceof AudioBuffer?r.setBuffer(g):g instanceof HTMLMediaElement?r.setMediaElementSource(g):g instanceof AudioBufferSourceNode?r.setNodeSource(g):g instanceof MediaStream&&r.setMediaStreamSource(g);t.set(!0),e.onload?.(r.buffer)}catch(m){e.onerror?.(m)}},l=g=>{r.setVolume(g??1)},c=g=>{r.setPlaybackRate(g??1)},u=async g=>{if(!t.current){i.set(!0);return}if(!(r.context.state!=="running"&&(await r.context.resume(),s)))return r.play(g)},h=()=>r.pause(),d=()=>r.source?r.stop():r,f=g=>{n.set(g??!1)},p=g=>{r.source&&r.detune&&r.setDetune(g??0)},v=g=>{r.setLoop(g??!1)};return ri([t,n,i],([g,m,_])=>{if(!g){r.isPlaying&&d();return}(m||_)&&u()}),Gi(()=>{try{s=!0,d()}catch(g){console.warn("Error while destroying audio",g)}}),{setVolume:l,setSrc:o,setPlaybackRate:c,setAutoPlay:f,setDetune:p,setLoop:v,play:u,pause:h,stop:d}};function NN(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","src","id","volume","playbackRate","autoplay","detune","loop","ref","children"]);const{getAudioListener:i}=O_(),s=i(e.id);if(!s)throw new Error(`No Audiolistener with id ${e.id} found.`);const a=new S_(s),{setAutoPlay:o,setDetune:l,setLoop:c,setPlaybackRate:u,setSrc:h,setVolume:d,...f}=DN(a,n),p=f.pause,v=f.play,g=f.stop;return nn(()=>o(e.autoplay)),nn(()=>void h(e.src)),nn(()=>d(e.volume)),nn(()=>u(e.playbackRate)),nn(()=>c(e.loop)),nn(()=>l(e.detune)),Le(r,xi({is:a},()=>n,{get ref(){return t()},set ref(m){t(m)},children:(m,_)=>{var x=Xe(),y=Re(x);Bt(y,()=>e.children??Rt,()=>({ref:a})),we(m,x)},$$slots:{default:!0}})),Cn({pause:p,play:v,stop:g})}function FN(r,e){const{getAudioListener:t}=O_(),n=t(r);if(!n)throw new Error("No AudioListener found.");return{listener:n,context:n.context}}const ON=r=>{const{camera:e}=Sa();let t=r.current.clientWidth,n=r.current.clientHeight;const i=new ResizeObserver(([s])=>{t=s.contentRect.width,n=s.contentRect.height});return ri(r,s=>(s&&i.observe(s),()=>{s&&i.unobserve(s)})),(s,a)=>{a.pointer.update(o=>(o.set(s.offsetX/t*2-1,-(s.offsetY/n)*2+1),o)),a.raycaster.setFromCamera(a.pointer.current,e.current)}},D1=Symbol("interactivity-context"),UN=()=>yi(D1),BN=r=>{const e=un(Vp().dom),t={enabled:un(!0),pointer:un(new Pe),pointerOverTarget:un(!1),lastEvent:void 0,raycaster:new A_,initialClick:[0,0],initialHits:[],hovered:new Map,interactiveObjects:[],target:e,handlers:new WeakMap,compute:ON(e),filter:r?.filter,addInteractiveObject:(n,i)=>{t.interactiveObjects.indexOf(n)>-1||(t.handlers.set(n,i),t.interactiveObjects.push(n))},removeInteractiveObject:n=>{const i=t.interactiveObjects.indexOf(n);t.interactiveObjects.splice(i,1),t.handlers.delete(n)}};return Hi(D1,t),t},N1=()=>{const r=UN();if(!r)throw new Error("No interactivity context found. Did you forget to implement interactivity()?");return r},fx=["onclick","oncontextmenu","ondblclick","onwheel","onpointerup","onpointerdown","onpointerover","onpointerout","onpointerenter","onpointerleave","onpointermove","onpointermissed"],zN=()=>{uD("interactivity",r=>{if(!mi(r.ref,"Object3D")||!Object.entries(r.props).some(([i,s])=>s!==void 0&&fx.includes(i)))return;const{addInteractiveObject:t,removeInteractiveObject:n}=N1();return x1.pre(()=>[r.ref],([i])=>(t(i,r.props),()=>{n(i)})),{pluginProps:fx}})};function px(r){return`${(r.eventObject||r.object).uuid}/${r.index}${r.instanceId}`}const mx=[["click",!1],["contextmenu",!1],["dblclick",!1],["wheel",!1],["pointerdown",!0],["pointerup",!0],["pointerleave",!0],["pointerenter",!0],["pointermove",!0],["pointercancel",!0]],kN=r=>{const{handlers:e}=N1(),t=c=>{const u=c.offsetX-r.initialClick[0],h=c.offsetY-r.initialClick[1];return Math.round(Math.hypot(u,h))},n=c=>{for(const u of r.hovered.values())if(c.length===0||!c.some(h=>h.object===u.object&&h.index===u.index&&h.instanceId===u.instanceId)){const{eventObject:h}=u;r.hovered.delete(px(u));const d=e.get(h);if(d){const f={...u,intersections:c};d.onpointerout?.(f),d.onpointerleave?.(f)}}},i=()=>{if(!r.enabled.current)return[];const c=[],u=r.raycaster.intersectObjects(r.interactiveObjects,!0),h=r.filter===void 0?u:r.filter(u,r);for(const d of h){let f=d.object;for(;f;)e.has(f)&&c.push({...d,eventObject:f}),f=f.parent}return c},s=(c,u)=>{for(const h of u)e.get(h)?.onpointermissed?.(c)},a=c=>c==="pointerleave"||c==="pointercancel"?()=>{r.pointerOverTarget.set(!1),n([])}:c==="pointerenter"?()=>{r.pointerOverTarget.set(!0)}:u=>{const h=c==="pointermove",d=c==="click"||c==="contextmenu"||c==="dblclick";r.compute(u,r);const f=i(),p=d?t(u):0;c==="pointerdown"&&(r.initialClick=[u.offsetX,u.offsetY],r.initialHits=f.map(g=>g.eventObject)),d&&f.length===0&&p<=2&&s(u,r.interactiveObjects),h&&n(f);let v=!1;e:for(const g of f){const m={stopped:v,...g,intersections:f,stopPropagation(){if(v=!0,m.stopped=!0,r.hovered.size>0&&Array.from(r.hovered.values()).some(x=>x.eventObject===g.eventObject)){const x=f.slice(0,f.indexOf(g));n([...x,g])}},camera:r.raycaster.camera,delta:p,nativeEvent:u,pointer:r.pointer.current,ray:r.raycaster.ray},_=e.get(g.eventObject);if(!_)return;if(h){if(_.onpointerover||_.onpointerenter||_.onpointerout||_.onpointerleave){const x=px(m),y=r.hovered.get(x);y?y.stopped&&m.stopPropagation():(r.hovered.set(x,m),_.onpointerover?.(m),_.onpointerenter?.(m))}_.onpointermove?.(m)}else _[`on${c}`]?(!d||r.initialHits.includes(g.eventObject))&&(s(u,r.interactiveObjects.filter(x=>!r.initialHits.includes(x))),_[`on${c}`]?.(m)):d&&r.initialHits.includes(g.eventObject)&&s(u,r.interactiveObjects.filter(x=>!r.initialHits.includes(x)));if(v)break e}},o=c=>{mx.forEach(([u])=>{c.removeEventListener(u,a(u))})},l=c=>{mx.forEach(([u,h])=>{c.addEventListener(u,a(u),{passive:h})})};ri(r.target,c=>(c&&l(c),()=>{c&&o(c)}))},VN=r=>{const e=BN(r);return zN(),kN(e),e};for(let r=0;r<256;r++)(r<16?"0":"")+r.toString(16);new ec(-1,1,1,-1,0,1);class HN extends Lt{constructor(){super(),this.setAttribute("position",new rt([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new rt([0,2,0,0,2,0],2))}}new HN;var F1={exports:{}};F1.exports=qp;F1.exports.default=qp;function qp(r,e,t){t=t||2;var n=e&&e.length,i=n?e[0]*t:r.length,s=O1(r,0,i,t,!0),a=[];if(!s||s.next===s.prev)return a;var o,l,c,u,h,d,f;if(n&&(s=qN(r,e,s,t)),r.length>80*t){o=c=r[0],l=u=r[1];for(var p=t;p<i;p+=t)h=r[p],d=r[p+1],h<o&&(o=h),d<l&&(l=d),h>c&&(c=h),d>u&&(u=d);f=Math.max(c-o,u-l),f=f!==0?32767/f:0}return Su(s,a,t,o,l,f,0),a}function O1(r,e,t,n,i){var s,a;if(i===pv(r,e,t,n)>0)for(s=e;s<t;s+=n)a=gx(s,r[s],r[s+1],a);else for(s=t-n;s>=e;s-=n)a=gx(s,r[s],r[s+1],a);return a&&Zp(a,a.next)&&(Tu(a),a=a.next),a}function fo(r,e){if(!r)return r;e||(e=r);var t=r,n;do if(n=!1,!t.steiner&&(Zp(t,t.next)||Tn(t.prev,t,t.next)===0)){if(Tu(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function Su(r,e,t,n,i,s,a){if(r){!a&&s&&KN(r,n,i,s);for(var o=r,l,c;r.prev!==r.next;){if(l=r.prev,c=r.next,s?WN(r,n,i,s):GN(r)){e.push(l.i/t|0),e.push(r.i/t|0),e.push(c.i/t|0),Tu(r),r=c.next,o=c.next;continue}if(r=c,r===o){a?a===1?(r=$N(fo(r),e,t),Su(r,e,t,n,i,s,2)):a===2&&XN(r,e,t,n,i,s):Su(fo(r),e,t,n,i,s,1);break}}}}function GN(r){var e=r.prev,t=r,n=r.next;if(Tn(e,t,n)>=0)return!1;for(var i=e.x,s=t.x,a=n.x,o=e.y,l=t.y,c=n.y,u=i<s?i<a?i:a:s<a?s:a,h=o<l?o<c?o:c:l<c?l:c,d=i>s?i>a?i:a:s>a?s:a,f=o>l?o>c?o:c:l>c?l:c,p=n.next;p!==e;){if(p.x>=u&&p.x<=d&&p.y>=h&&p.y<=f&&_l(i,o,s,l,a,c,p.x,p.y)&&Tn(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function WN(r,e,t,n){var i=r.prev,s=r,a=r.next;if(Tn(i,s,a)>=0)return!1;for(var o=i.x,l=s.x,c=a.x,u=i.y,h=s.y,d=a.y,f=o<l?o<c?o:c:l<c?l:c,p=u<h?u<d?u:d:h<d?h:d,v=o>l?o>c?o:c:l>c?l:c,g=u>h?u>d?u:d:h>d?h:d,m=dv(f,p,e,t,n),_=dv(v,g,e,t,n),x=r.prevZ,y=r.nextZ;x&&x.z>=m&&y&&y.z<=_;){if(x.x>=f&&x.x<=v&&x.y>=p&&x.y<=g&&x!==i&&x!==a&&_l(o,u,l,h,c,d,x.x,x.y)&&Tn(x.prev,x,x.next)>=0||(x=x.prevZ,y.x>=f&&y.x<=v&&y.y>=p&&y.y<=g&&y!==i&&y!==a&&_l(o,u,l,h,c,d,y.x,y.y)&&Tn(y.prev,y,y.next)>=0))return!1;y=y.nextZ}for(;x&&x.z>=m;){if(x.x>=f&&x.x<=v&&x.y>=p&&x.y<=g&&x!==i&&x!==a&&_l(o,u,l,h,c,d,x.x,x.y)&&Tn(x.prev,x,x.next)>=0)return!1;x=x.prevZ}for(;y&&y.z<=_;){if(y.x>=f&&y.x<=v&&y.y>=p&&y.y<=g&&y!==i&&y!==a&&_l(o,u,l,h,c,d,y.x,y.y)&&Tn(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function $N(r,e,t){var n=r;do{var i=n.prev,s=n.next.next;!Zp(i,s)&&U1(i,n,n.next,s)&&wu(i,s)&&wu(s,i)&&(e.push(i.i/t|0),e.push(n.i/t|0),e.push(s.i/t|0),Tu(n),Tu(n.next),n=r=s),n=n.next}while(n!==r);return fo(n)}function XN(r,e,t,n,i,s){var a=r;do{for(var o=a.next.next;o!==a.prev;){if(a.i!==o.i&&tF(a,o)){var l=B1(a,o);a=fo(a,a.next),l=fo(l,l.next),Su(a,e,t,n,i,s,0),Su(l,e,t,n,i,s,0);return}o=o.next}a=a.next}while(a!==r)}function qN(r,e,t,n){var i=[],s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*n,l=s<a-1?e[s+1]*n:r.length,c=O1(r,o,l,n,!1),c===c.next&&(c.steiner=!0),i.push(eF(c));for(i.sort(ZN),s=0;s<i.length;s++)t=YN(i[s],t);return t}function ZN(r,e){return r.x-e.x}function YN(r,e){var t=jN(r,e);if(!t)return e;var n=B1(t,r);return fo(n,n.next),fo(t,t.next)}function jN(r,e){var t=e,n=r.x,i=r.y,s=-1/0,a;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){var o=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(o<=n&&o>s&&(s=o,a=t.x<t.next.x?t:t.next,o===n))return a}t=t.next}while(t!==e);if(!a)return null;var l=a,c=a.x,u=a.y,h=1/0,d;t=a;do n>=t.x&&t.x>=c&&n!==t.x&&_l(i<u?n:s,i,c,u,i<u?s:n,i,t.x,t.y)&&(d=Math.abs(i-t.y)/(n-t.x),wu(t,r)&&(d<h||d===h&&(t.x>a.x||t.x===a.x&&JN(a,t)))&&(a=t,h=d)),t=t.next;while(t!==l);return a}function JN(r,e){return Tn(r.prev,r,e.prev)<0&&Tn(e.next,r,r.next)<0}function KN(r,e,t,n){var i=r;do i.z===0&&(i.z=dv(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==r);i.prevZ.nextZ=null,i.prevZ=null,QN(i)}function QN(r){var e,t,n,i,s,a,o,l,c=1;do{for(t=r,r=null,s=null,a=0;t;){for(a++,n=t,o=0,e=0;e<c&&(o++,n=n.nextZ,!!n);e++);for(l=c;o>0||l>0&&n;)o!==0&&(l===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,o--):(i=n,n=n.nextZ,l--),s?s.nextZ=i:r=i,i.prevZ=s,s=i;t=n}s.nextZ=null,c*=2}while(a>1);return r}function dv(r,e,t,n,i){return r=(r-t)*i|0,e=(e-n)*i|0,r=(r|r<<8)&16711935,r=(r|r<<4)&252645135,r=(r|r<<2)&858993459,r=(r|r<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,r|e<<1}function eF(r){var e=r,t=r;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==r);return t}function _l(r,e,t,n,i,s,a,o){return(i-a)*(e-o)>=(r-a)*(s-o)&&(r-a)*(n-o)>=(t-a)*(e-o)&&(t-a)*(s-o)>=(i-a)*(n-o)}function tF(r,e){return r.next.i!==e.i&&r.prev.i!==e.i&&!nF(r,e)&&(wu(r,e)&&wu(e,r)&&iF(r,e)&&(Tn(r.prev,r,e.prev)||Tn(r,e.prev,e))||Zp(r,e)&&Tn(r.prev,r,r.next)>0&&Tn(e.prev,e,e.next)>0)}function Tn(r,e,t){return(e.y-r.y)*(t.x-e.x)-(e.x-r.x)*(t.y-e.y)}function Zp(r,e){return r.x===e.x&&r.y===e.y}function U1(r,e,t,n){var i=rd(Tn(r,e,t)),s=rd(Tn(r,e,n)),a=rd(Tn(t,n,r)),o=rd(Tn(t,n,e));return!!(i!==s&&a!==o||i===0&&id(r,t,e)||s===0&&id(r,n,e)||a===0&&id(t,r,n)||o===0&&id(t,e,n))}function id(r,e,t){return e.x<=Math.max(r.x,t.x)&&e.x>=Math.min(r.x,t.x)&&e.y<=Math.max(r.y,t.y)&&e.y>=Math.min(r.y,t.y)}function rd(r){return r>0?1:r<0?-1:0}function nF(r,e){var t=r;do{if(t.i!==r.i&&t.next.i!==r.i&&t.i!==e.i&&t.next.i!==e.i&&U1(t,t.next,r,e))return!0;t=t.next}while(t!==r);return!1}function wu(r,e){return Tn(r.prev,r,r.next)<0?Tn(r,e,r.next)>=0&&Tn(r,r.prev,e)>=0:Tn(r,e,r.prev)<0||Tn(r,r.next,e)<0}function iF(r,e){var t=r,n=!1,i=(r.x+e.x)/2,s=(r.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==r);return n}function B1(r,e){var t=new fv(r.i,r.x,r.y),n=new fv(e.i,e.x,e.y),i=r.next,s=e.prev;return r.next=e,e.prev=r,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function gx(r,e,t,n){var i=new fv(r,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function Tu(r){r.next.prev=r.prev,r.prev.next=r.next,r.prevZ&&(r.prevZ.nextZ=r.nextZ),r.nextZ&&(r.nextZ.prevZ=r.prevZ)}function fv(r,e,t){this.i=r,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}qp.deviation=function(r,e,t,n){var i=e&&e.length,s=i?e[0]*t:r.length,a=Math.abs(pv(r,0,s,t));if(i)for(var o=0,l=e.length;o<l;o++){var c=e[o]*t,u=o<l-1?e[o+1]*t:r.length;a-=Math.abs(pv(r,c,u,t))}var h=0;for(o=0;o<n.length;o+=3){var d=n[o]*t,f=n[o+1]*t,p=n[o+2]*t;h+=Math.abs((r[d]-r[p])*(r[f+1]-r[d+1])-(r[d]-r[f])*(r[p+1]-r[d+1]))}return a===0&&h===0?0:Math.abs((h-a)/a)};function pv(r,e,t,n){for(var i=0,s=e,a=t-n;s<t;s+=n)i+=(r[a]-r[s])*(r[s+1]+r[a+1]),a=s;return i}qp.flatten=function(r){for(var e=r[0][0].length,t={vertices:[],holes:[],dimensions:e},n=0,i=0;i<r.length;i++){for(var s=0;s<r[i].length;s++)for(var a=0;a<e;a++)t.vertices.push(r[i][s][a]);i>0&&(n+=r[i-1].length,t.holes.push(n))}return t};new Pe;new Pe;var vx;(r=>{function e(i){let s=i.slice();return s.sort(r.POINT_COMPARATOR),r.makeHullPresorted(s)}r.makeHull=e;function t(i){if(i.length<=1)return i.slice();let s=[];for(let o=0;o<i.length;o++){const l=i[o];for(;s.length>=2;){const c=s[s.length-1],u=s[s.length-2];if((c.x-u.x)*(l.y-u.y)>=(c.y-u.y)*(l.x-u.x))s.pop();else break}s.push(l)}s.pop();let a=[];for(let o=i.length-1;o>=0;o--){const l=i[o];for(;a.length>=2;){const c=a[a.length-1],u=a[a.length-2];if((c.x-u.x)*(l.y-u.y)>=(c.y-u.y)*(l.x-u.x))a.pop();else break}a.push(l)}return a.pop(),s.length==1&&a.length==1&&s[0].x==a[0].x&&s[0].y==a[0].y?s:s.concat(a)}r.makeHullPresorted=t;function n(i,s){return i.x<s.x?-1:i.x>s.x?1:i.y<s.y?-1:i.y>s.y?1:0}r.POINT_COMPARATOR=n})(vx||(vx={}));function Uf(r){return Object.prototype.toString.call(r)==="[object Date]"}function mv(r,e,t,n){if(typeof t=="number"||Uf(t)){const i=n-t,s=(t-e)/(r.dt||1/60),a=r.opts.stiffness*i,o=r.opts.damping*s,l=(a-o)*r.inv_mass,c=(s+l)*r.dt;return Math.abs(c)<r.opts.precision&&Math.abs(i)<r.opts.precision?n:(r.settled=!1,Uf(t)?new Date(t.getTime()+c):t+c)}else{if(Array.isArray(t))return t.map((i,s)=>mv(r,e[s],t[s],n[s]));if(typeof t=="object"){const i={};for(const s in t)i[s]=mv(r,e[s],t[s],n[s]);return i}else throw new Error(`Cannot spring ${typeof t} values`)}}class Eu{#t=fr(.15);#n=fr(.8);#i=fr(.01);#e=fr(void 0);#s=fr(void 0);#a=void 0;#l=0;#o=1;#u=0;#r=null;#c=null;constructor(e,t={}){this.#e.v=this.#s.v=e,typeof t.stiffness=="number"&&(this.#t.v=sd(t.stiffness,0,1)),typeof t.damping=="number"&&(this.#n.v=sd(t.damping,0,1)),typeof t.precision=="number"&&(this.#i.v=t.precision)}static of(e,t){const n=new Eu(e(),t);return tp(()=>{n.set(e())}),n}#h(e){if(Ne(this.#s,e),this.#e.v??=e,this.#a??=this.#e.v,!this.#r){this.#l=Pr.now();var t=1e3/(this.#u*60);this.#r??=db(n=>{this.#o=Math.min(this.#o+t,1);const i=Math.min(n-this.#l,1e3/30),s={inv_mass:this.#o,opts:{stiffness:this.#t.v,damping:this.#n.v,precision:this.#i.v},settled:!0,dt:i*60/1e3};var a=mv(s,this.#a,this.#e.v,this.#s.v);return this.#a=this.#e.v,this.#l=n,Ne(this.#e,a),s.settled&&(this.#r=null),!s.settled})}return this.#r.promise}set(e,t){if(this.#c?.reject(new Error("Aborted")),t?.instant||this.#e.v===void 0)return this.#r?.abort(),this.#r=null,Ne(this.#e,Ne(this.#s,e)),this.#a=e,Promise.resolve();t?.preserveMomentum&&(this.#o=0,this.#u=t.preserveMomentum);var n=this.#c=DT();return n.promise.catch(Rt),this.#h(e).then(()=>{n===this.#c&&n.resolve(void 0)}),n.promise}get current(){return E(this.#e)}get damping(){return E(this.#n)}set damping(e){Ne(this.#n,sd(e,0,1))}get precision(){return E(this.#i)}set precision(e){Ne(this.#i,e)}get stiffness(){return E(this.#t)}set stiffness(e){Ne(this.#t,sd(e,0,1))}get target(){return E(this.#s)}set target(e){this.set(e)}}function sd(r,e,t){return Math.max(e,Math.min(t,r))}function rF(r){return r}function iu(r){return r<.5?4*r*r*r:.5*Math.pow(2*r-2,3)+1}function sF(r){return Math.sin(-13*(r+1)*Math.PI/2)*Math.pow(2,-10*r)+1}function gv(r,e){if(r===e||r!==r)return()=>r;const t=typeof r;if(t!==typeof e||Array.isArray(r)!==Array.isArray(e))throw new Error("Cannot interpolate values of different type");if(Array.isArray(r)){const n=e.map((i,s)=>gv(r[s],i));return i=>n.map(s=>s(i))}if(t==="object"){if(!r||!e)throw new Error("Object cannot be null");if(Uf(r)&&Uf(e)){const s=r.getTime(),o=e.getTime()-s;return l=>new Date(s+l*o)}const n=Object.keys(e),i={};return n.forEach(s=>{i[s]=gv(r[s],e[s])}),s=>{const a={};return n.forEach(o=>{a[o]=i[o](s)}),a}}if(t==="number"){const n=e-r;return i=>r+i*n}return()=>e}class to{#t=fr(void 0);#n=fr(void 0);#i;#e=null;constructor(e,t={}){this.#t.v=this.#n.v=e,this.#i=t}static of(e,t){const n=new to(e(),t);return tp(()=>{n.set(e())}),n}set(e,t){Ne(this.#n,e);let{delay:n=0,duration:i=400,easing:s=rF,interpolate:a=gv}={...this.#i,...t};if(i===0)return this.#e?.abort(),Ne(this.#t,e),Promise.resolve();const o=Pr.now()+n;let l,c=!1,u=this.#e;return this.#e=db(h=>{if(h<o)return!0;if(!c){c=!0;const f=this.#t.v;l=a(f,e),typeof i=="function"&&(i=i(f,e)),u?.abort()}const d=h-o;return d>i?(Ne(this.#t,e),!1):(Ne(this.#t,l(s(d/i))),!0)}),this.#e.promise}get current(){return E(this.#t)}get target(){return E(this.#n)}set target(e){this.set(e)}}var aF=bt("<!> <!> <!> <!>",1),oF=bt("<!> <!>",1),lF=bt("<!> <!>",1);function cF(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(v,"$gltf",t),s=()=>As(m,"$actions",t),a=Gp();let o=st(e,"viewMode",3,"intro"),l=st(e,"initialFacingDirection",19,()=>Math.PI),c=st(e,"dragonRef",15,null),u=st(e,"ref",15),h=ti(e,["$$slots","$$events","$$legacy","viewMode","dragonEyeGlow","handleDragonClick","initialFacingDirection","dragonRef","fallback","error","children","ref","scale"]);const d=P1();u(new mr),nn(()=>{u()&&!c()&&c(u())});const f=new to({y:.5},{duration:2e3,easing:iu});nn(()=>{console.log("Floating animation log");const y=setInterval(()=>{const M=f.current.y>.3?0:.5;f.set({y:M})},2e3);return()=>clearInterval(y)});const p=Mr("/models/Dragon-transformed.glb",{dracoLoader:a}),v=d(p);let g=ut("white");const{actions:m}=R1(v,u());nn(()=>(e.dragonEyeGlow>0&&i()?.materials?.Eyes&&E(g)!=="red"?(i().materials.Eyes.emissive.set("red"),Za(v,_n(i).materials.Eyes.emissiveIntensity=e.dragonEyeGlow,_n(i)),Ne(g,"red")):e.dragonEyeGlow===0&&i()?.materials?.Eyes&&E(g)!=="white"&&(i().materials.Eyes.emissive.set("white"),Za(v,_n(i).materials.Eyes.emissiveIntensity=0,_n(i)),Ne(g,"white")),()=>{i()?.materials?.Eyes&&E(g)!=="white"&&(i().materials.Eyes.emissive.set("white"),Za(v,_n(i).materials.Eyes.emissiveIntensity=0,_n(i)))})),nn(()=>{s()?.Dragon_Flying&&!s().Dragon_Flying.isRunning()&&s().Dragon_Flying.play()});const _=xt(()=>o()==="intro"?[0,l(),0]:[0,0,0]),x=xt(()=>[0,f.current.y,0]);Le(r,xi({get is(){return u()},dispose:!1,order:9999,get position(){return E(x)},get rotation(){return E(_)},get scale(){return e.scale}},()=>h,{children:(y,b)=>{var M=lF(),w=Re(M);_r(w,()=>v,S=>{var R=Xe(),H=Re(R);{var D=O=>{var G=Xe(),P=Re(G);Bt(P,()=>e.fallback),we(O,G)};yn(H,O=>{e.fallback&&O(D)})}we(S,R)},(S,R)=>{var H=Xe(),D=Re(H);Fe(D,()=>Le.Group,(O,G)=>{G(O,{name:"Scene",children:(P,z)=>{var W=Xe(),X=Re(W);Fe(X,()=>Le.Group,(re,ne)=>{ne(re,{name:"DragonArmature",children:(be,_e)=>{var $=oF(),K=Re($);Le(K,{get is(){return E(R).nodes.Root}});var ge=He(K,2);Fe(ge,()=>Le.Group,(J,ue)=>{ue(J,{name:"Dragon",children:(Ce,Ee)=>{var Ue=aF(),xe=Re(Ue);Fe(xe,()=>Le.SkinnedMesh,(ie,F)=>{F(ie,{name:"Cylinder",castShadow:!0,receiveShadow:!0,get geometry(){return E(R).nodes.Cylinder.geometry},get material(){return E(R).materials.Main},get skeleton(){return E(R).nodes.Cylinder.skeleton}})});var ye=He(xe,2);Fe(ye,()=>Le.SkinnedMesh,(ie,F)=>{F(ie,{name:"Cylinder_1",castShadow:!0,receiveShadow:!0,get geometry(){return E(R).nodes.Cylinder_1.geometry},get material(){return E(R).materials.Wings},get skeleton(){return E(R).nodes.Cylinder_1.skeleton}})});var N=He(ye,2);Fe(N,()=>Le.SkinnedMesh,(ie,F)=>{F(ie,{name:"Cylinder_2",castShadow:!0,receiveShadow:!0,get geometry(){return E(R).nodes.Cylinder_2.geometry},get material(){return E(R).materials.Belly},get skeleton(){return E(R).nodes.Cylinder_2.skeleton}})});var pe=He(N,2);Fe(pe,()=>Le.SkinnedMesh,(ie,F)=>{F(ie,{name:"Cylinder_3",castShadow:!0,receiveShadow:!0,get geometry(){return E(R).nodes.Cylinder_3.geometry},get material(){return E(R).materials.Claws},get skeleton(){return E(R).nodes.Cylinder_3.skeleton}})}),we(Ce,Ue)},$$slots:{default:!0}})}),we(be,$)},$$slots:{default:!0}})}),we(P,W)},$$slots:{default:!0}})}),we(S,H)});var C=He(w,2);{var T=S=>{var R=Xe(),H=Re(R);Bt(H,()=>e.children,()=>({ref:u()})),we(S,R)};yn(C,S=>{e.children&&S(T)})}we(y,M)},$$slots:{default:!0}})),Cn(),n()}NT();var uF=bt("<!> <!>",1);function hF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/Rock_1-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=uF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=Xe(),m=Re(g);Fe(m,()=>Le.Mesh,(_,x)=>{x(_,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Rock_1.geometry},get material(){return E(v).materials.Rock}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var dF=bt("<!> <!>",1);function fF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/Rock_4-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=dF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=Xe(),m=Re(g);Fe(m,()=>Le.Mesh,(_,x)=>{x(_,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Rock_4.geometry},get material(){return E(v).materials.Rock}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var pF=bt("<!> <!>",1),mF=bt("<!> <!>",1);function gF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/PineTree_1-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=mF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=pF(),m=Re(g);Fe(m,()=>Le.Mesh,(x,y)=>{y(x,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cylinder018.geometry},get material(){return E(v).materials.Wood}})});var _=He(m,2);Fe(_,()=>Le.Mesh,(x,y)=>{y(x,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cylinder018_1.geometry},get material(){return E(v).materials.Green}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var vF=bt("<!> <!>",1),_F=bt("<!> <!>",1);function yF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/PineTree_4-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=_F(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=vF(),m=Re(g);Fe(m,()=>Le.Mesh,(x,y)=>{y(x,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cylinder027.geometry},get material(){return E(v).materials.Wood}})});var _=He(m,2);Fe(_,()=>Le.Mesh,(x,y)=>{y(x,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cylinder027_1.geometry},get material(){return E(v).materials.Green}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var xF=bt("<!> <!>",1);function MF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr(`/models/Grass-transformed.glb?${Date.now()}`,{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=xF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=Xe(),m=Re(g);Fe(m,()=>Le.Mesh,(_,x)=>{x(_,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Grass.geometry},get material(){return E(v).materials.Green}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var bF=bt("<!> <!> <!>",1),SF=bt("<!> <!>",1);function wF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr(`/models/Flowers-transformed.glb?${Date.now()}`,{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=SF(),d=Re(h);_r(d,()=>i,v=>{var g=Xe(),m=Re(g);Bt(m,()=>e.fallback??Rt),we(v,g)},(v,g)=>{var m=bF(),_=Re(m);Fe(_,()=>Le.Mesh,(b,M)=>{M(b,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Plane029.geometry},get material(){return E(g).materials.Green}})});var x=He(_,2);Fe(x,()=>Le.Mesh,(b,M)=>{M(b,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Plane029_1.geometry},get material(){return E(g).materials.Cyan}})});var y=He(x,2);Fe(y,()=>Le.Mesh,(b,M)=>{M(b,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Plane029_2.geometry},get material(){return E(g).materials.Yellow}})}),we(v,m)},(v,g)=>{var m=Xe(),_=Re(m);Bt(_,()=>e.error??Rt,()=>({error:E(g)})),we(v,m)});var f=He(d,2);{var p=v=>{var g=Xe(),m=Re(g);Bt(m,()=>e.children??Rt,()=>({ref:t()})),we(v,g)};yn(f,v=>{e.children&&t()&&v(p)})}we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var TF=bt("<!> <!> <!> <!> <!>",1),EF=bt("<!> <!>",1);function AF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/WoodLog_Moss-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=EF(),d=Re(h);_r(d,()=>i,v=>{var g=Xe(),m=Re(g);Bt(m,()=>e.fallback??Rt),we(v,g)},(v,g)=>{var m=TF(),_=Re(m);Fe(_,()=>Le.Mesh,(w,C)=>{C(w,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Cylinder011.geometry},get material(){return E(g).materials.Wood}})});var x=He(_,2);Fe(x,()=>Le.Mesh,(w,C)=>{C(w,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Cylinder011_1.geometry},get material(){return E(g).materials.Green}})});var y=He(x,2);Fe(y,()=>Le.Mesh,(w,C)=>{C(w,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Cylinder011_2.geometry},get material(){return E(g).materials.Mushroom_Top}})});var b=He(y,2);Fe(b,()=>Le.Mesh,(w,C)=>{C(w,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Cylinder011_3.geometry},get material(){return E(g).materials.Mushroom_Bottom}})});var M=He(b,2);Fe(M,()=>Le.Mesh,(w,C)=>{C(w,{castShadow:!0,receiveShadow:!0,get geometry(){return E(g).nodes.Cylinder011_4.geometry},get material(){return E(g).materials.DarkGreen}})}),we(v,m)},(v,g)=>{var m=Xe(),_=Re(m);Bt(_,()=>e.error??Rt,()=>({error:E(g)})),we(v,m)});var f=He(d,2);{var p=v=>{var g=Xe(),m=Re(g);Bt(m,()=>e.children??Rt,()=>({ref:t()})),we(v,g)};yn(f,v=>{t()&&v(p)})}we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var CF=bt("<!> <!> <!>",1),RF=bt("<!> <!>",1);function LF(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/Temple_SecondAge_Level3-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=RF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=CF(),m=Re(g);Fe(m,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube223.geometry},get material(){return E(v).materials.Walls}})});var _=He(m,2);Fe(_,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube223_1.geometry},get material(){return E(v).materials.Main}})});var x=He(_,2);Fe(x,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube223_2.geometry},get material(){return E(v).materials.Stone}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}const PF=new k,_x=new Dn,IF=new k,yx=new k,DF=new Dn,xx=new k;class NF extends Wt{constructor(){super()}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent!==null?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(yx,DF,xx),this.matrix.decompose(PF,_x,IF),this.matrixWorld.compose(yx,_x,xx)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(let t=0,n=this.children.length;t<n;t++)this.children[t].updateMatrixWorld(e)}}var FF=bt("<!> <!> <!>",1),OF=bt("<!> <!>",1);function ig(r,e){An(e,!0);let t=st(e,"ref",15),n=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","dracoLoader"]);const i=Mr("/models/Mountain_Group_1-transformed.glb",{dracoLoader:e.dracoLoader});var s=Xe(),a=Re(s);Fe(a,()=>Le.Group,(o,l)=>{l(o,xi({dispose:!1},()=>n,{get ref(){return t()},set ref(c){t(c)},children:(c,u)=>{var h=OF(),d=Re(h);_r(d,()=>i,p=>{var v=Xe(),g=Re(v);Bt(g,()=>e.fallback??Rt),we(p,v)},(p,v)=>{var g=FF(),m=Re(g);Fe(m,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube039.geometry},get material(){return E(v).materials.Stone}})});var _=He(m,2);Fe(_,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube039_1.geometry},get material(){return E(v).materials.Snow}})});var x=He(_,2);Fe(x,()=>Le.Mesh,(y,b)=>{b(y,{castShadow:!0,receiveShadow:!0,get geometry(){return E(v).nodes.Cube039_2.geometry},get material(){return E(v).materials.Dirt}})}),we(p,g)},(p,v)=>{var g=Xe(),m=Re(g);Bt(m,()=>e.error??Rt,()=>({error:E(v)})),we(p,g)});var f=He(d,2);Bt(f,()=>e.children??Rt,()=>({ref:t()})),we(c,h)},$$slots:{default:!0}}))}),we(r,s),Cn()}var UF=bt("<!> <!>",1),BF=bt("<!> <!>",1),zF=bt("<!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!>",1);function kF(r,e){An(e,!1);const t=Gp(),n={width:150,length:300},i={minX:-12,maxX:12,minZ:-30,maxZ:10},a=Array.from({length:1e3},()=>{let g,m;do g=Math.random()*n.width-n.width/2,m=Math.random()*n.length-n.length/2;while(g>=i.minX&&g<=i.maxX&&m>=i.minZ&&m<=i.maxZ);return{position:[g,-1,m],rotation:[0,Math.random()*Math.PI*2,0],scale:.5+Math.random()*.5}}),l=[{position:[-20,-1,5],rotation:[0,.2,0],scale:3},{position:[-18,-1,7],rotation:[0,.7,0],scale:5},{position:[-22,-1,6],rotation:[0,1.1,0],scale:4},{position:[-25,-1,3],rotation:[0,.5,0],scale:3},{position:[-15,-1,-5],rotation:[0,1.9,0],scale:4},{position:[20,-1,5],rotation:[0,.5,0],scale:5},{position:[18,-1,7],rotation:[0,1.3,0],scale:4},{position:[22,-1,6],rotation:[0,2,0],scale:4},{position:[25,-1,3],rotation:[0,.8,0],scale:3},{position:[15,-1,-5],rotation:[0,1.2,0],scale:4},{position:[-13,-1,15],rotation:[0,.3,0],scale:5},{position:[13,-1,15],rotation:[0,1.1,0],scale:5},{position:[-13,-1,-29],rotation:[0,.7,0],scale:4},{position:[13,-1,-29],rotation:[0,1.9,0],scale:4},{position:[-45,-1,-15],rotation:[0,.9,0],scale:3},{position:[45,-1,-15],rotation:[0,1.5,0],scale:3},{position:[-35,-1,-30],rotation:[0,2.1,0],scale:4},{position:[35,-1,-30],rotation:[0,.4,0],scale:4},{position:[-25,-1,-20],rotation:[0,1.2,0],scale:3},{position:[25,-1,-20],rotation:[0,.6,0],scale:3}],c=[{type:"PineTree1",position:[-32,-1,-5],rotation:[0,.2,0],scale:6},{type:"PineTree2",position:[-32,-1,-15],rotation:[0,1.2,0],scale:5.5},{type:"PineTree1",position:[-32,-1,-25],rotation:[0,.5,0],scale:6},{type:"PineTree2",position:[-32,-1,-35],rotation:[0,2.1,0],scale:5.8},{type:"PineTree1",position:[-40,-1,-10],rotation:[0,.8,0],scale:6.2},{type:"PineTree2",position:[-45,-1,-25],rotation:[0,1.5,0],scale:5.5},{type:"PineTree1",position:[-38,-1,-40],rotation:[0,2.3,0],scale:6},{type:"PineTree1",position:[32,-1,-5],rotation:[0,1.2,0],scale:6},{type:"PineTree2",position:[32,-1,-15],rotation:[0,.3,0],scale:5.7},{type:"PineTree1",position:[32,-1,-25],rotation:[0,1.8,0],scale:5.9},{type:"PineTree2",position:[32,-1,-35],rotation:[0,.7,0],scale:6.1},{type:"PineTree1",position:[40,-1,-10],rotation:[0,2.4,0],scale:5.8},{type:"PineTree2",position:[45,-1,-25],rotation:[0,.9,0],scale:5.6},{type:"PineTree1",position:[38,-1,-40],rotation:[0,1.5,0],scale:6.2},{type:"PineTree1",position:[-75,-1,-20],rotation:[0,.4,0],scale:5},{type:"PineTree2",position:[-85,-1,-8],rotation:[0,1.7,0],scale:5.5},{type:"PineTree1",position:[-65,-1,-18],rotation:[0,.8,0],scale:6},{type:"PineTree2",position:[75,-1,-30],rotation:[0,2.2,0],scale:5.3},{type:"PineTree1",position:[85,-1,-12],rotation:[0,1.1,0],scale:5.8},{type:"PineTree2",position:[60,-1,-20],rotation:[0,.6,0],scale:6.1}],u=[{type:"Rock1",position:[-45,-1,-12],rotation:[0,Math.PI*.2,0],scale:[15,10,12]},{type:"Rock2",position:[45,-1,-12],rotation:[0,Math.PI*.7,0],scale:[12,8,18]},{type:"Rock1",position:[-40,-1,-15],rotation:[0,Math.PI*.5,0],scale:[18,10,12]},{type:"Rock2",position:[40,-1,-15],rotation:[0,Math.PI*1.2,0],scale:[14,8,14]},{type:"Rock1",position:[16,-1,-3],rotation:[0,Math.PI*.3,0],scale:[10,6,7]},{type:"Rock2",position:[14,-1,-12],rotation:[0,Math.PI*.1,0],scale:[6,4,6]},{type:"Rock1",position:[-60,-1,-50],rotation:[0,Math.PI*.8,0],scale:[8,5,8]},{type:"Rock2",position:[55,-1,-16],rotation:[0,Math.PI*1.5,0],scale:[9,6,9]},{type:"Rock1",position:[-20,-1,-15],rotation:[0,Math.PI*.4,0],scale:[12,7,10]},{type:"Rock2",position:[35,-1,-17],rotation:[0,Math.PI*.9,0],scale:[10,5,8]}],h=[{position:[-25,-1,-30],rotation:[0,Math.PI*.2,0],scale:3},{position:[28,-1,-25],rotation:[0,Math.PI*1.5,0],scale:3.2},{position:[-42,-1,-15],rotation:[0,Math.PI*.7,0],scale:3.5},{position:[40,-1,-3],rotation:[0,Math.PI*.3,0],scale:3}],d=c.filter(g=>g.type==="PineTree1").map(({position:g,rotation:m,scale:_})=>({position:g,rotation:Array.isArray(m)?m:[0,m,0],scale:Array.isArray(_)?_:[_,_,_]})),f=c.filter(g=>g.type==="PineTree2").map(({position:g,rotation:m,scale:_})=>({position:g,rotation:Array.isArray(m)?m:[0,m,0],scale:Array.isArray(_)?_:[_,_,_]})),p=u.filter(g=>g.type==="Rock1").map(({position:g,rotation:m,scale:_})=>({position:g,rotation:Array.isArray(m)?m:[0,m,0],scale:Array.isArray(_)?_:[_,_,_]})),v=u.filter(g=>g.type==="Rock2").map(({position:g,rotation:m,scale:_})=>({position:g,rotation:Array.isArray(m)?m:[0,m,0],scale:Array.isArray(_)?_:[_,_,_]}));JT(),Le.Group(r,{"position.z":0,children:(g,m)=>{var _=zF(),x=Re(_);Le.Mesh(x,{position:[0,-1,0],rotation:[-Math.PI/2,0,0],receiveShadow:!0,children:(P,z)=>{var W=UF(),X=Re(W);Le.PlaneGeometry(X,{args:[300,600]});var re=He(X,2);Le.MeshStandardMaterial(re,{color:"#4a7c59"}),we(P,W)},$$slots:{default:!0}});var y=He(x,2);Le.Mesh(y,{position:[0,-.95,0],rotation:[-Math.PI/2,0,0],receiveShadow:!0,children:(P,z)=>{var W=BF(),X=Re(W);Le.PlaneGeometry(X,{args:[20,80]});var re=He(X,2);Le.MeshStandardMaterial(re,{color:"#8b7355"}),we(P,W)},$$slots:{default:!0}});var b=He(y,2);LF(b,{dracoLoader:t,position:[0,-1,-40],rotation:[0,0,0],scale:[20,10,10]});var M=He(b,2);ig(M,{dracoLoader:t,position:[-100,-1,-100],rotation:[0,0,0],scale:[25,25,25]});var w=He(M,2);ig(w,{dracoLoader:t,position:[100,-1,-100],rotation:[0,0,0],scale:[25,25,25]});var C=He(w,2);ig(C,{dracoLoader:t,position:[0,-1,-100],rotation:[0,Math.PI,0],scale:[20,20,20]});var T=He(C,2);pi(T,1,()=>a,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]);MF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(z).scale}})});var S=He(T,2);pi(S,1,()=>l,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]);wF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(z).scale}})});var R=He(S,2);pi(R,1,()=>d,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]),re=zn(()=>[E(z).scale[0],E(z).scale[1],E(z).scale[2]]);gF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(re)}})});var H=He(R,2);pi(H,1,()=>f,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]),re=zn(()=>[E(z).scale[0],E(z).scale[1],E(z).scale[2]]);yF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(re)}})});var D=He(H,2);pi(D,1,()=>p,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]),re=zn(()=>[E(z).scale[0],E(z).scale[1],E(z).scale[2]]);hF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(re)}})});var O=He(D,2);pi(O,1,()=>v,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]),re=zn(()=>[E(z).scale[0],E(z).scale[1],E(z).scale[2]]);fF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(re)}})});var G=He(O,2);pi(G,1,()=>h,Ei,(P,z)=>{const W=zn(()=>[E(z).position[0],E(z).position[1],E(z).position[2]]),X=zn(()=>[E(z).rotation[0],E(z).rotation[1],E(z).rotation[2]]);AF(P,{dracoLoader:t,get position(){return E(W)},get rotation(){return E(X)},get scale(){return E(z).scale}})}),we(g,_)},$$slots:{default:!0}}),Cn()}const ru=[],VF=(r,e)=>{let t=1;for(let n=1;n<=e;n++)t*=(r+1-n)/n;return t},HF=(r,e)=>{const t=ru.find(i=>i.bezierPoints===e);if(t)return t.referencedBy.includes(r)||t.referencedBy.push(r),t.curveFunction;const n={referencedBy:[r],bezierPoints:e,curveFunction:i=>{if(i<0)return e[0].y;if(i>1)return e[e.length-1].y;let s=0,a=e.length-1;e.find((u,h)=>{const d=i<(u.percentage??0);return d?a=h:u.percentage!==void 0&&(s=h),d});const o=a-s,l=(i-(e[s].percentage??0))/((e[a].percentage??1)-(e[s].percentage??0));let c=0;for(let u=0;u<=o;u++){const h=e[s+u],d=VF(o,u)*Math.pow(1-l,o-u)*Math.pow(l,u);c+=d*h.y}return c}};return ru.push(n),n.curveFunction},GF=r=>{for(;;){const e=ru.findIndex(n=>n.referencedBy.includes(r));if(e===-1)break;const t=ru[e];t.referencedBy=t.referencedBy.filter(n=>n!==r),t.referencedBy.length===0&&ru.splice(e,1)}};var rg,Mx;function WF(){if(Mx)return rg;Mx=1;const r=f=>f,e={In(f){return f*f},Out(f){return f*(2-f)},InOut(f){let p=f*2;return p<1?.5*p*p:(p-=1,-.5*(p*(p-2)-1))}},t={In(f){return f*f*f},Out(f){return--f*f*f+1},InOut(f){let p=f*2;return p<1?.5*p*p*p:(p-=2,.5*(p*p*p+2))}},n={In(f){return f*f*f*f},Out(f){return 1- --f*f*f*f},InOut(f){let p=f*2;return p<1?.5*p*p*p*p:(p-=2,-.5*(p*p*p*p-2))}},i={In(f){return f*f*f*f*f},Out(f){return--f*f*f*f*f+1},InOut(f){let p=f*2;return p<1?.5*p*p*p*p*p:(p-=2,.5*(p*p*p*p*p+2))}},s={In(f){return 1-Math.cos(f*Math.PI/2)},Out(f){return Math.sin(f*Math.PI/2)},InOut(f){return .5*(1-Math.cos(Math.PI*f))}},a={In(f){return f===0?0:1024**(f-1)},Out(f){return f===1?1:1-2**(-10*f)},InOut(f){if(f===0)return 0;if(f===1)return 1;const p=f*2;return p<1?.5*1024**(p-1):.5*(-(2**(-10*(p-1)))+2)}},o={In(f){return 1-Math.sqrt(1-f*f)},Out(f){return Math.sqrt(1- --f*f)},InOut(f){let p=f*2;return p<1?-.5*(Math.sqrt(1-p*p)-1):(p-=2,.5*(Math.sqrt(1-p*p)+1))}},l={In(f){let p=.1;const v=.4;let g;return f===0?0:f===1?1:(p<1?(p=1,g=v/4):g=v*Math.asin(1/p)/(2*Math.PI),f-=1,-(p*2**(10*f)*Math.sin((f-g)*(2*Math.PI)/v)))},Out(f){let p=.1;const v=.4;let g;return f===0?0:f===1?1:(p<1?(p=1,g=v/4):g=v*Math.asin(1/p)/(2*Math.PI),p*2**(-10*f)*Math.sin((f-g)*(2*Math.PI)/v)+1)},InOut(f){let p=.1;const v=.4;let g;if(f===0)return 0;if(f===1)return 1;p<1?(p=1,g=v/4):g=v*Math.asin(1/p)/(2*Math.PI);const m=f*2;if(m<1){const x=m-1;return-.5*(p*2**(10*x)*Math.sin((x-g)*(2*Math.PI)/v))}const _=m-1;return p*2**(-10*_)*Math.sin((_-g)*(2*Math.PI)/v)*.5+1}},c={In(f){return f*f*((1.70158+1)*f-1.70158)},Out(f){return--f*f*((1.70158+1)*f+1.70158)+1},InOut(f){const p=2.5949095;let v=f*2;return v<1?.5*(v*v*((p+1)*v-p)):(v-=2,.5*(v*v*((p+1)*v+p)+2))}},u={In(f){return 1-u.Out(1-f)},Out(f){if(f<1/2.75)return 7.5625*f*f;if(f<2/2.75){const v=f-.5454545454545454;return 7.5625*v*v+.75}if(f<2.5/2.75){const v=f-.8181818181818182;return 7.5625*v*v+.9375}const p=f-2.625/2.75;return 7.5625*p*p+.984375},InOut(f){return f<.5?u.In(f*2)*.5:u.Out(f*2-1)*.5+.5}},h={Quadratic:e,Cubic:t,Quartic:n,Quintic:i,Sinusoidal:s,Exponential:a,Circular:o,Elastic:l,Back:c,Bounce:u},d=(f,p,v)=>Object.defineProperty(f,p,{value:v});for(const f of Object.keys(h)){const p=h[f],v=f.toLowerCase();d(h,v,p);for(const g of Object.keys(p)){const m=p[g],_=g.toLowerCase();d(h,`${f}.${g}`,m),d(h,`${v}.${_}`,m),d(p,_,m)}}return h.Linear=r,d(h,"linear",r),rg=h,typeof window<"u"&&(window.Easing=h),rg}var $F=WF();const Kt=LN($F);Kt.Linear.None,Kt.Quadratic.In,Kt.Quadratic.Out,Kt.Quadratic.InOut,Kt.Cubic.In,Kt.Cubic.Out,Kt.Cubic.InOut,Kt.Quartic.In,Kt.Quartic.Out,Kt.Quartic.InOut,Kt.Quintic.In,Kt.Quintic.Out,Kt.Quintic.InOut,Kt.Sinusoidal.In,Kt.Sinusoidal.Out,Kt.Sinusoidal.InOut,Kt.Exponential.In,Kt.Exponential.Out,Kt.Exponential.InOut,Kt.Circular.In,Kt.Circular.Out,Kt.Circular.InOut,Kt.Elastic.In,Kt.Elastic.Out,Kt.Elastic.InOut,Kt.Back.In,Kt.Back.Out,Kt.Back.InOut,Kt.Bounce.In,Kt.Bounce.Out,Kt.Bounce.InOut;const XF=(r,e,t,n,{radius:i,radiusThickness:s,arc:a})=>{const o=Math.random()*(a/360),l=Math.random(),c=Math.random(),u=2*Math.PI*o,h=Math.acos(2*l-1),d=Math.sin(h),f=d*Math.cos(u),p=d*Math.sin(u),v=Math.cos(h),g=1-s;r.x=i*g*f+i*s*c*f,r.y=i*g*p+i*s*c*p,r.z=i*g*v+i*s*c*v,r.applyQuaternion(e);const m=1/r.length();t.set(r.x*m*n,r.y*m*n,r.z*m*n),t.applyQuaternion(e)},qF=(r,e,t,n,{radius:i,radiusThickness:s,arc:a,angle:o=90})=>{const l=2*Math.PI*Math.random()*(a/360),c=Math.random(),u=Math.cos(l),h=Math.sin(l),d=1-s;r.x=i*d*u+i*s*c*u,r.y=i*d*h+i*s*c*h,r.z=0,r.applyQuaternion(e);const f=r.length(),p=Math.abs(f/i*er.degToRad(o)),v=Math.sin(p),g=1/f;t.set(r.x*v*g*n,r.y*v*g*n,Math.cos(p)*n),t.applyQuaternion(e)},ZF=(r,e,t,n,{scale:i,emitFrom:s})=>{const a=i;switch(s){case"VOLUME":r.x=Math.random()*a.x-a.x/2,r.y=Math.random()*a.y-a.y/2,r.z=Math.random()*a.z-a.z/2;break;case"SHELL":const o=Math.floor(Math.random()*6),l=o%3,c=[];c[l]=o>2?1:0,c[(l+1)%3]=Math.random(),c[(l+2)%3]=Math.random(),r.x=c[0]*a.x-a.x/2,r.y=c[1]*a.y-a.y/2,r.z=c[2]*a.z-a.z/2;break;case"EDGE":const u=Math.floor(Math.random()*6),h=u%3,d=Math.floor(Math.random()*4),f=[];f[h]=u>2?1:0,f[(h+1)%3]=d<2?Math.random():d-2,f[(h+2)%3]=d<2?d:Math.random(),r.x=f[0]*a.x-a.x/2,r.y=f[1]*a.y-a.y/2,r.z=f[2]*a.z-a.z/2;break}r.applyQuaternion(e),t.set(0,0,n),t.applyQuaternion(e)},YF=(r,e,t,n,{radius:i,radiusThickness:s,arc:a})=>{const o=2*Math.PI*Math.random()*(a/360),l=Math.random(),c=Math.cos(o),u=Math.sin(o),h=1-s;r.x=i*h*c+i*s*l*c,r.y=i*h*u+i*s*l*u,r.z=0,r.applyQuaternion(e);const f=1/r.length();t.set(r.x*f*n,r.y*f*n,0),t.applyQuaternion(e)},jF=(r,e,t,n,{rotation:i,scale:s})=>{const a=s,o=i,l=Math.random()*a.x-a.x/2,c=Math.random()*a.y-a.y/2,u=er.degToRad(o.x),h=er.degToRad(o.y);r.x=l*Math.cos(h),r.y=c*Math.cos(u),r.z=l*Math.sin(h)-c*Math.sin(u),r.applyQuaternion(e),t.set(0,0,n),t.applyQuaternion(e)},JF=()=>{try{const r=document.createElement("canvas"),e=64;r.width=e,r.height=e;const t=r.getContext("2d");if(t){const n=e/2,i=e/2,s=e/2-2;t.beginPath(),t.arc(n,i,s,0,2*Math.PI,!1),t.fillStyle="white",t.fill();const a=new xS(r);return a.needsUpdate=!0,a}else return console.warn("Could not get 2D context to generate default particle texture."),null}catch(r){return console.warn("Error creating default particle texture:",r),null}},$o=r=>typeof r!="number"&&"type"in r,Xa=(r,e)=>{if(e.type==="BEZIER")return HF(r,e.bezierPoints);if(e.type==="EASING")return e.curveFunction;throw new Error(`Unsupported value type: ${e}`)},on=(r,e,t=0)=>{if(typeof e=="number")return e;if("min"in e&&"max"in e)return e.min===e.max?e.min??0:er.randFloat(e.min??0,e.max??1);const n=e;return Xa(r,n)(t)*(n.scale??1)},Xo=new k(0,0,0),bx=new Vi,z1=({delta:r,generalData:e,normalizedConfig:t,attributes:n,particleLifetimePercentage:i,particleIndex:s})=>{const{particleSystemId:a,startValues:o,lifetimeValues:l,linearVelocityData:c,orbitalVelocityData:u,noise:h}=e,d=s*3,f=n.position.array;if(c){const{speed:p,valueModifiers:v}=c[s],g=v.x?v.x(i):p.x,m=v.y?v.y(i):p.y,_=v.z?v.z(i):p.z;f[d]+=g*r,f[d+1]+=m*r,f[d+2]+=_*r,n.position.needsUpdate=!0}if(u){const{speed:p,positionOffset:v,valueModifiers:g}=u[s];f[d]-=v.x,f[d+1]-=v.y,f[d+2]-=v.z;const m=g.x?g.x(i):p.x,_=g.y?g.y(i):p.y,x=g.z?g.z(i):p.z;bx.set(m*r,x*r,_*r),v.applyEuler(bx),f[d]+=v.x,f[d+1]+=v.y,f[d+2]+=v.z,n.position.needsUpdate=!0}if(t.sizeOverLifetime.isActive){const p=on(a,t.sizeOverLifetime.lifetimeCurve,i);n.size.array[s]=o.startSize[s]*p,n.size.needsUpdate=!0}if(t.opacityOverLifetime.isActive){const p=on(a,t.opacityOverLifetime.lifetimeCurve,i);n.colorA.array[s]=o.startOpacity[s]*p,n.colorA.needsUpdate=!0}if(l.rotationOverLifetime&&(n.rotation.array[s]+=l.rotationOverLifetime[s]*r*.02,n.rotation.needsUpdate=!0),h.isActive){const{sampler:p,strength:v,offsets:g,positionAmount:m,rotationAmount:_,sizeAmount:x}=h;let y;const b=(i+(g?g[s]:0))*10*v,M=.15*v;Xo.set(b,0,0),y=p.get3(Xo),f[d]+=y*M*m,_!==0&&(n.rotation.array[s]+=y*M*_,n.rotation.needsUpdate=!0),x!==0&&(n.size.array[s]+=y*M*x,n.size.needsUpdate=!0),Xo.set(b,b,0),y=p.get3(Xo),f[d+1]+=y*M*m,Xo.set(b,b,b),y=p.get3(Xo),f[d+2]+=y*M*m,n.position.needsUpdate=!0}},k1=(r,e,t={skippedProperties:[],applyToFirstObject:!1})=>{const n={};return Array.from(new Set([...Object.keys(r||{}),...Object.keys(e||{})])).forEach(i=>{(!t.skippedProperties||!t.skippedProperties.includes(i))&&(typeof r[i]=="object"&&r[i]&&e[i]&&!Array.isArray(r[i])?n[i]=k1(r[i],e[i],t):(n[i]=e[i]===0?0:e[i]===!1?!1:e[i]||r[i],t.applyToFirstObject&&(r[i]=n[i])))}),n};/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const V1="128",KF=0,Sx=1,QF=2,H1=1,eO=2,kc=3,Yp=0,Jn=1,jp=2,G1=1,su=0,au=1,wx=2,Tx=3,Ex=4,tO=5,fl=100,nO=101,iO=102,Ax=103,Cx=104,rO=200,sO=201,aO=202,oO=203,W1=204,$1=205,lO=206,cO=207,uO=208,hO=209,dO=210,fO=0,pO=1,mO=2,vv=3,gO=4,vO=5,_O=6,yO=7,Jp=0,xO=1,MO=2,ou=0,bO=1,SO=2,wO=3,TO=4,EO=5,X1=300,U_=301,B_=302,Rx=303,Lx=304,z_=306,k_=307,_v=1e3,Ir=1001,yv=1002,Ci=1003,Px=1004,Ix=1005,gr=1006,AO=1007,V_=1008,H_=1009,CO=1010,RO=1011,Bf=1012,LO=1013,Vd=1014,ia=1015,zf=1016,PO=1017,IO=1018,DO=1019,lu=1020,NO=1021,no=1022,Fr=1023,FO=1024,OO=1025,Al=1026,Au=1027,UO=1028,BO=1029,zO=1030,kO=1031,VO=1032,HO=1033,Dx=33776,Nx=33777,Fx=33778,Ox=33779,Ux=35840,Bx=35841,zx=35842,kx=35843,GO=36196,Vx=37492,Hx=37496,WO=37808,$O=37809,XO=37810,qO=37811,ZO=37812,YO=37813,jO=37814,JO=37815,KO=37816,QO=37817,eU=37818,tU=37819,nU=37820,iU=37821,rU=36492,sU=37840,aU=37841,oU=37842,lU=37843,cU=37844,uU=37845,hU=37846,dU=37847,fU=37848,pU=37849,mU=37850,gU=37851,vU=37852,_U=37853,yU=2200,xU=2201,MU=2202,kf=2300,Vf=2301,sg=2302,yl=2400,xl=2401,Hf=2402,G_=2500,q1=2501,bU=0,rh=3e3,Z1=3001,SU=3007,wU=3002,TU=3003,EU=3004,AU=3005,CU=3006,RU=3200,LU=3201,nc=0,PU=1,ag=7680,IU=519,Cu=35044,Gf=35048,Gx="300 es";class So{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,a=i.length;s<a;s++)i[s].call(this,e);e.target=null}}}const ii=[];for(let r=0;r<256;r++)ii[r]=(r<16?"0":"")+r.toString(16);const og=Math.PI/180,xv=180/Math.PI;function Kr(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(ii[r&255]+ii[r>>8&255]+ii[r>>16&255]+ii[r>>24&255]+"-"+ii[e&255]+ii[e>>8&255]+"-"+ii[e>>16&15|64]+ii[e>>24&255]+"-"+ii[t&63|128]+ii[t>>8&255]+"-"+ii[t>>16&255]+ii[t>>24&255]+ii[n&255]+ii[n>>8&255]+ii[n>>16&255]+ii[n>>24&255]).toUpperCase()}function ji(r,e,t){return Math.max(e,Math.min(t,r))}function DU(r,e){return(r%e+e)%e}function lg(r,e,t){return(1-t)*r+t*e}function Wx(r){return(r&r-1)===0&&r!==0}function NU(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function FU(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}class Ge{constructor(e=0,t=0){this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,a=this.y-e.y;return this.x=s*n-a*i+e.x,this.y=s*i+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}Ge.prototype.isVector2=!0;class si{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,a,o,l,c){const u=this.elements;return u[0]=e,u[1]=i,u[2]=o,u[3]=t,u[4]=s,u[5]=l,u[6]=n,u[7]=a,u[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,a=n[0],o=n[3],l=n[6],c=n[1],u=n[4],h=n[7],d=n[2],f=n[5],p=n[8],v=i[0],g=i[3],m=i[6],_=i[1],x=i[4],y=i[7],b=i[2],M=i[5],w=i[8];return s[0]=a*v+o*_+l*b,s[3]=a*g+o*x+l*M,s[6]=a*m+o*y+l*w,s[1]=c*v+u*_+h*b,s[4]=c*g+u*x+h*M,s[7]=c*m+u*y+h*w,s[2]=d*v+f*_+p*b,s[5]=d*g+f*x+p*M,s[8]=d*m+f*y+p*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8];return t*a*u-t*o*c-n*s*u+n*o*l+i*s*c-i*a*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8],h=u*a-o*c,d=o*l-u*s,f=c*s-a*l,p=t*h+n*d+i*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const v=1/p;return e[0]=h*v,e[1]=(i*c-u*n)*v,e[2]=(o*n-i*a)*v,e[3]=d*v,e[4]=(u*t-i*l)*v,e[5]=(i*s-o*t)*v,e[6]=f*v,e[7]=(n*l-c*t)*v,e[8]=(a*t-n*s)*v,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,a,o){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*a+c*o)+a+e,-i*c,i*l,-i*(-c*a+l*o)+o+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const t=Math.cos(e),n=Math.sin(e),i=this.elements,s=i[0],a=i[3],o=i[6],l=i[1],c=i[4],u=i[7];return i[0]=t*s+n*l,i[3]=t*a+n*c,i[6]=t*o+n*u,i[1]=-n*s+t*l,i[4]=-n*a+t*c,i[7]=-n*o+t*u,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}si.prototype.isMatrix3=!0;let qo;class ic{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{qo===void 0&&(qo=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),qo.width=e.width,qo.height=e.height;const n=qo.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=qo}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}}let OU=0;class oi extends So{constructor(e=oi.DEFAULT_IMAGE,t=oi.DEFAULT_MAPPING,n=Ir,i=Ir,s=gr,a=V_,o=Fr,l=H_,c=1,u=rh){super(),Object.defineProperty(this,"id",{value:OU++}),this.uuid=Kr(),this.name="",this.image=e,this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=a,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new Ge(0,0),this.repeat=new Ge(1,1),this.center=new Ge(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new si,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=u,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const i=this.image;if(i.uuid===void 0&&(i.uuid=Kr()),!t&&e.images[i.uuid]===void 0){let s;if(Array.isArray(i)){s=[];for(let a=0,o=i.length;a<o;a++)i[a].isDataTexture?s.push(cg(i[a].image)):s.push(cg(i[a]))}else s=cg(i);e.images[i.uuid]={uuid:i.uuid,url:s}}n.image=i.uuid}return t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==X1)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case _v:e.x=e.x-Math.floor(e.x);break;case Ir:e.x=e.x<0?0:1;break;case yv:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case _v:e.y=e.y-Math.floor(e.y);break;case Ir:e.y=e.y<0?0:1;break;case yv:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&this.version++}}oi.DEFAULT_IMAGE=void 0;oi.DEFAULT_MAPPING=X1;oi.prototype.isTexture=!0;function cg(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?ic.getDataURL(r):r.data?{data:Array.prototype.slice.call(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}class cn{constructor(e=0,t=0,n=0,i=1){this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*s,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*s,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*s,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*s,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],u=l[4],h=l[8],d=l[1],f=l[5],p=l[9],v=l[2],g=l[6],m=l[10];if(Math.abs(u-d)<.01&&Math.abs(h-v)<.01&&Math.abs(p-g)<.01){if(Math.abs(u+d)<.1&&Math.abs(h+v)<.1&&Math.abs(p+g)<.1&&Math.abs(c+f+m-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const x=(c+1)/2,y=(f+1)/2,b=(m+1)/2,M=(u+d)/4,w=(h+v)/4,C=(p+g)/4;return x>y&&x>b?x<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(x),i=M/n,s=w/n):y>b?y<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(y),n=M/i,s=C/i):b<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(b),n=w/s,i=C/s),this.set(n,i,s,t),this}let _=Math.sqrt((g-p)*(g-p)+(h-v)*(h-v)+(d-u)*(d-u));return Math.abs(_)<.001&&(_=1),this.x=(g-p)/_,this.y=(h-v)/_,this.z=(d-u)/_,this.w=Math.acos((c+f+m-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}cn.prototype.isVector4=!0;class io extends So{constructor(e,t,n){super(),this.width=e,this.height=t,this.depth=1,this.scissor=new cn(0,0,e,t),this.scissorTest=!1,this.viewport=new cn(0,0,e,t),n=n||{},this.texture=new oi(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=1,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:gr,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null}setTexture(e){e.image={width:this.width,height:this.height,depth:this.depth},this.texture=e}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}io.prototype.isWebGLRenderTarget=!0;class UU extends io{constructor(e,t,n){super(e,t,n),this.samples=4}copy(e){return super.copy.call(this,e),this.samples=e.samples,this}}UU.prototype.isWebGLMultisampleRenderTarget=!0;class Li{constructor(e=0,t=0,n=0,i=1){this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,i)}static slerpFlat(e,t,n,i,s,a,o){let l=n[i+0],c=n[i+1],u=n[i+2],h=n[i+3];const d=s[a+0],f=s[a+1],p=s[a+2],v=s[a+3];if(o===0){e[t+0]=l,e[t+1]=c,e[t+2]=u,e[t+3]=h;return}if(o===1){e[t+0]=d,e[t+1]=f,e[t+2]=p,e[t+3]=v;return}if(h!==v||l!==d||c!==f||u!==p){let g=1-o;const m=l*d+c*f+u*p+h*v,_=m>=0?1:-1,x=1-m*m;if(x>Number.EPSILON){const b=Math.sqrt(x),M=Math.atan2(b,m*_);g=Math.sin(g*M)/b,o=Math.sin(o*M)/b}const y=o*_;if(l=l*g+d*y,c=c*g+f*y,u=u*g+p*y,h=h*g+v*y,g===1-o){const b=1/Math.sqrt(l*l+c*c+u*u+h*h);l*=b,c*=b,u*=b,h*=b}}e[t]=l,e[t+1]=c,e[t+2]=u,e[t+3]=h}static multiplyQuaternionsFlat(e,t,n,i,s,a){const o=n[i],l=n[i+1],c=n[i+2],u=n[i+3],h=s[a],d=s[a+1],f=s[a+2],p=s[a+3];return e[t]=o*p+u*h+l*f-c*d,e[t+1]=l*p+u*d+c*h-o*f,e[t+2]=c*p+u*f+o*d-l*h,e[t+3]=u*p-o*h-l*d-c*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!(e&&e.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,s=e._z,a=e._order,o=Math.cos,l=Math.sin,c=o(n/2),u=o(i/2),h=o(s/2),d=l(n/2),f=l(i/2),p=l(s/2);switch(a){case"XYZ":this._x=d*u*h+c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h-d*f*p;break;case"YXZ":this._x=d*u*h+c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h+d*f*p;break;case"ZXY":this._x=d*u*h-c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h-d*f*p;break;case"ZYX":this._x=d*u*h-c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h+d*f*p;break;case"YZX":this._x=d*u*h+c*f*p,this._y=c*f*h+d*u*p,this._z=c*u*p-d*f*h,this._w=c*u*h-d*f*p;break;case"XZY":this._x=d*u*h-c*f*p,this._y=c*f*h-d*u*p,this._z=c*u*p+d*f*h,this._w=c*u*h+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],a=t[1],o=t[5],l=t[9],c=t[2],u=t[6],h=t[10],d=n+o+h;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(u-l)*f,this._y=(s-c)*f,this._z=(a-i)*f}else if(n>o&&n>h){const f=2*Math.sqrt(1+n-o-h);this._w=(u-l)/f,this._x=.25*f,this._y=(i+a)/f,this._z=(s+c)/f}else if(o>h){const f=2*Math.sqrt(1+o-n-h);this._w=(s-c)/f,this._x=(i+a)/f,this._y=.25*f,this._z=(l+u)/f}else{const f=2*Math.sqrt(1+h-n-o);this._w=(a-i)/f,this._x=(s+c)/f,this._y=(l+u)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(ji(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return t!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,a=e._w,o=t._x,l=t._y,c=t._z,u=t._w;return this._x=n*u+a*o+i*c-s*l,this._y=i*u+a*l+s*o-n*c,this._z=s*u+a*c+n*l-i*o,this._w=a*u-n*o-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,a=this._w;let o=a*e._w+n*e._x+i*e._y+s*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=n,this._y=i,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const f=1-t;return this._w=f*a+t*this._w,this._x=f*n+t*this._x,this._y=f*i+t*this._y,this._z=f*s+t*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),u=Math.atan2(c,o),h=Math.sin((1-t)*u)/c,d=Math.sin(t*u)/c;return this._w=a*h+this._w*d,this._x=n*h+this._x*d,this._y=i*h+this._y*d,this._z=s*h+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){this.copy(e).slerp(t,n)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}Li.prototype.isQuaternion=!0;class q{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion($x.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion($x.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,a=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*a,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*a,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,a=e.y,o=e.z,l=e.w,c=l*t+a*i-o*n,u=l*n+o*t-s*i,h=l*i+s*n-a*t,d=-s*t-a*n-o*i;return this.x=c*l+d*-s+u*-o-h*-a,this.y=u*l+d*-a+h*-s-c*-o,this.z=h*l+d*-o+c*-a-u*-s,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return t!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,a=t.x,o=t.y,l=t.z;return this.x=i*l-s*o,this.y=s*a-n*l,this.z=n*o-i*a,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return ug.copy(this).projectOnVector(e),this.sub(ug)}reflect(e){return this.sub(ug.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(ji(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}q.prototype.isVector3=!0;const ug=new q,$x=new Li;class br{constructor(e=new q(1/0,1/0,1/0),t=new q(-1/0,-1/0,-1/0)){this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=1/0,n=1/0,i=1/0,s=-1/0,a=-1/0,o=-1/0;for(let l=0,c=e.length;l<c;l+=3){const u=e[l],h=e[l+1],d=e[l+2];u<t&&(t=u),h<n&&(n=h),d<i&&(i=d),u>s&&(s=u),h>a&&(a=h),d>o&&(o=d)}return this.min.set(t,n,i),this.max.set(s,a,o),this}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,s=-1/0,a=-1/0,o=-1/0;for(let l=0,c=e.count;l<c;l++){const u=e.getX(l),h=e.getY(l),d=e.getZ(l);u<t&&(t=u),h<n&&(n=h),d<i&&(i=d),u>s&&(s=u),h>a&&(a=h),d>o&&(o=d)}return this.min.set(t,n,i),this.max.set(s,a,o),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=Ec.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e){return this.makeEmpty(),this.expandByObject(e)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return e===void 0&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new q),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return e===void 0&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new q),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e){e.updateWorldMatrix(!1,!1);const t=e.geometry;t!==void 0&&(t.boundingBox===null&&t.computeBoundingBox(),hg.copy(t.boundingBox),hg.applyMatrix4(e.matrixWorld),this.union(hg));const n=e.children;for(let i=0,s=n.length;i<s;i++)this.expandByObject(n[i]);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t===void 0&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new q),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,Ec),Ec.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Ac),ad.subVectors(this.max,Ac),Zo.subVectors(e.a,Ac),Yo.subVectors(e.b,Ac),jo.subVectors(e.c,Ac),Ws.subVectors(Yo,Zo),$s.subVectors(jo,Yo),Ha.subVectors(Zo,jo);let t=[0,-Ws.z,Ws.y,0,-$s.z,$s.y,0,-Ha.z,Ha.y,Ws.z,0,-Ws.x,$s.z,0,-$s.x,Ha.z,0,-Ha.x,-Ws.y,Ws.x,0,-$s.y,$s.x,0,-Ha.y,Ha.x,0];return!dg(t,Zo,Yo,jo,ad)||(t=[1,0,0,0,1,0,0,0,1],!dg(t,Zo,Yo,jo,ad))?!1:(od.crossVectors(Ws,$s),t=[od.x,od.y,od.z],dg(t,Zo,Yo,jo,ad))}clampPoint(e,t){return t===void 0&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new q),t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return Ec.copy(e).clamp(this.min,this.max).sub(e).length()}getBoundingSphere(e){return e===void 0&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=this.getSize(Ec).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(fs[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),fs[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),fs[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),fs[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),fs[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),fs[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),fs[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),fs[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(fs),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}br.prototype.isBox3=!0;const fs=[new q,new q,new q,new q,new q,new q,new q,new q],Ec=new q,hg=new br,Zo=new q,Yo=new q,jo=new q,Ws=new q,$s=new q,Ha=new q,Ac=new q,ad=new q,od=new q,Ga=new q;function dg(r,e,t,n,i){for(let s=0,a=r.length-3;s<=a;s+=3){Ga.fromArray(r,s);const o=i.x*Math.abs(Ga.x)+i.y*Math.abs(Ga.y)+i.z*Math.abs(Ga.z),l=e.dot(Ga),c=t.dot(Ga),u=n.dot(Ga);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>o)return!1}return!0}const BU=new br,Xx=new q,fg=new q,pg=new q;class rc{constructor(e=new q,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):BU.setFromPoints(e).getCenter(n);let i=0;for(let s=0,a=e.length;s<a;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t===void 0&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new q),t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return e===void 0&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new br),this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){pg.subVectors(e,this.center);const t=pg.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.add(pg.multiplyScalar(i/n)),this.radius+=i}return this}union(e){return fg.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(Xx.copy(e.center).add(fg)),this.expandByPoint(Xx.copy(e.center).sub(fg)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ps=new q,mg=new q,ld=new q,Xs=new q,gg=new q,cd=new q,vg=new q;class sc{constructor(e=new q,t=new q(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t===void 0&&(console.warn("THREE.Ray: .at() target is now required"),t=new q),t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ps)),this}closestPointToPoint(e,t){t===void 0&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new q),t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ps.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ps.copy(this.direction).multiplyScalar(t).add(this.origin),ps.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){mg.copy(e).add(t).multiplyScalar(.5),ld.copy(t).sub(e).normalize(),Xs.copy(this.origin).sub(mg);const s=e.distanceTo(t)*.5,a=-this.direction.dot(ld),o=Xs.dot(this.direction),l=-Xs.dot(ld),c=Xs.lengthSq(),u=Math.abs(1-a*a);let h,d,f,p;if(u>0)if(h=a*l-o,d=a*o-l,p=s*u,h>=0)if(d>=-p)if(d<=p){const v=1/u;h*=v,d*=v,f=h*(h+a*d+2*o)+d*(a*h+d+2*l)+c}else d=s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;else d=-s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;else d<=-p?(h=Math.max(0,-(-a*s+o)),d=h>0?-s:Math.min(Math.max(-s,-l),s),f=-h*h+d*(d+2*l)+c):d<=p?(h=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(h=Math.max(0,-(a*s+o)),d=h>0?s:Math.min(Math.max(-s,-l),s),f=-h*h+d*(d+2*l)+c);else d=a>0?-s:s,h=Math.max(0,-(a*d+o)),f=-h*h+d*(d+2*l)+c;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(ld).multiplyScalar(d).add(mg),f}intersectSphere(e,t){ps.subVectors(e.center,this.origin);const n=ps.dot(this.direction),i=ps.dot(ps)-n*n,s=e.radius*e.radius;if(i>s)return null;const a=Math.sqrt(s-i),o=n-a,l=n+a;return o<0&&l<0?null:o<0?this.at(l,t):this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,a,o,l;const c=1/this.direction.x,u=1/this.direction.y,h=1/this.direction.z,d=this.origin;return c>=0?(n=(e.min.x-d.x)*c,i=(e.max.x-d.x)*c):(n=(e.max.x-d.x)*c,i=(e.min.x-d.x)*c),u>=0?(s=(e.min.y-d.y)*u,a=(e.max.y-d.y)*u):(s=(e.max.y-d.y)*u,a=(e.min.y-d.y)*u),n>a||s>i||((s>n||n!==n)&&(n=s),(a<i||i!==i)&&(i=a),h>=0?(o=(e.min.z-d.z)*h,l=(e.max.z-d.z)*h):(o=(e.max.z-d.z)*h,l=(e.min.z-d.z)*h),n>l||o>i)||((o>n||n!==n)&&(n=o),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,ps)!==null}intersectTriangle(e,t,n,i,s){gg.subVectors(t,e),cd.subVectors(n,e),vg.crossVectors(gg,cd);let a=this.direction.dot(vg),o;if(a>0){if(i)return null;o=1}else if(a<0)o=-1,a=-a;else return null;Xs.subVectors(this.origin,e);const l=o*this.direction.dot(cd.crossVectors(Xs,cd));if(l<0)return null;const c=o*this.direction.dot(gg.cross(Xs));if(c<0||l+c>a)return null;const u=-o*Xs.dot(vg);return u<0?null:this.at(u/a,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Mt{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,i,s,a,o,l,c,u,h,d,f,p,v,g){const m=this.elements;return m[0]=e,m[4]=t,m[8]=n,m[12]=i,m[1]=s,m[5]=a,m[9]=o,m[13]=l,m[2]=c,m[6]=u,m[10]=h,m[14]=d,m[3]=f,m[7]=p,m[11]=v,m[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Mt().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Jo.setFromMatrixColumn(e,0).length(),s=1/Jo.setFromMatrixColumn(e,1).length(),a=1/Jo.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,n=e.x,i=e.y,s=e.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(i),c=Math.sin(i),u=Math.cos(s),h=Math.sin(s);if(e.order==="XYZ"){const d=a*u,f=a*h,p=o*u,v=o*h;t[0]=l*u,t[4]=-l*h,t[8]=c,t[1]=f+p*c,t[5]=d-v*c,t[9]=-o*l,t[2]=v-d*c,t[6]=p+f*c,t[10]=a*l}else if(e.order==="YXZ"){const d=l*u,f=l*h,p=c*u,v=c*h;t[0]=d+v*o,t[4]=p*o-f,t[8]=a*c,t[1]=a*h,t[5]=a*u,t[9]=-o,t[2]=f*o-p,t[6]=v+d*o,t[10]=a*l}else if(e.order==="ZXY"){const d=l*u,f=l*h,p=c*u,v=c*h;t[0]=d-v*o,t[4]=-a*h,t[8]=p+f*o,t[1]=f+p*o,t[5]=a*u,t[9]=v-d*o,t[2]=-a*c,t[6]=o,t[10]=a*l}else if(e.order==="ZYX"){const d=a*u,f=a*h,p=o*u,v=o*h;t[0]=l*u,t[4]=p*c-f,t[8]=d*c+v,t[1]=l*h,t[5]=v*c+d,t[9]=f*c-p,t[2]=-c,t[6]=o*l,t[10]=a*l}else if(e.order==="YZX"){const d=a*l,f=a*c,p=o*l,v=o*c;t[0]=l*u,t[4]=v-d*h,t[8]=p*h+f,t[1]=h,t[5]=a*u,t[9]=-o*u,t[2]=-c*u,t[6]=f*h+p,t[10]=d-v*h}else if(e.order==="XZY"){const d=a*l,f=a*c,p=o*l,v=o*c;t[0]=l*u,t[4]=-h,t[8]=c*u,t[1]=d*h+v,t[5]=a*u,t[9]=f*h-p,t[2]=p*h-f,t[6]=o*u,t[10]=v*h+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(zU,e,kU)}lookAt(e,t,n){const i=this.elements;return Zi.subVectors(e,t),Zi.lengthSq()===0&&(Zi.z=1),Zi.normalize(),qs.crossVectors(n,Zi),qs.lengthSq()===0&&(Math.abs(n.z)===1?Zi.x+=1e-4:Zi.z+=1e-4,Zi.normalize(),qs.crossVectors(n,Zi)),qs.normalize(),ud.crossVectors(Zi,qs),i[0]=qs.x,i[4]=ud.x,i[8]=Zi.x,i[1]=qs.y,i[5]=ud.y,i[9]=Zi.y,i[2]=qs.z,i[6]=ud.z,i[10]=Zi.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,a=n[0],o=n[4],l=n[8],c=n[12],u=n[1],h=n[5],d=n[9],f=n[13],p=n[2],v=n[6],g=n[10],m=n[14],_=n[3],x=n[7],y=n[11],b=n[15],M=i[0],w=i[4],C=i[8],T=i[12],S=i[1],R=i[5],H=i[9],D=i[13],O=i[2],G=i[6],P=i[10],z=i[14],W=i[3],X=i[7],re=i[11],ne=i[15];return s[0]=a*M+o*S+l*O+c*W,s[4]=a*w+o*R+l*G+c*X,s[8]=a*C+o*H+l*P+c*re,s[12]=a*T+o*D+l*z+c*ne,s[1]=u*M+h*S+d*O+f*W,s[5]=u*w+h*R+d*G+f*X,s[9]=u*C+h*H+d*P+f*re,s[13]=u*T+h*D+d*z+f*ne,s[2]=p*M+v*S+g*O+m*W,s[6]=p*w+v*R+g*G+m*X,s[10]=p*C+v*H+g*P+m*re,s[14]=p*T+v*D+g*z+m*ne,s[3]=_*M+x*S+y*O+b*W,s[7]=_*w+x*R+y*G+b*X,s[11]=_*C+x*H+y*P+b*re,s[15]=_*T+x*D+y*z+b*ne,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],a=e[1],o=e[5],l=e[9],c=e[13],u=e[2],h=e[6],d=e[10],f=e[14],p=e[3],v=e[7],g=e[11],m=e[15];return p*(+s*l*h-i*c*h-s*o*d+n*c*d+i*o*f-n*l*f)+v*(+t*l*f-t*c*d+s*a*d-i*a*f+i*c*u-s*l*u)+g*(+t*c*h-t*o*f-s*a*h+n*a*f+s*o*u-n*c*u)+m*(-i*o*u-t*l*h+t*o*d+i*a*h-n*a*d+n*l*u)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],l=e[6],c=e[7],u=e[8],h=e[9],d=e[10],f=e[11],p=e[12],v=e[13],g=e[14],m=e[15],_=h*g*c-v*d*c+v*l*f-o*g*f-h*l*m+o*d*m,x=p*d*c-u*g*c-p*l*f+a*g*f+u*l*m-a*d*m,y=u*v*c-p*h*c+p*o*f-a*v*f-u*o*m+a*h*m,b=p*h*l-u*v*l-p*o*d+a*v*d+u*o*g-a*h*g,M=t*_+n*x+i*y+s*b;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/M;return e[0]=_*w,e[1]=(v*d*s-h*g*s-v*i*f+n*g*f+h*i*m-n*d*m)*w,e[2]=(o*g*s-v*l*s+v*i*c-n*g*c-o*i*m+n*l*m)*w,e[3]=(h*l*s-o*d*s-h*i*c+n*d*c+o*i*f-n*l*f)*w,e[4]=x*w,e[5]=(u*g*s-p*d*s+p*i*f-t*g*f-u*i*m+t*d*m)*w,e[6]=(p*l*s-a*g*s-p*i*c+t*g*c+a*i*m-t*l*m)*w,e[7]=(a*d*s-u*l*s+u*i*c-t*d*c-a*i*f+t*l*f)*w,e[8]=y*w,e[9]=(p*h*s-u*v*s-p*n*f+t*v*f+u*n*m-t*h*m)*w,e[10]=(a*v*s-p*o*s+p*n*c-t*v*c-a*n*m+t*o*m)*w,e[11]=(u*o*s-a*h*s-u*n*c+t*h*c+a*n*f-t*o*f)*w,e[12]=b*w,e[13]=(u*v*i-p*h*i+p*n*d-t*v*d-u*n*g+t*h*g)*w,e[14]=(p*o*i-a*v*i-p*n*l+t*v*l+a*n*g-t*o*g)*w,e[15]=(a*h*i-u*o*i+u*n*l-t*h*l-a*n*d+t*o*d)*w,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,a=e.x,o=e.y,l=e.z,c=s*a,u=s*o;return this.set(c*a+n,c*o-i*l,c*l+i*o,0,c*o+i*l,u*o+n,u*l-i*a,0,c*l-i*o,u*l+i*a,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n){return this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,a=t._y,o=t._z,l=t._w,c=s+s,u=a+a,h=o+o,d=s*c,f=s*u,p=s*h,v=a*u,g=a*h,m=o*h,_=l*c,x=l*u,y=l*h,b=n.x,M=n.y,w=n.z;return i[0]=(1-(v+m))*b,i[1]=(f+y)*b,i[2]=(p-x)*b,i[3]=0,i[4]=(f-y)*M,i[5]=(1-(d+m))*M,i[6]=(g+_)*M,i[7]=0,i[8]=(p+x)*w,i[9]=(g-_)*w,i[10]=(1-(d+v))*w,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=Jo.set(i[0],i[1],i[2]).length();const a=Jo.set(i[4],i[5],i[6]).length(),o=Jo.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Ar.copy(this);const c=1/s,u=1/a,h=1/o;return Ar.elements[0]*=c,Ar.elements[1]*=c,Ar.elements[2]*=c,Ar.elements[4]*=u,Ar.elements[5]*=u,Ar.elements[6]*=u,Ar.elements[8]*=h,Ar.elements[9]*=h,Ar.elements[10]*=h,t.setFromRotationMatrix(Ar),n.x=s,n.y=a,n.z=o,this}makePerspective(e,t,n,i,s,a){a===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const o=this.elements,l=2*s/(t-e),c=2*s/(n-i),u=(t+e)/(t-e),h=(n+i)/(n-i),d=-(a+s)/(a-s),f=-2*a*s/(a-s);return o[0]=l,o[4]=0,o[8]=u,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=f,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,s,a){const o=this.elements,l=1/(t-e),c=1/(n-i),u=1/(a-s),h=(t+e)*l,d=(n+i)*c,f=(a+s)*u;return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=-2*u,o[14]=-f,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}Mt.prototype.isMatrix4=!0;const Jo=new q,Ar=new Mt,zU=new q(0,0,0),kU=new q(1,1,1),qs=new q,ud=new q,Zi=new q,qx=new Mt,Zx=new Li;class ac{constructor(e=0,t=0,n=0,i=ac.DefaultOrder){this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._order=i||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t,n){const i=e.elements,s=i[0],a=i[4],o=i[8],l=i[1],c=i[5],u=i[9],h=i[2],d=i[6],f=i[10];switch(t=t||this._order,t){case"XYZ":this._y=Math.asin(ji(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-u,f),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-ji(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(o,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-h,s),this._z=0);break;case"ZXY":this._x=Math.asin(ji(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,f),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-ji(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(ji(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-u,c),this._y=Math.atan2(-h,s)):(this._x=0,this._y=Math.atan2(o,f));break;case"XZY":this._z=Math.asin(-ji(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-u,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n!==!1&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return qx.makeRotationFromQuaternion(e),this.setFromRotationMatrix(qx,t,n)}setFromVector3(e,t){return this.set(e.x,e.y,e.z,t||this._order)}reorder(e){return Zx.setFromEuler(this),this.setFromQuaternion(Zx,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}toVector3(e){return e?e.set(this._x,this._y,this._z):new q(this._x,this._y,this._z)}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}ac.prototype.isEuler=!0;ac.DefaultOrder="XYZ";ac.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class VU{constructor(){this.mask=1}set(e){this.mask=1<<e|0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}}let HU=0;const Yx=new q,Ko=new Li,ms=new Mt,hd=new q,Cc=new q,GU=new q,WU=new Li,jx=new q(1,0,0),Jx=new q(0,1,0),Kx=new q(0,0,1),$U={type:"added"},Qx={type:"removed"};class rn extends So{constructor(){super(),Object.defineProperty(this,"id",{value:HU++}),this.uuid=Kr(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=rn.DefaultUp.clone();const e=new q,t=new ac,n=new Li,i=new q(1,1,1);function s(){n.setFromEuler(t,!1)}function a(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Mt},normalMatrix:{value:new si}}),this.matrix=new Mt,this.matrixWorld=new Mt,this.matrixAutoUpdate=rn.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new VU,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Ko.setFromAxisAngle(e,t),this.quaternion.multiply(Ko),this}rotateOnWorldAxis(e,t){return Ko.setFromAxisAngle(e,t),this.quaternion.premultiply(Ko),this}rotateX(e){return this.rotateOnAxis(jx,e)}rotateY(e){return this.rotateOnAxis(Jx,e)}rotateZ(e){return this.rotateOnAxis(Kx,e)}translateOnAxis(e,t){return Yx.copy(e).applyQuaternion(this.quaternion),this.position.add(Yx.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(jx,e)}translateY(e){return this.translateOnAxis(Jx,e)}translateZ(e){return this.translateOnAxis(Kx,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(ms.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?hd.copy(e):hd.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Cc.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ms.lookAt(Cc,hd,this.up):ms.lookAt(hd,Cc,this.up),this.quaternion.setFromRotationMatrix(ms),i&&(ms.extractRotation(i.matrixWorld),Ko.setFromRotationMatrix(ms),this.quaternion.premultiply(Ko.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent($U)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Qx)),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(Qx)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),ms.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),ms.multiply(e.parent.matrixWorld)),e.applyMatrix4(ms),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const a=this.children[n].getObjectByProperty(e,t);if(a!==void 0)return a}}getWorldPosition(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new q),this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new Li),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cc,e,GU),e}getWorldScale(e){return e===void 0&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new q),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Cc,WU,e),e}getWorldDirection(e){e===void 0&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new q),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let s=0,a=i.length;s<a;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(e)),l.uuid}if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,u=l.length;c<u;c++){const h=l[c];s(e.shapes,h)}else s(e.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(e.materials,this.material[l]));i.material=o}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];i.animations.push(s(e.animations,l))}}if(t){const o=a(e.geometries),l=a(e.materials),c=a(e.textures),u=a(e.images),h=a(e.shapes),d=a(e.skeletons),f=a(e.animations);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),u.length>0&&(n.images=u),h.length>0&&(n.shapes=h),d.length>0&&(n.skeletons=d),f.length>0&&(n.animations=f)}return n.object=i,n;function a(o){const l=[];for(const c in o){const u=o[c];delete u.metadata,l.push(u)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}rn.DefaultUp=new q(0,1,0);rn.DefaultMatrixAutoUpdate=!0;rn.prototype.isObject3D=!0;const _g=new q,XU=new q,qU=new si;class qr{constructor(e=new q(1,0,0),t=0){this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=_g.subVectors(n,t).cross(XU.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t===void 0&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new q),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){t===void 0&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new q);const n=e.delta(_g),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(n).multiplyScalar(s).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e===void 0&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new q),e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||qU.getNormalMatrix(e),i=this.coplanarPoint(_g).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}qr.prototype.isPlane=!0;const Cr=new q,gs=new q,yg=new q,vs=new q,Qo=new q,el=new q,eM=new q,xg=new q,Mg=new q,bg=new q;class Gn{constructor(e=new q,t=new q,n=new q){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i===void 0&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new q),i.subVectors(n,t),Cr.subVectors(e,t),i.cross(Cr);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){Cr.subVectors(i,t),gs.subVectors(n,t),yg.subVectors(e,t);const a=Cr.dot(Cr),o=Cr.dot(gs),l=Cr.dot(yg),c=gs.dot(gs),u=gs.dot(yg),h=a*c-o*o;if(s===void 0&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new q),h===0)return s.set(-2,-1,-1);const d=1/h,f=(c*l-o*u)*d,p=(a*u-o*l)*d;return s.set(1-f-p,p,f)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,vs),vs.x>=0&&vs.y>=0&&vs.x+vs.y<=1}static getUV(e,t,n,i,s,a,o,l){return this.getBarycoord(e,t,n,i,vs),l.set(0,0),l.addScaledVector(s,vs.x),l.addScaledVector(a,vs.y),l.addScaledVector(o,vs.z),l}static isFrontFacing(e,t,n,i){return Cr.subVectors(n,t),gs.subVectors(e,t),Cr.cross(gs).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Cr.subVectors(this.c,this.b),gs.subVectors(this.a,this.b),Cr.cross(gs).length()*.5}getMidpoint(e){return e===void 0&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new q),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Gn.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e===void 0&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new qr),e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Gn.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,s){return Gn.getUV(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return Gn.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Gn.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){t===void 0&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new q);const n=this.a,i=this.b,s=this.c;let a,o;Qo.subVectors(i,n),el.subVectors(s,n),xg.subVectors(e,n);const l=Qo.dot(xg),c=el.dot(xg);if(l<=0&&c<=0)return t.copy(n);Mg.subVectors(e,i);const u=Qo.dot(Mg),h=el.dot(Mg);if(u>=0&&h<=u)return t.copy(i);const d=l*h-u*c;if(d<=0&&l>=0&&u<=0)return a=l/(l-u),t.copy(n).addScaledVector(Qo,a);bg.subVectors(e,s);const f=Qo.dot(bg),p=el.dot(bg);if(p>=0&&f<=p)return t.copy(s);const v=f*c-l*p;if(v<=0&&c>=0&&p<=0)return o=c/(c-p),t.copy(n).addScaledVector(el,o);const g=u*p-f*h;if(g<=0&&h-u>=0&&f-p>=0)return eM.subVectors(s,i),o=(h-u)/(h-u+(f-p)),t.copy(i).addScaledVector(eM,o);const m=1/(g+v+d);return a=v*m,o=d*m,t.copy(n).addScaledVector(Qo,a).addScaledVector(el,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let ZU=0;function ei(){Object.defineProperty(this,"id",{value:ZU++}),this.uuid=Kr(),this.name="",this.type="Material",this.fog=!0,this.blending=au,this.side=Yp,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=W1,this.blendDst=$1,this.blendEquation=fl,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=vv,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=IU,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ag,this.stencilZFail=ag,this.stencilZPass=ag,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}ei.prototype=Object.assign(Object.create(So.prototype),{constructor:ei,isMaterial:!0,onBuild:function(){},onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(r){if(r!==void 0)for(const e in r){const t=r[e];if(t===void 0){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if(e==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===G1;continue}const n=this[e];if(n===void 0){console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.");continue}n&&n.isColor?n.set(t):n&&n.isVector3&&t&&t.isVector3?n.copy(t):this[e]=t}},toJSON:function(r){const e=r===void 0||typeof r=="string";e&&(r={textures:{},images:{}});const t={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.color&&this.color.isColor&&(t.color=this.color.getHex()),this.roughness!==void 0&&(t.roughness=this.roughness),this.metalness!==void 0&&(t.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(t.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(t.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(t.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(t.specular=this.specular.getHex()),this.shininess!==void 0&&(t.shininess=this.shininess),this.clearcoat!==void 0&&(t.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(t.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(t.clearcoatMap=this.clearcoatMap.toJSON(r).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(t.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(r).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(t.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(r).uuid,t.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(t.map=this.map.toJSON(r).uuid),this.matcap&&this.matcap.isTexture&&(t.matcap=this.matcap.toJSON(r).uuid),this.alphaMap&&this.alphaMap.isTexture&&(t.alphaMap=this.alphaMap.toJSON(r).uuid),this.lightMap&&this.lightMap.isTexture&&(t.lightMap=this.lightMap.toJSON(r).uuid,t.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(t.aoMap=this.aoMap.toJSON(r).uuid,t.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(t.bumpMap=this.bumpMap.toJSON(r).uuid,t.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(t.normalMap=this.normalMap.toJSON(r).uuid,t.normalMapType=this.normalMapType,t.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(t.displacementMap=this.displacementMap.toJSON(r).uuid,t.displacementScale=this.displacementScale,t.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(t.roughnessMap=this.roughnessMap.toJSON(r).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(t.metalnessMap=this.metalnessMap.toJSON(r).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(t.emissiveMap=this.emissiveMap.toJSON(r).uuid),this.specularMap&&this.specularMap.isTexture&&(t.specularMap=this.specularMap.toJSON(r).uuid),this.envMap&&this.envMap.isTexture&&(t.envMap=this.envMap.toJSON(r).uuid,this.combine!==void 0&&(t.combine=this.combine)),this.envMapIntensity!==void 0&&(t.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(t.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(t.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(t.gradientMap=this.gradientMap.toJSON(r).uuid),this.size!==void 0&&(t.size=this.size),this.shadowSide!==null&&(t.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(t.sizeAttenuation=this.sizeAttenuation),this.blending!==au&&(t.blending=this.blending),this.side!==Yp&&(t.side=this.side),this.vertexColors&&(t.vertexColors=!0),this.opacity<1&&(t.opacity=this.opacity),this.transparent===!0&&(t.transparent=this.transparent),t.depthFunc=this.depthFunc,t.depthTest=this.depthTest,t.depthWrite=this.depthWrite,t.colorWrite=this.colorWrite,t.stencilWrite=this.stencilWrite,t.stencilWriteMask=this.stencilWriteMask,t.stencilFunc=this.stencilFunc,t.stencilRef=this.stencilRef,t.stencilFuncMask=this.stencilFuncMask,t.stencilFail=this.stencilFail,t.stencilZFail=this.stencilZFail,t.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(t.rotation=this.rotation),this.polygonOffset===!0&&(t.polygonOffset=!0),this.polygonOffsetFactor!==0&&(t.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(t.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(t.linewidth=this.linewidth),this.dashSize!==void 0&&(t.dashSize=this.dashSize),this.gapSize!==void 0&&(t.gapSize=this.gapSize),this.scale!==void 0&&(t.scale=this.scale),this.dithering===!0&&(t.dithering=!0),this.alphaTest>0&&(t.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(t.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(t.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(t.wireframe=this.wireframe),this.wireframeLinewidth>1&&(t.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(t.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(t.wireframeLinejoin=this.wireframeLinejoin),this.morphTargets===!0&&(t.morphTargets=!0),this.morphNormals===!0&&(t.morphNormals=!0),this.skinning===!0&&(t.skinning=!0),this.flatShading===!0&&(t.flatShading=this.flatShading),this.visible===!1&&(t.visible=!1),this.toneMapped===!1&&(t.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(t.userData=this.userData);function n(i){const s=[];for(const a in i){const o=i[a];delete o.metadata,s.push(o)}return s}if(e){const i=n(r.textures),s=n(r.images);i.length>0&&(t.textures=i),s.length>0&&(t.images=s)}return t},clone:function(){return new this.constructor().copy(this)},copy:function(r){this.name=r.name,this.fog=r.fog,this.blending=r.blending,this.side=r.side,this.vertexColors=r.vertexColors,this.opacity=r.opacity,this.transparent=r.transparent,this.blendSrc=r.blendSrc,this.blendDst=r.blendDst,this.blendEquation=r.blendEquation,this.blendSrcAlpha=r.blendSrcAlpha,this.blendDstAlpha=r.blendDstAlpha,this.blendEquationAlpha=r.blendEquationAlpha,this.depthFunc=r.depthFunc,this.depthTest=r.depthTest,this.depthWrite=r.depthWrite,this.stencilWriteMask=r.stencilWriteMask,this.stencilFunc=r.stencilFunc,this.stencilRef=r.stencilRef,this.stencilFuncMask=r.stencilFuncMask,this.stencilFail=r.stencilFail,this.stencilZFail=r.stencilZFail,this.stencilZPass=r.stencilZPass,this.stencilWrite=r.stencilWrite;const e=r.clippingPlanes;let t=null;if(e!==null){const n=e.length;t=new Array(n);for(let i=0;i!==n;++i)t[i]=e[i].clone()}return this.clippingPlanes=t,this.clipIntersection=r.clipIntersection,this.clipShadows=r.clipShadows,this.shadowSide=r.shadowSide,this.colorWrite=r.colorWrite,this.precision=r.precision,this.polygonOffset=r.polygonOffset,this.polygonOffsetFactor=r.polygonOffsetFactor,this.polygonOffsetUnits=r.polygonOffsetUnits,this.dithering=r.dithering,this.alphaTest=r.alphaTest,this.alphaToCoverage=r.alphaToCoverage,this.premultipliedAlpha=r.premultipliedAlpha,this.visible=r.visible,this.toneMapped=r.toneMapped,this.userData=JSON.parse(JSON.stringify(r.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Object.defineProperty(ei.prototype,"needsUpdate",{set:function(r){r===!0&&this.version++}});const Y1={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Rr={h:0,s:0,l:0},dd={h:0,s:0,l:0};function Sg(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}function wg(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Tg(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}class yt{constructor(e,t,n){return t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,this}setRGB(e,t,n){return this.r=e,this.g=t,this.b=n,this}setHSL(e,t,n){if(e=DU(e,1),t=ji(t,0,1),n=ji(n,0,1),t===0)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,s=2*n-i;this.r=Sg(s,i,e+1/3),this.g=Sg(s,i,e),this.b=Sg(s,i,e-1/3)}return this}setStyle(e){function t(i){i!==void 0&&parseFloat(i)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)){let i;const s=n[1],a=n[2];switch(s){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,t(i[4]),this;if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,t(i[4]),this;break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const o=parseFloat(i[1])/360,l=parseInt(i[2],10)/100,c=parseInt(i[3],10)/100;return t(i[4]),this.setHSL(o,l,c)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(e)){const i=n[1],s=i.length;if(s===3)return this.r=parseInt(i.charAt(0)+i.charAt(0),16)/255,this.g=parseInt(i.charAt(1)+i.charAt(1),16)/255,this.b=parseInt(i.charAt(2)+i.charAt(2),16)/255,this;if(s===6)return this.r=parseInt(i.charAt(0)+i.charAt(1),16)/255,this.g=parseInt(i.charAt(2)+i.charAt(3),16)/255,this.b=parseInt(i.charAt(4)+i.charAt(5),16)/255,this}return e&&e.length>0?this.setColorName(e):this}setColorName(e){const t=Y1[e.toLowerCase()];return t!==void 0?this.setHex(t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copyGammaToLinear(e,t=2){return this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this}copyLinearToGamma(e,t=2){const n=t>0?1/t:1;return this.r=Math.pow(e.r,n),this.g=Math.pow(e.g,n),this.b=Math.pow(e.b,n),this}convertGammaToLinear(e){return this.copyGammaToLinear(this,e),this}convertLinearToGamma(e){return this.copyLinearToGamma(this,e),this}copySRGBToLinear(e){return this.r=wg(e.r),this.g=wg(e.g),this.b=wg(e.b),this}copyLinearToSRGB(e){return this.r=Tg(e.r),this.g=Tg(e.g),this.b=Tg(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){e===void 0&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});const t=this.r,n=this.g,i=this.b,s=Math.max(t,n,i),a=Math.min(t,n,i);let o,l;const c=(a+s)/2;if(a===s)o=0,l=0;else{const u=s-a;switch(l=c<=.5?u/(s+a):u/(2-s-a),s){case t:o=(n-i)/u+(n<i?6:0);break;case n:o=(i-t)/u+2;break;case i:o=(t-n)/u+4;break}o/=6}return e.h=o,e.s=l,e.l=c,e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){return this.getHSL(Rr),Rr.h+=e,Rr.s+=t,Rr.l+=n,this.setHSL(Rr.h,Rr.s,Rr.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(Rr),e.getHSL(dd);const n=lg(Rr.h,dd.h,t),i=lg(Rr.s,dd.s,t),s=lg(Rr.l,dd.l,t);return this.setHSL(n,i,s),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),e.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}yt.NAMES=Y1;yt.prototype.isColor=!0;yt.prototype.r=1;yt.prototype.g=1;yt.prototype.b=1;class W_ extends ei{constructor(e){super(),this.type="MeshBasicMaterial",this.color=new yt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Jp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this}}W_.prototype.isMeshBasicMaterial=!0;const pn=new q,fd=new Ge;class Kn{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=Cu,this.updateRange={offset:0,count:-1},this.version=0,this.onUploadCallback=function(){}}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let a=e[i];a===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),a=new yt),t[n++]=a.r,t[n++]=a.g,t[n++]=a.b}return this}copyVector2sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let a=e[i];a===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),a=new Ge),t[n++]=a.x,t[n++]=a.y}return this}copyVector3sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let a=e[i];a===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),a=new q),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let i=0,s=e.length;i<s;i++){let a=e[i];a===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),a=new cn),t[n++]=a.x,t[n++]=a.y,t[n++]=a.z,t[n++]=a.w}return this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)fd.fromBufferAttribute(this,t),fd.applyMatrix3(e),this.setXY(t,fd.x,fd.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)pn.fromBufferAttribute(this,t),pn.applyMatrix3(e),this.setXYZ(t,pn.x,pn.y,pn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)pn.x=this.getX(t),pn.y=this.getY(t),pn.z=this.getZ(t),pn.applyMatrix4(e),this.setXYZ(t,pn.x,pn.y,pn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)pn.x=this.getX(t),pn.y=this.getY(t),pn.z=this.getZ(t),pn.applyNormalMatrix(e),this.setXYZ(t,pn.x,pn.y,pn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)pn.x=this.getX(t),pn.y=this.getY(t),pn.z=this.getZ(t),pn.transformDirection(e),this.setXYZ(t,pn.x,pn.y,pn.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Cu&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}}Kn.prototype.isBufferAttribute=!0;class j1 extends Kn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class J1 extends Kn{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class YU extends Kn{constructor(e,t,n){super(new Uint16Array(e),t,n)}}YU.prototype.isFloat16BufferAttribute=!0;class Qn extends Kn{constructor(e,t,n){super(new Float32Array(e),t,n)}}function K1(r){if(r.length===0)return-1/0;let e=r[0];for(let t=1,n=r.length;t<n;++t)r[t]>e&&(e=r[t]);return e}let jU=0;const Wr=new Mt,Eg=new rn,tl=new q,Yi=new br,Rc=new br,Yn=new q;class mn extends So{constructor(){super(),Object.defineProperty(this,"id",{value:jU++}),this.uuid=Kr(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(K1(e)>65535?J1:j1)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new si().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}rotateX(e){return Wr.makeRotationX(e),this.applyMatrix4(Wr),this}rotateY(e){return Wr.makeRotationY(e),this.applyMatrix4(Wr),this}rotateZ(e){return Wr.makeRotationZ(e),this.applyMatrix4(Wr),this}translate(e,t,n){return Wr.makeTranslation(e,t,n),this.applyMatrix4(Wr),this}scale(e,t,n){return Wr.makeScale(e,t,n),this.applyMatrix4(Wr),this}lookAt(e){return Eg.lookAt(e),Eg.updateMatrix(),this.applyMatrix4(Eg.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(tl).negate(),this.translate(tl.x,tl.y,tl.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new Qn(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new br);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new q(-1/0,-1/0,-1/0),new q(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];Yi.setFromBufferAttribute(s),this.morphTargetsRelative?(Yn.addVectors(this.boundingBox.min,Yi.min),this.boundingBox.expandByPoint(Yn),Yn.addVectors(this.boundingBox.max,Yi.max),this.boundingBox.expandByPoint(Yn)):(this.boundingBox.expandByPoint(Yi.min),this.boundingBox.expandByPoint(Yi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new rc);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new q,1/0);return}if(e){const n=this.boundingSphere.center;if(Yi.setFromBufferAttribute(e),t)for(let s=0,a=t.length;s<a;s++){const o=t[s];Rc.setFromBufferAttribute(o),this.morphTargetsRelative?(Yn.addVectors(Yi.min,Rc.min),Yi.expandByPoint(Yn),Yn.addVectors(Yi.max,Rc.max),Yi.expandByPoint(Yn)):(Yi.expandByPoint(Rc.min),Yi.expandByPoint(Rc.max))}Yi.getCenter(n);let i=0;for(let s=0,a=e.count;s<a;s++)Yn.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(Yn));if(t)for(let s=0,a=t.length;s<a;s++){const o=t[s],l=this.morphTargetsRelative;for(let c=0,u=o.count;c<u;c++)Yn.fromBufferAttribute(o,c),l&&(tl.fromBufferAttribute(e,c),Yn.add(tl)),i=Math.max(i,n.distanceToSquared(Yn))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,s=t.normal.array,a=t.uv.array,o=i.length/3;t.tangent===void 0&&this.setAttribute("tangent",new Kn(new Float32Array(4*o),4));const l=t.tangent.array,c=[],u=[];for(let S=0;S<o;S++)c[S]=new q,u[S]=new q;const h=new q,d=new q,f=new q,p=new Ge,v=new Ge,g=new Ge,m=new q,_=new q;function x(S,R,H){h.fromArray(i,S*3),d.fromArray(i,R*3),f.fromArray(i,H*3),p.fromArray(a,S*2),v.fromArray(a,R*2),g.fromArray(a,H*2),d.sub(h),f.sub(h),v.sub(p),g.sub(p);const D=1/(v.x*g.y-g.x*v.y);isFinite(D)&&(m.copy(d).multiplyScalar(g.y).addScaledVector(f,-v.y).multiplyScalar(D),_.copy(f).multiplyScalar(v.x).addScaledVector(d,-g.x).multiplyScalar(D),c[S].add(m),c[R].add(m),c[H].add(m),u[S].add(_),u[R].add(_),u[H].add(_))}let y=this.groups;y.length===0&&(y=[{start:0,count:n.length}]);for(let S=0,R=y.length;S<R;++S){const H=y[S],D=H.start,O=H.count;for(let G=D,P=D+O;G<P;G+=3)x(n[G+0],n[G+1],n[G+2])}const b=new q,M=new q,w=new q,C=new q;function T(S){w.fromArray(s,S*3),C.copy(w);const R=c[S];b.copy(R),b.sub(w.multiplyScalar(w.dot(R))).normalize(),M.crossVectors(C,R);const D=M.dot(u[S])<0?-1:1;l[S*4]=b.x,l[S*4+1]=b.y,l[S*4+2]=b.z,l[S*4+3]=D}for(let S=0,R=y.length;S<R;++S){const H=y[S],D=H.start,O=H.count;for(let G=D,P=D+O;G<P;G+=3)T(n[G+0]),T(n[G+1]),T(n[G+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new Kn(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,f=n.count;d<f;d++)n.setXYZ(d,0,0,0);const i=new q,s=new q,a=new q,o=new q,l=new q,c=new q,u=new q,h=new q;if(e)for(let d=0,f=e.count;d<f;d+=3){const p=e.getX(d+0),v=e.getX(d+1),g=e.getX(d+2);i.fromBufferAttribute(t,p),s.fromBufferAttribute(t,v),a.fromBufferAttribute(t,g),u.subVectors(a,s),h.subVectors(i,s),u.cross(h),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,v),c.fromBufferAttribute(n,g),o.add(u),l.add(u),c.add(u),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(v,l.x,l.y,l.z),n.setXYZ(g,c.x,c.y,c.z)}else for(let d=0,f=t.count;d<f;d+=3)i.fromBufferAttribute(t,d+0),s.fromBufferAttribute(t,d+1),a.fromBufferAttribute(t,d+2),u.subVectors(a,s),h.subVectors(i,s),u.cross(h),n.setXYZ(d+0,u.x,u.y,u.z),n.setXYZ(d+1,u.x,u.y,u.z),n.setXYZ(d+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(e.attributes[i]===void 0)continue;const a=n[i].array,o=e.attributes[i],l=o.array,c=o.itemSize*t,u=Math.min(l.length,a.length-c);for(let h=0,d=c;h<u;h++,d++)a[d]=l[h]}return this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Yn.fromBufferAttribute(e,t),Yn.normalize(),e.setXYZ(t,Yn.x,Yn.y,Yn.z)}toNonIndexed(){function e(o,l){const c=o.array,u=o.itemSize,h=o.normalized,d=new c.constructor(l.length*u);let f=0,p=0;for(let v=0,g=l.length;v<g;v++){f=l[v]*u;for(let m=0;m<u;m++)d[p++]=c[f++]}return new Kn(d,u,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new mn,n=this.index.array,i=this.attributes;for(const o in i){const l=i[o],c=e(l,n);t.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let u=0,h=c.length;u<h;u++){const d=c[u],f=e(d,n);l.push(f)}t.morphAttributes[o]=l}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const c=a[o];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],u=[];for(let h=0,d=c.length;h<d;h++){const f=c[h];u.push(f.toJSON(e.data))}u.length>0&&(i[l]=u,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),e}clone(){return new mn().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const c in i){const u=i[c];this.setAttribute(c,u.clone(t))}const s=e.morphAttributes;for(const c in s){const u=[],h=s[c];for(let d=0,f=h.length;d<f;d++)u.push(h[d].clone(t));this.morphAttributes[c]=u}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let c=0,u=a.length;c<u;c++){const h=a[c];this.addGroup(h.start,h.count,h.materialIndex)}const o=e.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}mn.prototype.isBufferGeometry=!0;const tM=new Mt,nl=new sc,Ag=new rc,Zs=new q,Ys=new q,js=new q,Cg=new q,Rg=new q,Lg=new q,pd=new q,md=new q,gd=new q,vd=new Ge,_d=new Ge,yd=new Ge,Pg=new q,xd=new q;class Br extends rn{constructor(e=new mn,t=new W_){super(),this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),Ag.copy(n.boundingSphere),Ag.applyMatrix4(s),e.ray.intersectsSphere(Ag)===!1)||(tM.copy(s).invert(),nl.copy(e.ray).applyMatrix4(tM),n.boundingBox!==null&&nl.intersectsBox(n.boundingBox)===!1))return;let a;if(n.isBufferGeometry){const o=n.index,l=n.attributes.position,c=n.morphAttributes.position,u=n.morphTargetsRelative,h=n.attributes.uv,d=n.attributes.uv2,f=n.groups,p=n.drawRange;if(o!==null)if(Array.isArray(i))for(let v=0,g=f.length;v<g;v++){const m=f[v],_=i[m.materialIndex],x=Math.max(m.start,p.start),y=Math.min(m.start+m.count,p.start+p.count);for(let b=x,M=y;b<M;b+=3){const w=o.getX(b),C=o.getX(b+1),T=o.getX(b+2);a=Md(this,_,e,nl,l,c,u,h,d,w,C,T),a&&(a.faceIndex=Math.floor(b/3),a.face.materialIndex=m.materialIndex,t.push(a))}}else{const v=Math.max(0,p.start),g=Math.min(o.count,p.start+p.count);for(let m=v,_=g;m<_;m+=3){const x=o.getX(m),y=o.getX(m+1),b=o.getX(m+2);a=Md(this,i,e,nl,l,c,u,h,d,x,y,b),a&&(a.faceIndex=Math.floor(m/3),t.push(a))}}else if(l!==void 0)if(Array.isArray(i))for(let v=0,g=f.length;v<g;v++){const m=f[v],_=i[m.materialIndex],x=Math.max(m.start,p.start),y=Math.min(m.start+m.count,p.start+p.count);for(let b=x,M=y;b<M;b+=3){const w=b,C=b+1,T=b+2;a=Md(this,_,e,nl,l,c,u,h,d,w,C,T),a&&(a.faceIndex=Math.floor(b/3),a.face.materialIndex=m.materialIndex,t.push(a))}}else{const v=Math.max(0,p.start),g=Math.min(l.count,p.start+p.count);for(let m=v,_=g;m<_;m+=3){const x=m,y=m+1,b=m+2;a=Md(this,i,e,nl,l,c,u,h,d,x,y,b),a&&(a.faceIndex=Math.floor(m/3),t.push(a))}}}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}Br.prototype.isMesh=!0;function JU(r,e,t,n,i,s,a,o){let l;if(e.side===Jn?l=n.intersectTriangle(a,s,i,!0,o):l=n.intersectTriangle(i,s,a,e.side!==jp,o),l===null)return null;xd.copy(o),xd.applyMatrix4(r.matrixWorld);const c=t.ray.origin.distanceTo(xd);return c<t.near||c>t.far?null:{distance:c,point:xd.clone(),object:r}}function Md(r,e,t,n,i,s,a,o,l,c,u,h){Zs.fromBufferAttribute(i,c),Ys.fromBufferAttribute(i,u),js.fromBufferAttribute(i,h);const d=r.morphTargetInfluences;if(e.morphTargets&&s&&d){pd.set(0,0,0),md.set(0,0,0),gd.set(0,0,0);for(let p=0,v=s.length;p<v;p++){const g=d[p],m=s[p];g!==0&&(Cg.fromBufferAttribute(m,c),Rg.fromBufferAttribute(m,u),Lg.fromBufferAttribute(m,h),a?(pd.addScaledVector(Cg,g),md.addScaledVector(Rg,g),gd.addScaledVector(Lg,g)):(pd.addScaledVector(Cg.sub(Zs),g),md.addScaledVector(Rg.sub(Ys),g),gd.addScaledVector(Lg.sub(js),g)))}Zs.add(pd),Ys.add(md),js.add(gd)}r.isSkinnedMesh&&e.skinning&&(r.boneTransform(c,Zs),r.boneTransform(u,Ys),r.boneTransform(h,js));const f=JU(r,e,t,n,Zs,Ys,js,Pg);if(f){o&&(vd.fromBufferAttribute(o,c),_d.fromBufferAttribute(o,u),yd.fromBufferAttribute(o,h),f.uv=Gn.getUV(Pg,Zs,Ys,js,vd,_d,yd,new Ge)),l&&(vd.fromBufferAttribute(l,c),_d.fromBufferAttribute(l,u),yd.fromBufferAttribute(l,h),f.uv2=Gn.getUV(Pg,Zs,Ys,js,vd,_d,yd,new Ge));const p={a:c,b:u,c:h,normal:new q,materialIndex:0};Gn.getNormal(Zs,Ys,js,p.normal),f.face=p}return f}class $_ extends mn{constructor(e=1,t=1,n=1,i=1,s=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:a};const o=this;i=Math.floor(i),s=Math.floor(s),a=Math.floor(a);const l=[],c=[],u=[],h=[];let d=0,f=0;p("z","y","x",-1,-1,n,t,e,a,s,0),p("z","y","x",1,-1,n,t,-e,a,s,1),p("x","z","y",1,1,e,n,t,i,a,2),p("x","z","y",1,-1,e,n,-t,i,a,3),p("x","y","z",1,-1,e,t,n,i,s,4),p("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new Qn(c,3)),this.setAttribute("normal",new Qn(u,3)),this.setAttribute("uv",new Qn(h,2));function p(v,g,m,_,x,y,b,M,w,C,T){const S=y/w,R=b/C,H=y/2,D=b/2,O=M/2,G=w+1,P=C+1;let z=0,W=0;const X=new q;for(let re=0;re<P;re++){const ne=re*R-D;for(let be=0;be<G;be++){const _e=be*S-H;X[v]=_e*_,X[g]=ne*x,X[m]=O,c.push(X.x,X.y,X.z),X[v]=0,X[g]=0,X[m]=M>0?1:-1,u.push(X.x,X.y,X.z),h.push(be/w),h.push(1-re/C),z+=1}}for(let re=0;re<C;re++)for(let ne=0;ne<w;ne++){const be=d+ne+G*re,_e=d+ne+G*(re+1),$=d+(ne+1)+G*(re+1),K=d+(ne+1)+G*re;l.push(be,_e,K),l.push(_e,$,K),W+=6}o.addGroup(f,W,T),f+=W,d+=z}}}function Hl(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const i=r[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function di(r){const e={};for(let t=0;t<r.length;t++){const n=Hl(r[t]);for(const i in n)e[i]=n[i]}return e}const KU={clone:Hl,merge:di};var QU=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,eB=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class po extends ei{constructor(e){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=QU,this.fragmentShader=eB,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&(e.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Hl(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const a=this.uniforms[i].value;a&&a.isTexture?t.uniforms[i]={type:"t",value:a.toJSON(e).uuid}:a&&a.isColor?t.uniforms[i]={type:"c",value:a.getHex()}:a&&a.isVector2?t.uniforms[i]={type:"v2",value:a.toArray()}:a&&a.isVector3?t.uniforms[i]={type:"v3",value:a.toArray()}:a&&a.isVector4?t.uniforms[i]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?t.uniforms[i]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?t.uniforms[i]={type:"m4",value:a.toArray()}:t.uniforms[i]={value:a}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}po.prototype.isShaderMaterial=!0;class X_ extends rn{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Mt,this.projectionMatrix=new Mt,this.projectionMatrixInverse=new Mt}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){e===void 0&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new q),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}X_.prototype.isCamera=!0;class Ji extends X_{constructor(e=50,t=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=xv*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(og*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return xv*2*Math.atan(Math.tan(og*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,s,a){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(og*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,c=a.fullHeight;s+=a.offsetX*i/l,t-=a.offsetY*n/c,i*=a.width/l,n*=a.height/c}const o=this.filmOffset;o!==0&&(s+=e*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}Ji.prototype.isPerspectiveCamera=!0;const il=90,rl=1;class q_ extends rn{constructor(e,t,n){if(super(),this.type="CubeCamera",n.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const i=new Ji(il,rl,e,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new q(1,0,0)),this.add(i);const s=new Ji(il,rl,e,t);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new q(-1,0,0)),this.add(s);const a=new Ji(il,rl,e,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new q(0,1,0)),this.add(a);const o=new Ji(il,rl,e,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new q(0,-1,0)),this.add(o);const l=new Ji(il,rl,e,t);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new q(0,0,1)),this.add(l);const c=new Ji(il,rl,e,t);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new q(0,0,-1)),this.add(c)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,s,a,o,l,c]=this.children,u=e.xr.enabled,h=e.getRenderTarget();e.xr.enabled=!1;const d=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,s),e.setRenderTarget(n,2),e.render(t,a),e.setRenderTarget(n,3),e.render(t,o),e.setRenderTarget(n,4),e.render(t,l),n.texture.generateMipmaps=d,e.setRenderTarget(n,5),e.render(t,c),e.setRenderTarget(h),e.xr.enabled=u}}class Kp extends oi{constructor(e,t,n,i,s,a,o,l,c,u){e=e!==void 0?e:[],t=t!==void 0?t:U_,o=o!==void 0?o:no,super(e,t,n,i,s,a,o,l,c,u),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}Kp.prototype.isCubeTexture=!0;class Q1 extends io{constructor(e,t,n){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=n),super(e,e,t),t=t||{},this.texture=new Kp(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:gr,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.format=Fr,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new $_(5,5,5),s=new po({name:"CubemapFromEquirect",uniforms:Hl(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Jn,blending:su});s.uniforms.tEquirect.value=t;const a=new Br(i,s),o=t.minFilter;return t.minFilter===V_&&(t.minFilter=gr),new q_(1,10,this).update(e,a),t.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let a=0;a<6;a++)e.setRenderTarget(this,a),e.clear(t,n,i);e.setRenderTarget(s)}}Q1.prototype.isWebGLCubeRenderTarget=!0;class ew extends oi{constructor(e,t,n,i,s,a,o,l,c,u,h,d){super(null,a,o,l,c,u,i,s,h,d),this.image={data:e||null,width:t||1,height:n||1},this.magFilter=c!==void 0?c:Ci,this.minFilter=u!==void 0?u:Ci,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ew.prototype.isDataTexture=!0;const sl=new rc,bd=new q;class Qp{constructor(e=new qr,t=new qr,n=new qr,i=new qr,s=new qr,a=new qr){this.planes=[e,t,n,i,s,a]}set(e,t,n,i,s,a){const o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(n),o[3].copy(i),o[4].copy(s),o[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],s=n[1],a=n[2],o=n[3],l=n[4],c=n[5],u=n[6],h=n[7],d=n[8],f=n[9],p=n[10],v=n[11],g=n[12],m=n[13],_=n[14],x=n[15];return t[0].setComponents(o-i,h-l,v-d,x-g).normalize(),t[1].setComponents(o+i,h+l,v+d,x+g).normalize(),t[2].setComponents(o+s,h+c,v+f,x+m).normalize(),t[3].setComponents(o-s,h-c,v-f,x-m).normalize(),t[4].setComponents(o-a,h-u,v-p,x-_).normalize(),t[5].setComponents(o+a,h+u,v+p,x+_).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),sl.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(sl)}intersectsSprite(e){return sl.center.set(0,0,0),sl.radius=.7071067811865476,sl.applyMatrix4(e.matrixWorld),this.intersectsSphere(sl)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(bd.x=i.normal.x>0?e.max.x:e.min.x,bd.y=i.normal.y>0?e.max.y:e.min.y,bd.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(bd)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function tw(){let r=null,e=!1,t=null,n=null;function i(s,a){t(s,a),n=r.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(i),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){r=s}}}function tB(r,e){const t=e.isWebGL2,n=new WeakMap;function i(c,u){const h=c.array,d=c.usage,f=r.createBuffer();r.bindBuffer(u,f),r.bufferData(u,h,d),c.onUploadCallback();let p=5126;return h instanceof Float32Array?p=5126:h instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):h instanceof Uint16Array?c.isFloat16BufferAttribute?t?p=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):p=5123:h instanceof Int16Array?p=5122:h instanceof Uint32Array?p=5125:h instanceof Int32Array?p=5124:h instanceof Int8Array?p=5120:h instanceof Uint8Array&&(p=5121),{buffer:f,type:p,bytesPerElement:h.BYTES_PER_ELEMENT,version:c.version}}function s(c,u,h){const d=u.array,f=u.updateRange;r.bindBuffer(h,c),f.count===-1?r.bufferSubData(h,0,d):(t?r.bufferSubData(h,f.offset*d.BYTES_PER_ELEMENT,d,f.offset,f.count):r.bufferSubData(h,f.offset*d.BYTES_PER_ELEMENT,d.subarray(f.offset,f.offset+f.count)),f.count=-1)}function a(c){return c.isInterleavedBufferAttribute&&(c=c.data),n.get(c)}function o(c){c.isInterleavedBufferAttribute&&(c=c.data);const u=n.get(c);u&&(r.deleteBuffer(u.buffer),n.delete(c))}function l(c,u){if(c.isGLBufferAttribute){const d=n.get(c);(!d||d.version<c.version)&&n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const h=n.get(c);h===void 0?n.set(c,i(c,u)):h.version<c.version&&(s(h.buffer,c,u),h.version=c.version)}return{get:a,remove:o,update:l}}class nB extends mn{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,a=t/2,o=Math.floor(n),l=Math.floor(i),c=o+1,u=l+1,h=e/o,d=t/l,f=[],p=[],v=[],g=[];for(let m=0;m<u;m++){const _=m*d-a;for(let x=0;x<c;x++){const y=x*h-s;p.push(y,-_,0),v.push(0,0,1),g.push(x/o),g.push(1-m/l)}}for(let m=0;m<l;m++)for(let _=0;_<o;_++){const x=_+c*m,y=_+c*(m+1),b=_+1+c*(m+1),M=_+1+c*m;f.push(x,y,M),f.push(y,b,M)}this.setIndex(f),this.setAttribute("position",new Qn(p,3)),this.setAttribute("normal",new Qn(v,3)),this.setAttribute("uv",new Qn(g,2))}}var iB=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,rB=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,sB=`#ifdef ALPHATEST
	if ( diffuseColor.a < ALPHATEST ) discard;
#endif`,aB=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );
	#endif
#endif`,oB=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,lB="vec3 transformed = vec3( position );",cB=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,uB=`vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	return vec2( -1.04, 1.04 ) * a004 + r.zw;
}
float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
#if defined ( PHYSICALLY_CORRECT_LIGHTS )
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
#else
	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );
	}
	return 1.0;
#endif
}
vec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {
	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );
	return ( 1.0 - specularColor ) * fresnel + specularColor;
}
vec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {
	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );
	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;
	return Fr * fresnel + F0;
}
float G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	return 1.0 / ( gl * gv );
}
float G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( G * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
vec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	return specularColor * brdf.x + brdf.y;
}
void BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	vec3 FssEss = F * brdf.x + brdf.y;
	float Ess = brdf.x + brdf.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
float GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {
	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );
}
float BlinnExponentToGGXRoughness( const in float blinnExponent ) {
	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );
}
#if defined( USE_SHEEN )
float D_Charlie(float roughness, float NoH) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);
}
float V_Neubelt(float NoV, float NoL) {
	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));
}
vec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`,hB=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,dB=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,fB=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,pB=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,mB=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,gB=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,vB=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,_B=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,yB=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,xB=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement(a) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract(sin(sn) * c);
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
vec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	float distance = dot( planeNormal, point - pointOnPlane );
	return - distance * planeNormal + point;
}
float sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return sign( dot( point - pointOnPlane, planeNormal ) );
}
vec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,MB=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,bB=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,SB=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,wB=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,TB=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,EB=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,AB="gl_FragColor = linearToOutputTexel( gl_FragColor );",CB=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,RB=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifndef ENVMAP_TYPE_CUBE_UV
		envColor = envMapTexelToLinear( envColor );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,LB=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,PB=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,IB=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,DB=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,NB=`#ifdef USE_FOG
	fogDepth = - mvPosition.z;
#endif`,FB=`#ifdef USE_FOG
	varying float fogDepth;
#endif`,OB=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,UB=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float fogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,BB=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,zB=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel= texture2D( lightMap, vUv2 );
	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
#endif`,kB=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,VB=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`,HB=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	return irradiance;
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		directLight.color = directionalLight.color;
		directLight.direction = directionalLight.direction;
		directLight.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = pointLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		directLight.color = pointLight.color;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = spotLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		float angleCos = dot( directLight.direction, spotLight.direction );
		if ( angleCos > spotLight.coneCos ) {
			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );
			directLight.color = spotLight.color;
			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );
			directLight.visible = true;
		} else {
			directLight.color = vec3( 0.0 );
			directLight.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			irradiance *= PI;
		#endif
		return irradiance;
	}
#endif`,GB=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {
		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );
			#else
				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
		#else
			vec4 envMapColor = vec4( 0.0 );
		#endif
		return PI * envMapColor.rgb * envMapIntensity;
	}
	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {
		float maxMIPLevelScalar = float( maxMIPLevel );
		float sigma = PI * roughness * roughness / ( 1.0 + roughness );
		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );
		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );
	}
	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( -viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
		#else
			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );
		#endif
		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );
			#else
				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
		#endif
		return envMapColor.rgb * envMapIntensity;
	}
#endif`,WB=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,$B=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,XB=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,qB=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,ZB=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;
material.specularRoughness = min( material.specularRoughness, 1.0 );
#ifdef REFLECTIVITY
	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );
#endif
#ifdef CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheen;
#endif`,YB=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float specularRoughness;
	vec3 specularColor;
#ifdef CLEARCOAT
	float clearcoat;
	float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	vec3 sheenColor;
#endif
};
#define MAXIMUM_SPECULAR_COEFFICIENT 0.16
#define DEFAULT_SPECULAR_COEFFICIENT 0.04
float clearcoatDHRApprox( const in float roughness, const in float dotNL ) {
	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.specularRoughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	#ifdef CLEARCOAT
		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = ccDotNL * directLight.color;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			ccIrradiance *= PI;
		#endif
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
	#else
		float clearcoatDHR = 0.0;
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(
			material.specularRoughness,
			directLight.direction,
			geometry,
			material.sheenColor
		);
	#else
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);
	#endif
	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef CLEARCOAT
		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
		float ccDotNL = ccDotNV;
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
	#else
		float clearcoatDHR = 0.0;
	#endif
	float clearcoatInv = 1.0 - clearcoatDHR;
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,jB=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointDirectLightIrradiance( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotDirectLightIrradiance( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,JB=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );
	#ifdef CLEARCOAT
		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );
	#endif
#endif`,KB=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,QB=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,ez=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,tz=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,nz=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,iz=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,rz=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,sz=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,az=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,oz=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,lz=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,cz=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`,uz=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`,hz=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`,dz=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,fz=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,pz=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,mz=`#ifdef CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,gz=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,vz=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,_z=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,yz=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,xz=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Mz=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,bz=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Sz=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,wz=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Tz=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,Ez=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Az=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Cz=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Rz=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Lz=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,Pz=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Iz=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Dz=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Nz=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Fz=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Oz=`#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Uz=`#ifdef USE_TRANSMISSIONMAP
	totalTransmission *= texture2D( transmissionMap, vUv ).r;
#endif`,Bz=`#ifdef USE_TRANSMISSIONMAP
	uniform sampler2D transmissionMap;
#endif`,zz=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,kz=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,Vz=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,Hz=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Gz=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,Wz=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,$z=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,Xz=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,qz=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,Zz=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Yz=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,jz=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,Jz=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,Kz=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Qz=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,ek=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,tk=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,nk=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,ik=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,rk=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
	
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sk=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <skinbase_vertex>
	#ifdef USE_ENVMAP
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,ak=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ok=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lk=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ck=`#define MATCAP
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#ifndef FLAT_SHADED
		vNormal = normalize( transformedNormal );
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,uk=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,hk=`#define TOON
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,dk=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,fk=`#define PHONG
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,pk=`#define STANDARD
#ifdef PHYSICAL
	#define REFLECTIVITY
	#define CLEARCOAT
	#define TRANSMISSION
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef TRANSMISSION
	uniform float transmission;
#endif
#ifdef REFLECTIVITY
	uniform float reflectivity;
#endif
#ifdef CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheen;
#endif
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <transmissionmap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <lights_physical_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#ifdef TRANSMISSION
		float totalTransmission = transmission;
	#endif
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <transmissionmap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#ifdef TRANSMISSION
		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );
	#endif
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,mk=`#define STANDARD
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,gk=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <packing>
#include <uv_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,vk=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,_k=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,yk=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,xk=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Mk=`#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,bk=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Sk=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;const kt={alphamap_fragment:iB,alphamap_pars_fragment:rB,alphatest_fragment:sB,aomap_fragment:aB,aomap_pars_fragment:oB,begin_vertex:lB,beginnormal_vertex:cB,bsdfs:uB,bumpmap_pars_fragment:hB,clipping_planes_fragment:dB,clipping_planes_pars_fragment:fB,clipping_planes_pars_vertex:pB,clipping_planes_vertex:mB,color_fragment:gB,color_pars_fragment:vB,color_pars_vertex:_B,color_vertex:yB,common:xB,cube_uv_reflection_fragment:MB,defaultnormal_vertex:bB,displacementmap_pars_vertex:SB,displacementmap_vertex:wB,emissivemap_fragment:TB,emissivemap_pars_fragment:EB,encodings_fragment:AB,encodings_pars_fragment:CB,envmap_fragment:RB,envmap_common_pars_fragment:LB,envmap_pars_fragment:PB,envmap_pars_vertex:IB,envmap_physical_pars_fragment:GB,envmap_vertex:DB,fog_vertex:NB,fog_pars_vertex:FB,fog_fragment:OB,fog_pars_fragment:UB,gradientmap_pars_fragment:BB,lightmap_fragment:zB,lightmap_pars_fragment:kB,lights_lambert_vertex:VB,lights_pars_begin:HB,lights_toon_fragment:WB,lights_toon_pars_fragment:$B,lights_phong_fragment:XB,lights_phong_pars_fragment:qB,lights_physical_fragment:ZB,lights_physical_pars_fragment:YB,lights_fragment_begin:jB,lights_fragment_maps:JB,lights_fragment_end:KB,logdepthbuf_fragment:QB,logdepthbuf_pars_fragment:ez,logdepthbuf_pars_vertex:tz,logdepthbuf_vertex:nz,map_fragment:iz,map_pars_fragment:rz,map_particle_fragment:sz,map_particle_pars_fragment:az,metalnessmap_fragment:oz,metalnessmap_pars_fragment:lz,morphnormal_vertex:cz,morphtarget_pars_vertex:uz,morphtarget_vertex:hz,normal_fragment_begin:dz,normal_fragment_maps:fz,normalmap_pars_fragment:pz,clearcoat_normal_fragment_begin:mz,clearcoat_normal_fragment_maps:gz,clearcoat_pars_fragment:vz,packing:_z,premultiplied_alpha_fragment:yz,project_vertex:xz,dithering_fragment:Mz,dithering_pars_fragment:bz,roughnessmap_fragment:Sz,roughnessmap_pars_fragment:wz,shadowmap_pars_fragment:Tz,shadowmap_pars_vertex:Ez,shadowmap_vertex:Az,shadowmask_pars_fragment:Cz,skinbase_vertex:Rz,skinning_pars_vertex:Lz,skinning_vertex:Pz,skinnormal_vertex:Iz,specularmap_fragment:Dz,specularmap_pars_fragment:Nz,tonemapping_fragment:Fz,tonemapping_pars_fragment:Oz,transmissionmap_fragment:Uz,transmissionmap_pars_fragment:Bz,uv_pars_fragment:zz,uv_pars_vertex:kz,uv_vertex:Vz,uv2_pars_fragment:Hz,uv2_pars_vertex:Gz,uv2_vertex:Wz,worldpos_vertex:$z,background_frag:Xz,background_vert:qz,cube_frag:Zz,cube_vert:Yz,depth_frag:jz,depth_vert:Jz,distanceRGBA_frag:Kz,distanceRGBA_vert:Qz,equirect_frag:ek,equirect_vert:tk,linedashed_frag:nk,linedashed_vert:ik,meshbasic_frag:rk,meshbasic_vert:sk,meshlambert_frag:ak,meshlambert_vert:ok,meshmatcap_frag:lk,meshmatcap_vert:ck,meshtoon_frag:uk,meshtoon_vert:hk,meshphong_frag:dk,meshphong_vert:fk,meshphysical_frag:pk,meshphysical_vert:mk,normal_frag:gk,normal_vert:vk,points_frag:_k,points_vert:yk,shadow_frag:xk,shadow_vert:Mk,sprite_frag:bk,sprite_vert:Sk},Ke={common:{diffuse:{value:new yt(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new si},uv2Transform:{value:new si},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ge(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new yt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new yt(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new si}},sprite:{diffuse:{value:new yt(15658734)},opacity:{value:1},center:{value:new Ge(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new si}}},Zr={basic:{uniforms:di([Ke.common,Ke.specularmap,Ke.envmap,Ke.aomap,Ke.lightmap,Ke.fog]),vertexShader:kt.meshbasic_vert,fragmentShader:kt.meshbasic_frag},lambert:{uniforms:di([Ke.common,Ke.specularmap,Ke.envmap,Ke.aomap,Ke.lightmap,Ke.emissivemap,Ke.fog,Ke.lights,{emissive:{value:new yt(0)}}]),vertexShader:kt.meshlambert_vert,fragmentShader:kt.meshlambert_frag},phong:{uniforms:di([Ke.common,Ke.specularmap,Ke.envmap,Ke.aomap,Ke.lightmap,Ke.emissivemap,Ke.bumpmap,Ke.normalmap,Ke.displacementmap,Ke.fog,Ke.lights,{emissive:{value:new yt(0)},specular:{value:new yt(1118481)},shininess:{value:30}}]),vertexShader:kt.meshphong_vert,fragmentShader:kt.meshphong_frag},standard:{uniforms:di([Ke.common,Ke.envmap,Ke.aomap,Ke.lightmap,Ke.emissivemap,Ke.bumpmap,Ke.normalmap,Ke.displacementmap,Ke.roughnessmap,Ke.metalnessmap,Ke.fog,Ke.lights,{emissive:{value:new yt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:kt.meshphysical_vert,fragmentShader:kt.meshphysical_frag},toon:{uniforms:di([Ke.common,Ke.aomap,Ke.lightmap,Ke.emissivemap,Ke.bumpmap,Ke.normalmap,Ke.displacementmap,Ke.gradientmap,Ke.fog,Ke.lights,{emissive:{value:new yt(0)}}]),vertexShader:kt.meshtoon_vert,fragmentShader:kt.meshtoon_frag},matcap:{uniforms:di([Ke.common,Ke.bumpmap,Ke.normalmap,Ke.displacementmap,Ke.fog,{matcap:{value:null}}]),vertexShader:kt.meshmatcap_vert,fragmentShader:kt.meshmatcap_frag},points:{uniforms:di([Ke.points,Ke.fog]),vertexShader:kt.points_vert,fragmentShader:kt.points_frag},dashed:{uniforms:di([Ke.common,Ke.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:kt.linedashed_vert,fragmentShader:kt.linedashed_frag},depth:{uniforms:di([Ke.common,Ke.displacementmap]),vertexShader:kt.depth_vert,fragmentShader:kt.depth_frag},normal:{uniforms:di([Ke.common,Ke.bumpmap,Ke.normalmap,Ke.displacementmap,{opacity:{value:1}}]),vertexShader:kt.normal_vert,fragmentShader:kt.normal_frag},sprite:{uniforms:di([Ke.sprite,Ke.fog]),vertexShader:kt.sprite_vert,fragmentShader:kt.sprite_frag},background:{uniforms:{uvTransform:{value:new si},t2D:{value:null}},vertexShader:kt.background_vert,fragmentShader:kt.background_frag},cube:{uniforms:di([Ke.envmap,{opacity:{value:1}}]),vertexShader:kt.cube_vert,fragmentShader:kt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:kt.equirect_vert,fragmentShader:kt.equirect_frag},distanceRGBA:{uniforms:di([Ke.common,Ke.displacementmap,{referencePosition:{value:new q},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:kt.distanceRGBA_vert,fragmentShader:kt.distanceRGBA_frag},shadow:{uniforms:di([Ke.lights,Ke.fog,{color:{value:new yt(0)},opacity:{value:1}}]),vertexShader:kt.shadow_vert,fragmentShader:kt.shadow_frag}};Zr.physical={uniforms:di([Zr.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Ge(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new yt(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:kt.meshphysical_vert,fragmentShader:kt.meshphysical_frag};function wk(r,e,t,n,i){const s=new yt(0);let a=0,o,l,c=null,u=0,h=null;function d(p,v,g,m){let _=v.isScene===!0?v.background:null;_&&_.isTexture&&(_=e.get(_));const x=r.xr,y=x.getSession&&x.getSession();y&&y.environmentBlendMode==="additive"&&(_=null),_===null?f(s,a):_&&_.isColor&&(f(_,1),m=!0),(r.autoClear||m)&&r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil),_&&(_.isCubeTexture||_.mapping===z_)?(l===void 0&&(l=new Br(new $_(1,1,1),new po({name:"BackgroundCubeMaterial",uniforms:Hl(Zr.cube.uniforms),vertexShader:Zr.cube.vertexShader,fragmentShader:Zr.cube.fragmentShader,side:Jn,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(b,M,w){this.matrixWorld.copyPosition(w.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(l)),l.material.uniforms.envMap.value=_,l.material.uniforms.flipEnvMap.value=_.isCubeTexture&&_._needsFlipEnvMap?-1:1,(c!==_||u!==_.version||h!==r.toneMapping)&&(l.material.needsUpdate=!0,c=_,u=_.version,h=r.toneMapping),p.unshift(l,l.geometry,l.material,0,0,null)):_&&_.isTexture&&(o===void 0&&(o=new Br(new nB(2,2),new po({name:"BackgroundMaterial",uniforms:Hl(Zr.background.uniforms),vertexShader:Zr.background.vertexShader,fragmentShader:Zr.background.fragmentShader,side:Yp,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(o)),o.material.uniforms.t2D.value=_,_.matrixAutoUpdate===!0&&_.updateMatrix(),o.material.uniforms.uvTransform.value.copy(_.matrix),(c!==_||u!==_.version||h!==r.toneMapping)&&(o.material.needsUpdate=!0,c=_,u=_.version,h=r.toneMapping),p.unshift(o,o.geometry,o.material,0,0,null))}function f(p,v){t.buffers.color.setClear(p.r,p.g,p.b,v,i)}return{getClearColor:function(){return s},setClearColor:function(p,v=1){s.set(p),a=v,f(s,a)},getClearAlpha:function(){return a},setClearAlpha:function(p){a=p,f(s,a)},render:d}}function Tk(r,e,t,n){const i=r.getParameter(34921),s=n.isWebGL2?null:e.get("OES_vertex_array_object"),a=n.isWebGL2||s!==null,o={},l=v(null);let c=l;function u(D,O,G,P,z){let W=!1;if(a){const X=p(P,G,O);c!==X&&(c=X,d(c.object)),W=g(P,z),W&&m(P,z)}else{const X=O.wireframe===!0;(c.geometry!==P.id||c.program!==G.id||c.wireframe!==X)&&(c.geometry=P.id,c.program=G.id,c.wireframe=X,W=!0)}D.isInstancedMesh===!0&&(W=!0),z!==null&&t.update(z,34963),W&&(w(D,O,G,P),z!==null&&r.bindBuffer(34963,t.get(z).buffer))}function h(){return n.isWebGL2?r.createVertexArray():s.createVertexArrayOES()}function d(D){return n.isWebGL2?r.bindVertexArray(D):s.bindVertexArrayOES(D)}function f(D){return n.isWebGL2?r.deleteVertexArray(D):s.deleteVertexArrayOES(D)}function p(D,O,G){const P=G.wireframe===!0;let z=o[D.id];z===void 0&&(z={},o[D.id]=z);let W=z[O.id];W===void 0&&(W={},z[O.id]=W);let X=W[P];return X===void 0&&(X=v(h()),W[P]=X),X}function v(D){const O=[],G=[],P=[];for(let z=0;z<i;z++)O[z]=0,G[z]=0,P[z]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:O,enabledAttributes:G,attributeDivisors:P,object:D,attributes:{},index:null}}function g(D,O){const G=c.attributes,P=D.attributes;let z=0;for(const W in P){const X=G[W],re=P[W];if(X===void 0||X.attribute!==re||X.data!==re.data)return!0;z++}return c.attributesNum!==z||c.index!==O}function m(D,O){const G={},P=D.attributes;let z=0;for(const W in P){const X=P[W],re={};re.attribute=X,X.data&&(re.data=X.data),G[W]=re,z++}c.attributes=G,c.attributesNum=z,c.index=O}function _(){const D=c.newAttributes;for(let O=0,G=D.length;O<G;O++)D[O]=0}function x(D){y(D,0)}function y(D,O){const G=c.newAttributes,P=c.enabledAttributes,z=c.attributeDivisors;G[D]=1,P[D]===0&&(r.enableVertexAttribArray(D),P[D]=1),z[D]!==O&&((n.isWebGL2?r:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](D,O),z[D]=O)}function b(){const D=c.newAttributes,O=c.enabledAttributes;for(let G=0,P=O.length;G<P;G++)O[G]!==D[G]&&(r.disableVertexAttribArray(G),O[G]=0)}function M(D,O,G,P,z,W){n.isWebGL2===!0&&(G===5124||G===5125)?r.vertexAttribIPointer(D,O,G,z,W):r.vertexAttribPointer(D,O,G,P,z,W)}function w(D,O,G,P){if(n.isWebGL2===!1&&(D.isInstancedMesh||P.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;_();const z=P.attributes,W=G.getAttributes(),X=O.defaultAttributeValues;for(const re in W){const ne=W[re];if(ne>=0){const be=z[re];if(be!==void 0){const _e=be.normalized,$=be.itemSize,K=t.get(be);if(K===void 0)continue;const ge=K.buffer,J=K.type,ue=K.bytesPerElement;if(be.isInterleavedBufferAttribute){const Ce=be.data,Ee=Ce.stride,Ue=be.offset;Ce&&Ce.isInstancedInterleavedBuffer?(y(ne,Ce.meshPerAttribute),P._maxInstanceCount===void 0&&(P._maxInstanceCount=Ce.meshPerAttribute*Ce.count)):x(ne),r.bindBuffer(34962,ge),M(ne,$,J,_e,Ee*ue,Ue*ue)}else be.isInstancedBufferAttribute?(y(ne,be.meshPerAttribute),P._maxInstanceCount===void 0&&(P._maxInstanceCount=be.meshPerAttribute*be.count)):x(ne),r.bindBuffer(34962,ge),M(ne,$,J,_e,0,0)}else if(re==="instanceMatrix"){const _e=t.get(D.instanceMatrix);if(_e===void 0)continue;const $=_e.buffer,K=_e.type;y(ne+0,1),y(ne+1,1),y(ne+2,1),y(ne+3,1),r.bindBuffer(34962,$),r.vertexAttribPointer(ne+0,4,K,!1,64,0),r.vertexAttribPointer(ne+1,4,K,!1,64,16),r.vertexAttribPointer(ne+2,4,K,!1,64,32),r.vertexAttribPointer(ne+3,4,K,!1,64,48)}else if(re==="instanceColor"){const _e=t.get(D.instanceColor);if(_e===void 0)continue;const $=_e.buffer,K=_e.type;y(ne,1),r.bindBuffer(34962,$),r.vertexAttribPointer(ne,3,K,!1,12,0)}else if(X!==void 0){const _e=X[re];if(_e!==void 0)switch(_e.length){case 2:r.vertexAttrib2fv(ne,_e);break;case 3:r.vertexAttrib3fv(ne,_e);break;case 4:r.vertexAttrib4fv(ne,_e);break;default:r.vertexAttrib1fv(ne,_e)}}}}b()}function C(){R();for(const D in o){const O=o[D];for(const G in O){const P=O[G];for(const z in P)f(P[z].object),delete P[z];delete O[G]}delete o[D]}}function T(D){if(o[D.id]===void 0)return;const O=o[D.id];for(const G in O){const P=O[G];for(const z in P)f(P[z].object),delete P[z];delete O[G]}delete o[D.id]}function S(D){for(const O in o){const G=o[O];if(G[D.id]===void 0)continue;const P=G[D.id];for(const z in P)f(P[z].object),delete P[z];delete G[D.id]}}function R(){H(),c!==l&&(c=l,d(c.object))}function H(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:u,reset:R,resetDefaultState:H,dispose:C,releaseStatesOfGeometry:T,releaseStatesOfProgram:S,initAttributes:_,enableAttribute:x,disableUnusedAttributes:b}}function Ek(r,e,t,n){const i=n.isWebGL2;let s;function a(c){s=c}function o(c,u){r.drawArrays(s,c,u),t.update(u,s,1)}function l(c,u,h){if(h===0)return;let d,f;if(i)d=r,f="drawArraysInstanced";else if(d=e.get("ANGLE_instanced_arrays"),f="drawArraysInstancedANGLE",d===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[f](s,c,u,h),t.update(u,s,h)}this.setMode=a,this.render=o,this.renderInstances=l}function Ak(r,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const M=e.get("EXT_texture_filter_anisotropic");n=r.getParameter(M.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function s(M){if(M==="highp"){if(r.getShaderPrecisionFormat(35633,36338).precision>0&&r.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";M="mediump"}return M==="mediump"&&r.getShaderPrecisionFormat(35633,36337).precision>0&&r.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const a=typeof WebGL2RenderingContext<"u"&&r instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext<"u"&&r instanceof WebGL2ComputeRenderingContext;let o=t.precision!==void 0?t.precision:"highp";const l=s(o);l!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",l,"instead."),o=l);const c=t.logarithmicDepthBuffer===!0,u=r.getParameter(34930),h=r.getParameter(35660),d=r.getParameter(3379),f=r.getParameter(34076),p=r.getParameter(34921),v=r.getParameter(36347),g=r.getParameter(36348),m=r.getParameter(36349),_=h>0,x=a||e.has("OES_texture_float"),y=_&&x,b=a?r.getParameter(36183):0;return{isWebGL2:a,getMaxAnisotropy:i,getMaxPrecision:s,precision:o,logarithmicDepthBuffer:c,maxTextures:u,maxVertexTextures:h,maxTextureSize:d,maxCubemapSize:f,maxAttributes:p,maxVertexUniforms:v,maxVaryings:g,maxFragmentUniforms:m,vertexTextures:_,floatFragmentTextures:x,floatVertexTextures:y,maxSamples:b}}function Ck(r){const e=this;let t=null,n=0,i=!1,s=!1;const a=new qr,o=new si,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(h,d,f){const p=h.length!==0||d||n!==0||i;return i=d,t=u(h,f,0),n=h.length,p},this.beginShadows=function(){s=!0,u(null)},this.endShadows=function(){s=!1,c()},this.setState=function(h,d,f){const p=h.clippingPlanes,v=h.clipIntersection,g=h.clipShadows,m=r.get(h);if(!i||p===null||p.length===0||s&&!g)s?u(null):c();else{const _=s?0:n,x=_*4;let y=m.clippingState||null;l.value=y,y=u(p,d,x,f);for(let b=0;b!==x;++b)y[b]=t[b];m.clippingState=y,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=_}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(h,d,f,p){const v=h!==null?h.length:0;let g=null;if(v!==0){if(g=l.value,p!==!0||g===null){const m=f+v*4,_=d.matrixWorldInverse;o.getNormalMatrix(_),(g===null||g.length<m)&&(g=new Float32Array(m));for(let x=0,y=f;x!==v;++x,y+=4)a.copy(h[x]).applyMatrix4(_,o),a.normal.toArray(g,y),g[y+3]=a.constant}l.value=g,l.needsUpdate=!0}return e.numPlanes=v,e.numIntersection=0,g}}function Rk(r){let e=new WeakMap;function t(a,o){return o===Rx?a.mapping=U_:o===Lx&&(a.mapping=B_),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===Rx||o===Lx)if(e.has(a)){const l=e.get(a).texture;return t(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const c=r.getRenderTarget(),u=new Q1(l.height/2);return u.fromEquirectangularTexture(r,a),e.set(a,u),r.setRenderTarget(c),a.addEventListener("dispose",i),t(u.texture,a.mapping)}else return null}}return a}function i(a){const o=a.target;o.removeEventListener("dispose",i);const l=e.get(o);l!==void 0&&(e.delete(o),l.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}function Lk(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Pk(r,e,t,n){const i={},s=new WeakMap;function a(h){const d=h.target;d.index!==null&&e.remove(d.index);for(const p in d.attributes)e.remove(d.attributes[p]);d.removeEventListener("dispose",a),delete i[d.id];const f=s.get(d);f&&(e.remove(f),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function o(h,d){return i[d.id]===!0||(d.addEventListener("dispose",a),i[d.id]=!0,t.memory.geometries++),d}function l(h){const d=h.attributes;for(const p in d)e.update(d[p],34962);const f=h.morphAttributes;for(const p in f){const v=f[p];for(let g=0,m=v.length;g<m;g++)e.update(v[g],34962)}}function c(h){const d=[],f=h.index,p=h.attributes.position;let v=0;if(f!==null){const _=f.array;v=f.version;for(let x=0,y=_.length;x<y;x+=3){const b=_[x+0],M=_[x+1],w=_[x+2];d.push(b,M,M,w,w,b)}}else{const _=p.array;v=p.version;for(let x=0,y=_.length/3-1;x<y;x+=3){const b=x+0,M=x+1,w=x+2;d.push(b,M,M,w,w,b)}}const g=new(K1(d)>65535?J1:j1)(d,1);g.version=v;const m=s.get(h);m&&e.remove(m),s.set(h,g)}function u(h){const d=s.get(h);if(d){const f=h.index;f!==null&&d.version<f.version&&c(h)}else c(h);return s.get(h)}return{get:o,update:l,getWireframeAttribute:u}}function Ik(r,e,t,n){const i=n.isWebGL2;let s;function a(d){s=d}let o,l;function c(d){o=d.type,l=d.bytesPerElement}function u(d,f){r.drawElements(s,f,o,d*l),t.update(f,s,1)}function h(d,f,p){if(p===0)return;let v,g;if(i)v=r,g="drawElementsInstanced";else if(v=e.get("ANGLE_instanced_arrays"),g="drawElementsInstancedANGLE",v===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}v[g](s,f,o,d*l,p),t.update(f,s,p)}this.setMode=a,this.setIndex=c,this.render=u,this.renderInstances=h}function Dk(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,a,o){switch(t.calls++,a){case 4:t.triangles+=o*(s/3);break;case 1:t.lines+=o*(s/2);break;case 3:t.lines+=o*(s-1);break;case 2:t.lines+=o*s;break;case 0:t.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function Nk(r,e){return r[0]-e[0]}function Fk(r,e){return Math.abs(e[1])-Math.abs(r[1])}function Ok(r){const e={},t=new Float32Array(8),n=[];for(let s=0;s<8;s++)n[s]=[s,0];function i(s,a,o,l){const c=s.morphTargetInfluences,u=c===void 0?0:c.length;let h=e[a.id];if(h===void 0){h=[];for(let g=0;g<u;g++)h[g]=[g,0];e[a.id]=h}for(let g=0;g<u;g++){const m=h[g];m[0]=g,m[1]=c[g]}h.sort(Fk);for(let g=0;g<8;g++)g<u&&h[g][1]?(n[g][0]=h[g][0],n[g][1]=h[g][1]):(n[g][0]=Number.MAX_SAFE_INTEGER,n[g][1]=0);n.sort(Nk);const d=o.morphTargets&&a.morphAttributes.position,f=o.morphNormals&&a.morphAttributes.normal;let p=0;for(let g=0;g<8;g++){const m=n[g],_=m[0],x=m[1];_!==Number.MAX_SAFE_INTEGER&&x?(d&&a.getAttribute("morphTarget"+g)!==d[_]&&a.setAttribute("morphTarget"+g,d[_]),f&&a.getAttribute("morphNormal"+g)!==f[_]&&a.setAttribute("morphNormal"+g,f[_]),t[g]=x,p+=x):(d&&a.hasAttribute("morphTarget"+g)===!0&&a.deleteAttribute("morphTarget"+g),f&&a.hasAttribute("morphNormal"+g)===!0&&a.deleteAttribute("morphNormal"+g),t[g]=0)}const v=a.morphTargetsRelative?1:1-p;l.getUniforms().setValue(r,"morphTargetBaseInfluence",v),l.getUniforms().setValue(r,"morphTargetInfluences",t)}return{update:i}}function Uk(r,e,t,n){let i=new WeakMap;function s(l){const c=n.render.frame,u=l.geometry,h=e.get(l,u);return i.get(h)!==c&&(e.update(h),i.set(h,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),t.update(l.instanceMatrix,34962),l.instanceColor!==null&&t.update(l.instanceColor,34962)),h}function a(){i=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:s,dispose:a}}class nw extends oi{constructor(e=null,t=1,n=1,i=1){super(null),this.image={data:e,width:t,height:n,depth:i},this.magFilter=Ci,this.minFilter=Ci,this.wrapR=Ir,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}nw.prototype.isDataTexture2DArray=!0;class iw extends oi{constructor(e=null,t=1,n=1,i=1){super(null),this.image={data:e,width:t,height:n,depth:i},this.magFilter=Ci,this.minFilter=Ci,this.wrapR=Ir,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}iw.prototype.isDataTexture3D=!0;const rw=new oi,Bk=new nw,zk=new iw,sw=new Kp,nM=[],iM=[],rM=new Float32Array(16),sM=new Float32Array(9),aM=new Float32Array(4);function oc(r,e,t){const n=r[0];if(n<=0||n>0)return r;const i=e*t;let s=nM[i];if(s===void 0&&(s=new Float32Array(i),nM[i]=s),e!==0){n.toArray(s,0);for(let a=1,o=0;a!==e;++a)o+=t,r[a].toArray(s,o)}return s}function Ii(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function vi(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function aw(r,e){let t=iM[e];t===void 0&&(t=new Int32Array(e),iM[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function kk(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function Vk(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ii(t,e))return;r.uniform2fv(this.addr,e),vi(t,e)}}function Hk(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Ii(t,e))return;r.uniform3fv(this.addr,e),vi(t,e)}}function Gk(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ii(t,e))return;r.uniform4fv(this.addr,e),vi(t,e)}}function Wk(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Ii(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),vi(t,e)}else{if(Ii(t,n))return;aM.set(n),r.uniformMatrix2fv(this.addr,!1,aM),vi(t,n)}}function $k(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Ii(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),vi(t,e)}else{if(Ii(t,n))return;sM.set(n),r.uniformMatrix3fv(this.addr,!1,sM),vi(t,n)}}function Xk(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Ii(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),vi(t,e)}else{if(Ii(t,n))return;rM.set(n),r.uniformMatrix4fv(this.addr,!1,rM),vi(t,n)}}function qk(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function Zk(r,e){const t=this.cache;Ii(t,e)||(r.uniform2iv(this.addr,e),vi(t,e))}function Yk(r,e){const t=this.cache;Ii(t,e)||(r.uniform3iv(this.addr,e),vi(t,e))}function jk(r,e){const t=this.cache;Ii(t,e)||(r.uniform4iv(this.addr,e),vi(t,e))}function Jk(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function Kk(r,e){const t=this.cache;Ii(t,e)||(r.uniform2uiv(this.addr,e),vi(t,e))}function Qk(r,e){const t=this.cache;Ii(t,e)||(r.uniform3uiv(this.addr,e),vi(t,e))}function e4(r,e){const t=this.cache;Ii(t,e)||(r.uniform4uiv(this.addr,e),vi(t,e))}function t4(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.safeSetTexture2D(e||rw,i)}function n4(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||zk,i)}function i4(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.safeSetTextureCube(e||sw,i)}function r4(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||Bk,i)}function s4(r){switch(r){case 5126:return kk;case 35664:return Vk;case 35665:return Hk;case 35666:return Gk;case 35674:return Wk;case 35675:return $k;case 35676:return Xk;case 5124:case 35670:return qk;case 35667:case 35671:return Zk;case 35668:case 35672:return Yk;case 35669:case 35673:return jk;case 5125:return Jk;case 36294:return Kk;case 36295:return Qk;case 36296:return e4;case 35678:case 36198:case 36298:case 36306:case 35682:return t4;case 35679:case 36299:case 36307:return n4;case 35680:case 36300:case 36308:case 36293:return i4;case 36289:case 36303:case 36311:case 36292:return r4}}function a4(r,e){r.uniform1fv(this.addr,e)}function o4(r,e){const t=oc(e,this.size,2);r.uniform2fv(this.addr,t)}function l4(r,e){const t=oc(e,this.size,3);r.uniform3fv(this.addr,t)}function c4(r,e){const t=oc(e,this.size,4);r.uniform4fv(this.addr,t)}function u4(r,e){const t=oc(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function h4(r,e){const t=oc(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function d4(r,e){const t=oc(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function f4(r,e){r.uniform1iv(this.addr,e)}function p4(r,e){r.uniform2iv(this.addr,e)}function m4(r,e){r.uniform3iv(this.addr,e)}function g4(r,e){r.uniform4iv(this.addr,e)}function v4(r,e){r.uniform1uiv(this.addr,e)}function _4(r,e){r.uniform2uiv(this.addr,e)}function y4(r,e){r.uniform3uiv(this.addr,e)}function x4(r,e){r.uniform4uiv(this.addr,e)}function M4(r,e,t){const n=e.length,i=aw(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.safeSetTexture2D(e[s]||rw,i[s])}function b4(r,e,t){const n=e.length,i=aw(t,n);r.uniform1iv(this.addr,i);for(let s=0;s!==n;++s)t.safeSetTextureCube(e[s]||sw,i[s])}function S4(r){switch(r){case 5126:return a4;case 35664:return o4;case 35665:return l4;case 35666:return c4;case 35674:return u4;case 35675:return h4;case 35676:return d4;case 5124:case 35670:return f4;case 35667:case 35671:return p4;case 35668:case 35672:return m4;case 35669:case 35673:return g4;case 5125:return v4;case 36294:return _4;case 36295:return y4;case 36296:return x4;case 35678:case 36198:case 36298:case 36306:case 35682:return M4;case 35680:case 36300:case 36308:case 36293:return b4}}function w4(r,e,t){this.id=r,this.addr=t,this.cache=[],this.setValue=s4(e.type)}function ow(r,e,t){this.id=r,this.addr=t,this.cache=[],this.size=e.size,this.setValue=S4(e.type)}ow.prototype.updateCache=function(r){const e=this.cache;r instanceof Float32Array&&e.length!==r.length&&(this.cache=new Float32Array(r.length)),vi(e,r)};function lw(r){this.id=r,this.seq=[],this.map={}}lw.prototype.setValue=function(r,e,t){const n=this.seq;for(let i=0,s=n.length;i!==s;++i){const a=n[i];a.setValue(r,e[a.id],t)}};const Ig=/(\w+)(\])?(\[|\.)?/g;function oM(r,e){r.seq.push(e),r.map[e.id]=e}function T4(r,e,t){const n=r.name,i=n.length;for(Ig.lastIndex=0;;){const s=Ig.exec(n),a=Ig.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&a+2===i){oM(t,c===void 0?new w4(o,r,e):new ow(o,r,e));break}else{let h=t.map[o];h===void 0&&(h=new lw(o),oM(t,h)),t=h}}}function ca(r,e){this.seq=[],this.map={};const t=r.getProgramParameter(e,35718);for(let n=0;n<t;++n){const i=r.getActiveUniform(e,n),s=r.getUniformLocation(e,i.name);T4(i,s,this)}}ca.prototype.setValue=function(r,e,t,n){const i=this.map[e];i!==void 0&&i.setValue(r,t,n)};ca.prototype.setOptional=function(r,e,t){const n=e[t];n!==void 0&&this.setValue(r,t,n)};ca.upload=function(r,e,t,n){for(let i=0,s=e.length;i!==s;++i){const a=e[i],o=t[a.id];o.needsUpdate!==!1&&a.setValue(r,o.value,n)}};ca.seqWithValue=function(r,e){const t=[];for(let n=0,i=r.length;n!==i;++n){const s=r[n];s.id in e&&t.push(s)}return t};function lM(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}let E4=0;function A4(r){const e=r.split(`
`);for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join(`
`)}function cw(r){switch(r){case rh:return["Linear","( value )"];case Z1:return["sRGB","( value )"];case wU:return["RGBE","( value )"];case EU:return["RGBM","( value, 7.0 )"];case AU:return["RGBM","( value, 16.0 )"];case CU:return["RGBD","( value, 256.0 )"];case SU:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case TU:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",r),["Linear","( value )"]}}function cM(r,e,t){const n=r.getShaderParameter(e,35713),i=r.getShaderInfoLog(e).trim();if(n&&i==="")return"";const s=r.getShaderSource(e);return"THREE.WebGLShader: gl.getShaderInfoLog() "+t+`
`+i+A4(s)}function Lc(r,e){const t=cw(e);return"vec4 "+r+"( vec4 value ) { return "+t[0]+"ToLinear"+t[1]+"; }"}function C4(r,e){const t=cw(e);return"vec4 "+r+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function R4(r,e){let t;switch(e){case bO:t="Linear";break;case SO:t="Reinhard";break;case wO:t="OptimizedCineon";break;case TO:t="ACESFilmic";break;case EO:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function L4(r){return[r.extensionDerivatives||r.envMapCubeUV||r.bumpMap||r.tangentSpaceNormalMap||r.clearcoatNormalMap||r.flatShading||r.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(r.extensionFragDepth||r.logarithmicDepthBuffer)&&r.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",r.extensionDrawBuffers&&r.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(r.extensionShaderTextureLOD||r.envMap)&&r.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Vc).join(`
`)}function P4(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function I4(r,e){const t={},n=r.getProgramParameter(e,35721);for(let i=0;i<n;i++){const a=r.getActiveAttrib(e,i).name;t[a]=r.getAttribLocation(e,a)}return t}function Vc(r){return r!==""}function uM(r,e){return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function hM(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const D4=/^[ \t]*#include +<([\w\d./]+)>/gm;function Mv(r){return r.replace(D4,N4)}function N4(r,e){const t=kt[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return Mv(t)}const F4=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,O4=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function dM(r){return r.replace(O4,uw).replace(F4,U4)}function U4(r,e,t,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),uw(r,e,t,n)}function uw(r,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function fM(r){let e="precision "+r.precision+` float;
precision `+r.precision+" int;";return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function B4(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===H1?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===eO?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===kc&&(e="SHADOWMAP_TYPE_VSM"),e}function z4(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case U_:case B_:e="ENVMAP_TYPE_CUBE";break;case z_:case k_:e="ENVMAP_TYPE_CUBE_UV";break}return e}function k4(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case B_:case k_:e="ENVMAP_MODE_REFRACTION";break}return e}function V4(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case Jp:e="ENVMAP_BLENDING_MULTIPLY";break;case xO:e="ENVMAP_BLENDING_MIX";break;case MO:e="ENVMAP_BLENDING_ADD";break}return e}function H4(r,e,t,n){const i=r.getContext(),s=t.defines;let a=t.vertexShader,o=t.fragmentShader;const l=B4(t),c=z4(t),u=k4(t),h=V4(t),d=r.gammaFactor>0?r.gammaFactor:1,f=t.isWebGL2?"":L4(t),p=P4(s),v=i.createProgram();let g,m,_=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(g=[p].filter(Vc).join(`
`),g.length>0&&(g+=`
`),m=[f,p].filter(Vc).join(`
`),m.length>0&&(m+=`
`)):(g=[fM(t),"#define SHADER_NAME "+t.shaderName,p,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+d,"#define MAX_BONES "+t.maxBones,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.displacementMap&&t.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.useVertexTexture?"#define BONE_TEXTURE":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Vc).join(`
`),m=[f,fM(t),"#define SHADER_NAME "+t.shaderName,p,t.alphaTest?"#define ALPHATEST "+t.alphaTest+(t.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+d,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMap&&t.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",t.normalMap&&t.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.sheen?"#define USE_SHEEN":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs?"#define USE_UV":"",t.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(t.extensionShaderTextureLOD||t.envMap)&&t.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==ou?"#define TONE_MAPPING":"",t.toneMapping!==ou?kt.tonemapping_pars_fragment:"",t.toneMapping!==ou?R4("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",kt.encodings_pars_fragment,t.map?Lc("mapTexelToLinear",t.mapEncoding):"",t.matcap?Lc("matcapTexelToLinear",t.matcapEncoding):"",t.envMap?Lc("envMapTexelToLinear",t.envMapEncoding):"",t.emissiveMap?Lc("emissiveMapTexelToLinear",t.emissiveMapEncoding):"",t.lightMap?Lc("lightMapTexelToLinear",t.lightMapEncoding):"",C4("linearToOutputTexel",t.outputEncoding),t.depthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(Vc).join(`
`)),a=Mv(a),a=uM(a,t),a=hM(a,t),o=Mv(o),o=uM(o,t),o=hM(o,t),a=dM(a),o=dM(o),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(_=`#version 300 es
`,g=["#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+g,m=["#define varying in",t.glslVersion===Gx?"":"out highp vec4 pc_fragColor;",t.glslVersion===Gx?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const x=_+g+a,y=_+m+o,b=lM(i,35633,x),M=lM(i,35632,y);if(i.attachShader(v,b),i.attachShader(v,M),t.index0AttributeName!==void 0?i.bindAttribLocation(v,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(v,0,"position"),i.linkProgram(v),r.debug.checkShaderErrors){const T=i.getProgramInfoLog(v).trim(),S=i.getShaderInfoLog(b).trim(),R=i.getShaderInfoLog(M).trim();let H=!0,D=!0;if(i.getProgramParameter(v,35714)===!1){H=!1;const O=cM(i,b,"vertex"),G=cM(i,M,"fragment");console.error("THREE.WebGLProgram: shader error: ",i.getError(),"35715",i.getProgramParameter(v,35715),"gl.getProgramInfoLog",T,O,G)}else T!==""?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",T):(S===""||R==="")&&(D=!1);D&&(this.diagnostics={runnable:H,programLog:T,vertexShader:{log:S,prefix:g},fragmentShader:{log:R,prefix:m}})}i.deleteShader(b),i.deleteShader(M);let w;this.getUniforms=function(){return w===void 0&&(w=new ca(i,v)),w};let C;return this.getAttributes=function(){return C===void 0&&(C=I4(i,v)),C},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(v),this.program=void 0},this.name=t.shaderName,this.id=E4++,this.cacheKey=e,this.usedTimes=1,this.program=v,this.vertexShader=b,this.fragmentShader=M,this}function G4(r,e,t,n,i,s){const a=[],o=n.isWebGL2,l=n.logarithmicDepthBuffer,c=n.floatVertexTextures,u=n.maxVertexUniforms,h=n.vertexTextures;let d=n.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},p=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function v(M){const C=M.skeleton.bones;if(c)return 1024;{const S=Math.floor((u-20)/4),R=Math.min(S,C.length);return R<C.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+C.length+" bones. This GPU supports "+R+"."),0):R}}function g(M){let w;return M&&M.isTexture?w=M.encoding:M&&M.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),w=M.texture.encoding):w=rh,w}function m(M,w,C,T,S){const R=T.fog,H=M.isMeshStandardMaterial?T.environment:null,D=e.get(M.envMap||H),O=f[M.type],G=S.isSkinnedMesh?v(S):0;M.precision!==null&&(d=n.getMaxPrecision(M.precision),d!==M.precision&&console.warn("THREE.WebGLProgram.getParameters:",M.precision,"not supported, using",d,"instead."));let P,z;if(O){const re=Zr[O];P=re.vertexShader,z=re.fragmentShader}else P=M.vertexShader,z=M.fragmentShader;const W=r.getRenderTarget();return{isWebGL2:o,shaderID:O,shaderName:M.type,vertexShader:P,fragmentShader:z,defines:M.defines,isRawShaderMaterial:M.isRawShaderMaterial===!0,glslVersion:M.glslVersion,precision:d,instancing:S.isInstancedMesh===!0,instancingColor:S.isInstancedMesh===!0&&S.instanceColor!==null,supportsVertexTextures:h,outputEncoding:W!==null?g(W.texture):r.outputEncoding,map:!!M.map,mapEncoding:g(M.map),matcap:!!M.matcap,matcapEncoding:g(M.matcap),envMap:!!D,envMapMode:D&&D.mapping,envMapEncoding:g(D),envMapCubeUV:!!D&&(D.mapping===z_||D.mapping===k_),lightMap:!!M.lightMap,lightMapEncoding:g(M.lightMap),aoMap:!!M.aoMap,emissiveMap:!!M.emissiveMap,emissiveMapEncoding:g(M.emissiveMap),bumpMap:!!M.bumpMap,normalMap:!!M.normalMap,objectSpaceNormalMap:M.normalMapType===PU,tangentSpaceNormalMap:M.normalMapType===nc,clearcoatMap:!!M.clearcoatMap,clearcoatRoughnessMap:!!M.clearcoatRoughnessMap,clearcoatNormalMap:!!M.clearcoatNormalMap,displacementMap:!!M.displacementMap,roughnessMap:!!M.roughnessMap,metalnessMap:!!M.metalnessMap,specularMap:!!M.specularMap,alphaMap:!!M.alphaMap,gradientMap:!!M.gradientMap,sheen:!!M.sheen,transmissionMap:!!M.transmissionMap,combine:M.combine,vertexTangents:M.normalMap&&M.vertexTangents,vertexColors:M.vertexColors,vertexAlphas:M.vertexColors===!0&&S.geometry&&S.geometry.attributes.color&&S.geometry.attributes.color.itemSize===4,vertexUvs:!!M.map||!!M.bumpMap||!!M.normalMap||!!M.specularMap||!!M.alphaMap||!!M.emissiveMap||!!M.roughnessMap||!!M.metalnessMap||!!M.clearcoatMap||!!M.clearcoatRoughnessMap||!!M.clearcoatNormalMap||!!M.displacementMap||!!M.transmissionMap,uvsVertexOnly:!(M.map||M.bumpMap||M.normalMap||M.specularMap||M.alphaMap||M.emissiveMap||M.roughnessMap||M.metalnessMap||M.clearcoatNormalMap||M.transmissionMap)&&!!M.displacementMap,fog:!!R,useFog:M.fog,fogExp2:R&&R.isFogExp2,flatShading:!!M.flatShading,sizeAttenuation:M.sizeAttenuation,logarithmicDepthBuffer:l,skinning:M.skinning&&G>0,maxBones:G,useVertexTexture:c,morphTargets:M.morphTargets,morphNormals:M.morphNormals,numDirLights:w.directional.length,numPointLights:w.point.length,numSpotLights:w.spot.length,numRectAreaLights:w.rectArea.length,numHemiLights:w.hemi.length,numDirLightShadows:w.directionalShadowMap.length,numPointLightShadows:w.pointShadowMap.length,numSpotLightShadows:w.spotShadowMap.length,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:M.dithering,shadowMapEnabled:r.shadowMap.enabled&&C.length>0,shadowMapType:r.shadowMap.type,toneMapping:M.toneMapped?r.toneMapping:ou,physicallyCorrectLights:r.physicallyCorrectLights,premultipliedAlpha:M.premultipliedAlpha,alphaTest:M.alphaTest,doubleSided:M.side===jp,flipSided:M.side===Jn,depthPacking:M.depthPacking!==void 0?M.depthPacking:!1,index0AttributeName:M.index0AttributeName,extensionDerivatives:M.extensions&&M.extensions.derivatives,extensionFragDepth:M.extensions&&M.extensions.fragDepth,extensionDrawBuffers:M.extensions&&M.extensions.drawBuffers,extensionShaderTextureLOD:M.extensions&&M.extensions.shaderTextureLOD,rendererExtensionFragDepth:o||t.has("EXT_frag_depth"),rendererExtensionDrawBuffers:o||t.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:o||t.has("EXT_shader_texture_lod"),customProgramCacheKey:M.customProgramCacheKey()}}function _(M){const w=[];if(M.shaderID?w.push(M.shaderID):(w.push(M.fragmentShader),w.push(M.vertexShader)),M.defines!==void 0)for(const C in M.defines)w.push(C),w.push(M.defines[C]);if(M.isRawShaderMaterial===!1){for(let C=0;C<p.length;C++)w.push(M[p[C]]);w.push(r.outputEncoding),w.push(r.gammaFactor)}return w.push(M.customProgramCacheKey),w.join()}function x(M){const w=f[M.type];let C;if(w){const T=Zr[w];C=KU.clone(T.uniforms)}else C=M.uniforms;return C}function y(M,w){let C;for(let T=0,S=a.length;T<S;T++){const R=a[T];if(R.cacheKey===w){C=R,++C.usedTimes;break}}return C===void 0&&(C=new H4(r,w,M,i),a.push(C)),C}function b(M){if(--M.usedTimes===0){const w=a.indexOf(M);a[w]=a[a.length-1],a.pop(),M.destroy()}}return{getParameters:m,getProgramCacheKey:_,getUniforms:x,acquireProgram:y,releaseProgram:b,programs:a}}function W4(){let r=new WeakMap;function e(s){let a=r.get(s);return a===void 0&&(a={},r.set(s,a)),a}function t(s){r.delete(s)}function n(s,a,o){r.get(s)[a]=o}function i(){r=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function $4(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.program!==e.program?r.program.id-e.program.id:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function X4(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function pM(r){const e=[];let t=0;const n=[],i=[],s={id:-1};function a(){t=0,n.length=0,i.length=0}function o(d,f,p,v,g,m){let _=e[t];const x=r.get(p);return _===void 0?(_={id:d.id,object:d,geometry:f,material:p,program:x.program||s,groupOrder:v,renderOrder:d.renderOrder,z:g,group:m},e[t]=_):(_.id=d.id,_.object=d,_.geometry=f,_.material=p,_.program=x.program||s,_.groupOrder=v,_.renderOrder=d.renderOrder,_.z=g,_.group=m),t++,_}function l(d,f,p,v,g,m){const _=o(d,f,p,v,g,m);(p.transparent===!0?i:n).push(_)}function c(d,f,p,v,g,m){const _=o(d,f,p,v,g,m);(p.transparent===!0?i:n).unshift(_)}function u(d,f){n.length>1&&n.sort(d||$4),i.length>1&&i.sort(f||X4)}function h(){for(let d=t,f=e.length;d<f;d++){const p=e[d];if(p.id===null)break;p.id=null,p.object=null,p.geometry=null,p.material=null,p.program=null,p.group=null}}return{opaque:n,transparent:i,init:a,push:l,unshift:c,finish:h,sort:u}}function q4(r){let e=new WeakMap;function t(i,s){let a;return e.has(i)===!1?(a=new pM(r),e.set(i,[a])):s>=e.get(i).length?(a=new pM(r),e.get(i).push(a)):a=e.get(i)[s],a}function n(){e=new WeakMap}return{get:t,dispose:n}}function Z4(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new q,color:new yt};break;case"SpotLight":t={position:new q,direction:new q,color:new yt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new q,color:new yt,distance:0,decay:0};break;case"HemisphereLight":t={direction:new q,skyColor:new yt,groundColor:new yt};break;case"RectAreaLight":t={color:new yt,position:new q,halfWidth:new q,halfHeight:new q};break}return r[e.id]=t,t}}}function Y4(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ge};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ge};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ge,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let j4=0;function J4(r,e){return(e.castShadow?1:0)-(r.castShadow?1:0)}function K4(r,e){const t=new Z4,n=Y4(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let u=0;u<9;u++)i.probe.push(new q);const s=new q,a=new Mt,o=new Mt;function l(u){let h=0,d=0,f=0;for(let w=0;w<9;w++)i.probe[w].set(0,0,0);let p=0,v=0,g=0,m=0,_=0,x=0,y=0,b=0;u.sort(J4);for(let w=0,C=u.length;w<C;w++){const T=u[w],S=T.color,R=T.intensity,H=T.distance,D=T.shadow&&T.shadow.map?T.shadow.map.texture:null;if(T.isAmbientLight)h+=S.r*R,d+=S.g*R,f+=S.b*R;else if(T.isLightProbe)for(let O=0;O<9;O++)i.probe[O].addScaledVector(T.sh.coefficients[O],R);else if(T.isDirectionalLight){const O=t.get(T);if(O.color.copy(T.color).multiplyScalar(T.intensity),T.castShadow){const G=T.shadow,P=n.get(T);P.shadowBias=G.bias,P.shadowNormalBias=G.normalBias,P.shadowRadius=G.radius,P.shadowMapSize=G.mapSize,i.directionalShadow[p]=P,i.directionalShadowMap[p]=D,i.directionalShadowMatrix[p]=T.shadow.matrix,x++}i.directional[p]=O,p++}else if(T.isSpotLight){const O=t.get(T);if(O.position.setFromMatrixPosition(T.matrixWorld),O.color.copy(S).multiplyScalar(R),O.distance=H,O.coneCos=Math.cos(T.angle),O.penumbraCos=Math.cos(T.angle*(1-T.penumbra)),O.decay=T.decay,T.castShadow){const G=T.shadow,P=n.get(T);P.shadowBias=G.bias,P.shadowNormalBias=G.normalBias,P.shadowRadius=G.radius,P.shadowMapSize=G.mapSize,i.spotShadow[g]=P,i.spotShadowMap[g]=D,i.spotShadowMatrix[g]=T.shadow.matrix,b++}i.spot[g]=O,g++}else if(T.isRectAreaLight){const O=t.get(T);O.color.copy(S).multiplyScalar(R),O.halfWidth.set(T.width*.5,0,0),O.halfHeight.set(0,T.height*.5,0),i.rectArea[m]=O,m++}else if(T.isPointLight){const O=t.get(T);if(O.color.copy(T.color).multiplyScalar(T.intensity),O.distance=T.distance,O.decay=T.decay,T.castShadow){const G=T.shadow,P=n.get(T);P.shadowBias=G.bias,P.shadowNormalBias=G.normalBias,P.shadowRadius=G.radius,P.shadowMapSize=G.mapSize,P.shadowCameraNear=G.camera.near,P.shadowCameraFar=G.camera.far,i.pointShadow[v]=P,i.pointShadowMap[v]=D,i.pointShadowMatrix[v]=T.shadow.matrix,y++}i.point[v]=O,v++}else if(T.isHemisphereLight){const O=t.get(T);O.skyColor.copy(T.color).multiplyScalar(R),O.groundColor.copy(T.groundColor).multiplyScalar(R),i.hemi[_]=O,_++}}m>0&&(e.isWebGL2||r.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=Ke.LTC_FLOAT_1,i.rectAreaLTC2=Ke.LTC_FLOAT_2):r.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=Ke.LTC_HALF_1,i.rectAreaLTC2=Ke.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=h,i.ambient[1]=d,i.ambient[2]=f;const M=i.hash;(M.directionalLength!==p||M.pointLength!==v||M.spotLength!==g||M.rectAreaLength!==m||M.hemiLength!==_||M.numDirectionalShadows!==x||M.numPointShadows!==y||M.numSpotShadows!==b)&&(i.directional.length=p,i.spot.length=g,i.rectArea.length=m,i.point.length=v,i.hemi.length=_,i.directionalShadow.length=x,i.directionalShadowMap.length=x,i.pointShadow.length=y,i.pointShadowMap.length=y,i.spotShadow.length=b,i.spotShadowMap.length=b,i.directionalShadowMatrix.length=x,i.pointShadowMatrix.length=y,i.spotShadowMatrix.length=b,M.directionalLength=p,M.pointLength=v,M.spotLength=g,M.rectAreaLength=m,M.hemiLength=_,M.numDirectionalShadows=x,M.numPointShadows=y,M.numSpotShadows=b,i.version=j4++)}function c(u,h){let d=0,f=0,p=0,v=0,g=0;const m=h.matrixWorldInverse;for(let _=0,x=u.length;_<x;_++){const y=u[_];if(y.isDirectionalLight){const b=i.directional[d];b.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),b.direction.sub(s),b.direction.transformDirection(m),d++}else if(y.isSpotLight){const b=i.spot[p];b.position.setFromMatrixPosition(y.matrixWorld),b.position.applyMatrix4(m),b.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),b.direction.sub(s),b.direction.transformDirection(m),p++}else if(y.isRectAreaLight){const b=i.rectArea[v];b.position.setFromMatrixPosition(y.matrixWorld),b.position.applyMatrix4(m),o.identity(),a.copy(y.matrixWorld),a.premultiply(m),o.extractRotation(a),b.halfWidth.set(y.width*.5,0,0),b.halfHeight.set(0,y.height*.5,0),b.halfWidth.applyMatrix4(o),b.halfHeight.applyMatrix4(o),v++}else if(y.isPointLight){const b=i.point[f];b.position.setFromMatrixPosition(y.matrixWorld),b.position.applyMatrix4(m),f++}else if(y.isHemisphereLight){const b=i.hemi[g];b.direction.setFromMatrixPosition(y.matrixWorld),b.direction.transformDirection(m),b.direction.normalize(),g++}}}return{setup:l,setupView:c,state:i}}function mM(r,e){const t=new K4(r,e),n=[],i=[];function s(){n.length=0,i.length=0}function a(h){n.push(h)}function o(h){i.push(h)}function l(){t.setup(n)}function c(h){t.setupView(n,h)}return{init:s,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:l,setupLightsView:c,pushLight:a,pushShadow:o}}function Q4(r,e){let t=new WeakMap;function n(s,a=0){let o;return t.has(s)===!1?(o=new mM(r,e),t.set(s,[o])):a>=t.get(s).length?(o=new mM(r,e),t.get(s).push(o)):o=t.get(s)[a],o}function i(){t=new WeakMap}return{get:n,dispose:i}}class hw extends ei{constructor(e){super(),this.type="MeshDepthMaterial",this.depthPacking=RU,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}hw.prototype.isMeshDepthMaterial=!0;class dw extends ei{constructor(e){super(),this.type="MeshDistanceMaterial",this.referencePosition=new q,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}dw.prototype.isMeshDistanceMaterial=!0;var eV=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );
	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean * HALF_SAMPLE_RATE;
	squared_mean = squared_mean * HALF_SAMPLE_RATE;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`,tV=`void main() {
	gl_Position = vec4( position, 1.0 );
}`;function fw(r,e,t){let n=new Qp;const i=new Ge,s=new Ge,a=new cn,o=[],l=[],c={},u=t.maxTextureSize,h={0:Jn,1:Yp,2:jp},d=new po({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Ge},radius:{value:4}},vertexShader:tV,fragmentShader:eV}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new mn;p.setAttribute("position",new Kn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new Br(p,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=H1,this.render=function(M,w,C){if(g.enabled===!1||g.autoUpdate===!1&&g.needsUpdate===!1||M.length===0)return;const T=r.getRenderTarget(),S=r.getActiveCubeFace(),R=r.getActiveMipmapLevel(),H=r.state;H.setBlending(su),H.buffers.color.setClear(1,1,1,1),H.buffers.depth.setTest(!0),H.setScissorTest(!1);for(let D=0,O=M.length;D<O;D++){const G=M[D],P=G.shadow;if(P===void 0){console.warn("THREE.WebGLShadowMap:",G,"has no shadow.");continue}if(P.autoUpdate===!1&&P.needsUpdate===!1)continue;i.copy(P.mapSize);const z=P.getFrameExtents();if(i.multiply(z),s.copy(P.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(s.x=Math.floor(u/z.x),i.x=s.x*z.x,P.mapSize.x=s.x),i.y>u&&(s.y=Math.floor(u/z.y),i.y=s.y*z.y,P.mapSize.y=s.y)),P.map===null&&!P.isPointLightShadow&&this.type===kc){const X={minFilter:gr,magFilter:gr,format:Fr};P.map=new io(i.x,i.y,X),P.map.texture.name=G.name+".shadowMap",P.mapPass=new io(i.x,i.y,X),P.camera.updateProjectionMatrix()}if(P.map===null){const X={minFilter:Ci,magFilter:Ci,format:Fr};P.map=new io(i.x,i.y,X),P.map.texture.name=G.name+".shadowMap",P.camera.updateProjectionMatrix()}r.setRenderTarget(P.map),r.clear();const W=P.getViewportCount();for(let X=0;X<W;X++){const re=P.getViewport(X);a.set(s.x*re.x,s.y*re.y,s.x*re.z,s.y*re.w),H.viewport(a),P.updateMatrices(G,X),n=P.getFrustum(),b(w,C,P.camera,G,this.type)}!P.isPointLightShadow&&this.type===kc&&m(P,C),P.needsUpdate=!1}g.needsUpdate=!1,r.setRenderTarget(T,S,R)};function m(M,w){const C=e.update(v);d.uniforms.shadow_pass.value=M.map.texture,d.uniforms.resolution.value=M.mapSize,d.uniforms.radius.value=M.radius,r.setRenderTarget(M.mapPass),r.clear(),r.renderBufferDirect(w,null,C,d,v,null),f.uniforms.shadow_pass.value=M.mapPass.texture,f.uniforms.resolution.value=M.mapSize,f.uniforms.radius.value=M.radius,r.setRenderTarget(M.map),r.clear(),r.renderBufferDirect(w,null,C,f,v,null)}function _(M,w,C){const T=M<<0|w<<1|C<<2;let S=o[T];return S===void 0&&(S=new hw({depthPacking:LU,morphTargets:M,skinning:w}),o[T]=S),S}function x(M,w,C){const T=M<<0|w<<1|C<<2;let S=l[T];return S===void 0&&(S=new dw({morphTargets:M,skinning:w}),l[T]=S),S}function y(M,w,C,T,S,R,H){let D=null,O=_,G=M.customDepthMaterial;if(T.isPointLight===!0&&(O=x,G=M.customDistanceMaterial),G===void 0){let P=!1;C.morphTargets===!0&&(P=w.morphAttributes&&w.morphAttributes.position&&w.morphAttributes.position.length>0);let z=!1;M.isSkinnedMesh===!0&&(C.skinning===!0?z=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",M));const W=M.isInstancedMesh===!0;D=O(P,z,W)}else D=G;if(r.localClippingEnabled&&C.clipShadows===!0&&C.clippingPlanes.length!==0){const P=D.uuid,z=C.uuid;let W=c[P];W===void 0&&(W={},c[P]=W);let X=W[z];X===void 0&&(X=D.clone(),W[z]=X),D=X}return D.visible=C.visible,D.wireframe=C.wireframe,H===kc?D.side=C.shadowSide!==null?C.shadowSide:C.side:D.side=C.shadowSide!==null?C.shadowSide:h[C.side],D.clipShadows=C.clipShadows,D.clippingPlanes=C.clippingPlanes,D.clipIntersection=C.clipIntersection,D.wireframeLinewidth=C.wireframeLinewidth,D.linewidth=C.linewidth,T.isPointLight===!0&&D.isMeshDistanceMaterial===!0&&(D.referencePosition.setFromMatrixPosition(T.matrixWorld),D.nearDistance=S,D.farDistance=R),D}function b(M,w,C,T,S){if(M.visible===!1)return;if(M.layers.test(w.layers)&&(M.isMesh||M.isLine||M.isPoints)&&(M.castShadow||M.receiveShadow&&S===kc)&&(!M.frustumCulled||n.intersectsObject(M))){M.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,M.matrixWorld);const D=e.update(M),O=M.material;if(Array.isArray(O)){const G=D.groups;for(let P=0,z=G.length;P<z;P++){const W=G[P],X=O[W.materialIndex];if(X&&X.visible){const re=y(M,D,X,T,C.near,C.far,S);r.renderBufferDirect(C,null,D,re,M,W)}}}else if(O.visible){const G=y(M,D,O,T,C.near,C.far,S);r.renderBufferDirect(C,null,D,G,M,null)}}const H=M.children;for(let D=0,O=H.length;D<O;D++)b(H[D],w,C,T,S)}}function nV(r,e,t){const n=t.isWebGL2;function i(){let V=!1;const Y=new cn;let se=null;const le=new cn(0,0,0,0);return{setMask:function(ce){se!==ce&&!V&&(r.colorMask(ce,ce,ce,ce),se=ce)},setLocked:function(ce){V=ce},setClear:function(ce,Ie,Se,De,nt){nt===!0&&(ce*=De,Ie*=De,Se*=De),Y.set(ce,Ie,Se,De),le.equals(Y)===!1&&(r.clearColor(ce,Ie,Se,De),le.copy(Y))},reset:function(){V=!1,se=null,le.set(-1,0,0,0)}}}function s(){let V=!1,Y=null,se=null,le=null;return{setTest:function(ce){ce?be(2929):_e(2929)},setMask:function(ce){Y!==ce&&!V&&(r.depthMask(ce),Y=ce)},setFunc:function(ce){if(se!==ce){if(ce)switch(ce){case fO:r.depthFunc(512);break;case pO:r.depthFunc(519);break;case mO:r.depthFunc(513);break;case vv:r.depthFunc(515);break;case gO:r.depthFunc(514);break;case vO:r.depthFunc(518);break;case _O:r.depthFunc(516);break;case yO:r.depthFunc(517);break;default:r.depthFunc(515)}else r.depthFunc(515);se=ce}},setLocked:function(ce){V=ce},setClear:function(ce){le!==ce&&(r.clearDepth(ce),le=ce)},reset:function(){V=!1,Y=null,se=null,le=null}}}function a(){let V=!1,Y=null,se=null,le=null,ce=null,Ie=null,Se=null,De=null,nt=null;return{setTest:function(Je){V||(Je?be(2960):_e(2960))},setMask:function(Je){Y!==Je&&!V&&(r.stencilMask(Je),Y=Je)},setFunc:function(Je,ke,ot){(se!==Je||le!==ke||ce!==ot)&&(r.stencilFunc(Je,ke,ot),se=Je,le=ke,ce=ot)},setOp:function(Je,ke,ot){(Ie!==Je||Se!==ke||De!==ot)&&(r.stencilOp(Je,ke,ot),Ie=Je,Se=ke,De=ot)},setLocked:function(Je){V=Je},setClear:function(Je){nt!==Je&&(r.clearStencil(Je),nt=Je)},reset:function(){V=!1,Y=null,se=null,le=null,ce=null,Ie=null,Se=null,De=null,nt=null}}}const o=new i,l=new s,c=new a;let u={},h=null,d={},f=null,p=!1,v=null,g=null,m=null,_=null,x=null,y=null,b=null,M=!1,w=null,C=null,T=null,S=null,R=null;const H=r.getParameter(35661);let D=!1,O=0;const G=r.getParameter(7938);G.indexOf("WebGL")!==-1?(O=parseFloat(/^WebGL (\d)/.exec(G)[1]),D=O>=1):G.indexOf("OpenGL ES")!==-1&&(O=parseFloat(/^OpenGL ES (\d)/.exec(G)[1]),D=O>=2);let P=null,z={};const W=new cn(0,0,r.canvas.width,r.canvas.height),X=new cn(0,0,r.canvas.width,r.canvas.height);function re(V,Y,se){const le=new Uint8Array(4),ce=r.createTexture();r.bindTexture(V,ce),r.texParameteri(V,10241,9728),r.texParameteri(V,10240,9728);for(let Ie=0;Ie<se;Ie++)r.texImage2D(Y+Ie,0,6408,1,1,0,6408,5121,le);return ce}const ne={};ne[3553]=re(3553,3553,1),ne[34067]=re(34067,34069,6),o.setClear(0,0,0,1),l.setClear(1),c.setClear(0),be(2929),l.setFunc(vv),Ue(!1),xe(Sx),be(2884),Ce(su);function be(V){u[V]!==!0&&(r.enable(V),u[V]=!0)}function _e(V){u[V]!==!1&&(r.disable(V),u[V]=!1)}function $(V){V!==h&&(r.bindFramebuffer(36160,V),h=V)}function K(V,Y){Y===null&&h!==null&&(Y=h),d[V]!==Y&&(r.bindFramebuffer(V,Y),d[V]=Y,n&&(V===36009&&(d[36160]=Y),V===36160&&(d[36009]=Y)))}function ge(V){return f!==V?(r.useProgram(V),f=V,!0):!1}const J={[fl]:32774,[nO]:32778,[iO]:32779};if(n)J[Ax]=32775,J[Cx]=32776;else{const V=e.get("EXT_blend_minmax");V!==null&&(J[Ax]=V.MIN_EXT,J[Cx]=V.MAX_EXT)}const ue={[rO]:0,[sO]:1,[aO]:768,[W1]:770,[dO]:776,[uO]:774,[lO]:772,[oO]:769,[$1]:771,[hO]:775,[cO]:773};function Ce(V,Y,se,le,ce,Ie,Se,De){if(V===su){p===!0&&(_e(3042),p=!1);return}if(p===!1&&(be(3042),p=!0),V!==tO){if(V!==v||De!==M){if((g!==fl||x!==fl)&&(r.blendEquation(32774),g=fl,x=fl),De)switch(V){case au:r.blendFuncSeparate(1,771,1,771);break;case wx:r.blendFunc(1,1);break;case Tx:r.blendFuncSeparate(0,0,769,771);break;case Ex:r.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",V);break}else switch(V){case au:r.blendFuncSeparate(770,771,1,771);break;case wx:r.blendFunc(770,1);break;case Tx:r.blendFunc(0,769);break;case Ex:r.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",V);break}m=null,_=null,y=null,b=null,v=V,M=De}return}ce=ce||Y,Ie=Ie||se,Se=Se||le,(Y!==g||ce!==x)&&(r.blendEquationSeparate(J[Y],J[ce]),g=Y,x=ce),(se!==m||le!==_||Ie!==y||Se!==b)&&(r.blendFuncSeparate(ue[se],ue[le],ue[Ie],ue[Se]),m=se,_=le,y=Ie,b=Se),v=V,M=null}function Ee(V,Y){V.side===jp?_e(2884):be(2884);let se=V.side===Jn;Y&&(se=!se),Ue(se),V.blending===au&&V.transparent===!1?Ce(su):Ce(V.blending,V.blendEquation,V.blendSrc,V.blendDst,V.blendEquationAlpha,V.blendSrcAlpha,V.blendDstAlpha,V.premultipliedAlpha),l.setFunc(V.depthFunc),l.setTest(V.depthTest),l.setMask(V.depthWrite),o.setMask(V.colorWrite);const le=V.stencilWrite;c.setTest(le),le&&(c.setMask(V.stencilWriteMask),c.setFunc(V.stencilFunc,V.stencilRef,V.stencilFuncMask),c.setOp(V.stencilFail,V.stencilZFail,V.stencilZPass)),N(V.polygonOffset,V.polygonOffsetFactor,V.polygonOffsetUnits),V.alphaToCoverage===!0?be(32926):_e(32926)}function Ue(V){w!==V&&(V?r.frontFace(2304):r.frontFace(2305),w=V)}function xe(V){V!==KF?(be(2884),V!==C&&(V===Sx?r.cullFace(1029):V===QF?r.cullFace(1028):r.cullFace(1032))):_e(2884),C=V}function ye(V){V!==T&&(D&&r.lineWidth(V),T=V)}function N(V,Y,se){V?(be(32823),(S!==Y||R!==se)&&(r.polygonOffset(Y,se),S=Y,R=se)):_e(32823)}function pe(V){V?be(3089):_e(3089)}function ie(V){V===void 0&&(V=33984+H-1),P!==V&&(r.activeTexture(V),P=V)}function F(V,Y){P===null&&ie();let se=z[P];se===void 0&&(se={type:void 0,texture:void 0},z[P]=se),(se.type!==V||se.texture!==Y)&&(r.bindTexture(V,Y||ne[V]),se.type=V,se.texture=Y)}function I(){const V=z[P];V!==void 0&&V.type!==void 0&&(r.bindTexture(V.type,null),V.type=void 0,V.texture=void 0)}function oe(){try{r.compressedTexImage2D.apply(r,arguments)}catch(V){console.error("THREE.WebGLState:",V)}}function j(){try{r.texImage2D.apply(r,arguments)}catch(V){console.error("THREE.WebGLState:",V)}}function L(){try{r.texImage3D.apply(r,arguments)}catch(V){console.error("THREE.WebGLState:",V)}}function A(V){W.equals(V)===!1&&(r.scissor(V.x,V.y,V.z,V.w),W.copy(V))}function Z(V){X.equals(V)===!1&&(r.viewport(V.x,V.y,V.z,V.w),X.copy(V))}function ee(){r.disable(3042),r.disable(2884),r.disable(2929),r.disable(32823),r.disable(3089),r.disable(2960),r.disable(32926),r.blendEquation(32774),r.blendFunc(1,0),r.blendFuncSeparate(1,0,1,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(513),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(519,0,4294967295),r.stencilOp(7680,7680,7680),r.clearStencil(0),r.cullFace(1029),r.frontFace(2305),r.polygonOffset(0,0),r.activeTexture(33984),r.bindFramebuffer(36160,null),n===!0&&(r.bindFramebuffer(36009,null),r.bindFramebuffer(36008,null)),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),u={},P=null,z={},h=null,d={},f=null,p=!1,v=null,g=null,m=null,_=null,x=null,y=null,b=null,M=!1,w=null,C=null,T=null,S=null,R=null,W.set(0,0,r.canvas.width,r.canvas.height),X.set(0,0,r.canvas.width,r.canvas.height),o.reset(),l.reset(),c.reset()}return{buffers:{color:o,depth:l,stencil:c},enable:be,disable:_e,bindFramebuffer:K,bindXRFramebuffer:$,useProgram:ge,setBlending:Ce,setMaterial:Ee,setFlipSided:Ue,setCullFace:xe,setLineWidth:ye,setPolygonOffset:N,setScissorTest:pe,activeTexture:ie,bindTexture:F,unbindTexture:I,compressedTexImage2D:oe,texImage2D:j,texImage3D:L,scissor:A,viewport:Z,reset:ee}}function iV(r,e,t,n,i,s,a){const o=i.isWebGL2,l=i.maxTextures,c=i.maxCubemapSize,u=i.maxTextureSize,h=i.maxSamples,d=new WeakMap;let f,p=!1;try{p=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(F,I){return p?new OffscreenCanvas(F,I):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function g(F,I,oe,j){let L=1;if((F.width>j||F.height>j)&&(L=j/Math.max(F.width,F.height)),L<1||I===!0)if(typeof HTMLImageElement<"u"&&F instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&F instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&F instanceof ImageBitmap){const A=I?FU:Math.floor,Z=A(L*F.width),ee=A(L*F.height);f===void 0&&(f=v(Z,ee));const V=oe?v(Z,ee):f;return V.width=Z,V.height=ee,V.getContext("2d").drawImage(F,0,0,Z,ee),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+F.width+"x"+F.height+") to ("+Z+"x"+ee+")."),V}else return"data"in F&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+F.width+"x"+F.height+")."),F;return F}function m(F){return Wx(F.width)&&Wx(F.height)}function _(F){return o?!1:F.wrapS!==Ir||F.wrapT!==Ir||F.minFilter!==Ci&&F.minFilter!==gr}function x(F,I){return F.generateMipmaps&&I&&F.minFilter!==Ci&&F.minFilter!==gr}function y(F,I,oe,j){r.generateMipmap(F);const L=n.get(I);L.__maxMipLevel=Math.log2(Math.max(oe,j))}function b(F,I,oe){if(o===!1)return I;if(F!==null){if(r[F]!==void 0)return r[F];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+F+"'")}let j=I;return I===6403&&(oe===5126&&(j=33326),oe===5131&&(j=33325),oe===5121&&(j=33321)),I===6407&&(oe===5126&&(j=34837),oe===5131&&(j=34843),oe===5121&&(j=32849)),I===6408&&(oe===5126&&(j=34836),oe===5131&&(j=34842),oe===5121&&(j=32856)),(j===33325||j===33326||j===34842||j===34836)&&e.get("EXT_color_buffer_float"),j}function M(F){return F===Ci||F===Px||F===Ix?9728:9729}function w(F){const I=F.target;I.removeEventListener("dispose",w),T(I),I.isVideoTexture&&d.delete(I),a.memory.textures--}function C(F){const I=F.target;I.removeEventListener("dispose",C),S(I),a.memory.textures--}function T(F){const I=n.get(F);I.__webglInit!==void 0&&(r.deleteTexture(I.__webglTexture),n.remove(F))}function S(F){const I=F.texture,oe=n.get(F),j=n.get(I);if(F){if(j.__webglTexture!==void 0&&r.deleteTexture(j.__webglTexture),F.depthTexture&&F.depthTexture.dispose(),F.isWebGLCubeRenderTarget)for(let L=0;L<6;L++)r.deleteFramebuffer(oe.__webglFramebuffer[L]),oe.__webglDepthbuffer&&r.deleteRenderbuffer(oe.__webglDepthbuffer[L]);else r.deleteFramebuffer(oe.__webglFramebuffer),oe.__webglDepthbuffer&&r.deleteRenderbuffer(oe.__webglDepthbuffer),oe.__webglMultisampledFramebuffer&&r.deleteFramebuffer(oe.__webglMultisampledFramebuffer),oe.__webglColorRenderbuffer&&r.deleteRenderbuffer(oe.__webglColorRenderbuffer),oe.__webglDepthRenderbuffer&&r.deleteRenderbuffer(oe.__webglDepthRenderbuffer);n.remove(I),n.remove(F)}}let R=0;function H(){R=0}function D(){const F=R;return F>=l&&console.warn("THREE.WebGLTextures: Trying to use "+F+" texture units while this GPU supports only "+l),R+=1,F}function O(F,I){const oe=n.get(F);if(F.isVideoTexture&&xe(F),F.version>0&&oe.__version!==F.version){const j=F.image;if(j===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(j.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{be(oe,F,I);return}}t.activeTexture(33984+I),t.bindTexture(3553,oe.__webglTexture)}function G(F,I){const oe=n.get(F);if(F.version>0&&oe.__version!==F.version){be(oe,F,I);return}t.activeTexture(33984+I),t.bindTexture(35866,oe.__webglTexture)}function P(F,I){const oe=n.get(F);if(F.version>0&&oe.__version!==F.version){be(oe,F,I);return}t.activeTexture(33984+I),t.bindTexture(32879,oe.__webglTexture)}function z(F,I){const oe=n.get(F);if(F.version>0&&oe.__version!==F.version){_e(oe,F,I);return}t.activeTexture(33984+I),t.bindTexture(34067,oe.__webglTexture)}const W={[_v]:10497,[Ir]:33071,[yv]:33648},X={[Ci]:9728,[Px]:9984,[Ix]:9986,[gr]:9729,[AO]:9985,[V_]:9987};function re(F,I,oe){if(oe?(r.texParameteri(F,10242,W[I.wrapS]),r.texParameteri(F,10243,W[I.wrapT]),(F===32879||F===35866)&&r.texParameteri(F,32882,W[I.wrapR]),r.texParameteri(F,10240,X[I.magFilter]),r.texParameteri(F,10241,X[I.minFilter])):(r.texParameteri(F,10242,33071),r.texParameteri(F,10243,33071),(F===32879||F===35866)&&r.texParameteri(F,32882,33071),(I.wrapS!==Ir||I.wrapT!==Ir)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),r.texParameteri(F,10240,M(I.magFilter)),r.texParameteri(F,10241,M(I.minFilter)),I.minFilter!==Ci&&I.minFilter!==gr&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const j=e.get("EXT_texture_filter_anisotropic");if(I.type===ia&&e.has("OES_texture_float_linear")===!1||o===!1&&I.type===zf&&e.has("OES_texture_half_float_linear")===!1)return;(I.anisotropy>1||n.get(I).__currentAnisotropy)&&(r.texParameterf(F,j.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(I.anisotropy,i.getMaxAnisotropy())),n.get(I).__currentAnisotropy=I.anisotropy)}}function ne(F,I){F.__webglInit===void 0&&(F.__webglInit=!0,I.addEventListener("dispose",w),F.__webglTexture=r.createTexture(),a.memory.textures++)}function be(F,I,oe){let j=3553;I.isDataTexture2DArray&&(j=35866),I.isDataTexture3D&&(j=32879),ne(F,I),t.activeTexture(33984+oe),t.bindTexture(j,F.__webglTexture),r.pixelStorei(37440,I.flipY),r.pixelStorei(37441,I.premultiplyAlpha),r.pixelStorei(3317,I.unpackAlignment),r.pixelStorei(37443,0);const L=_(I)&&m(I.image)===!1,A=g(I.image,L,!1,u),Z=m(A)||o,ee=s.convert(I.format);let V=s.convert(I.type),Y=b(I.internalFormat,ee,V);re(j,I,Z);let se;const le=I.mipmaps;if(I.isDepthTexture)Y=6402,o?I.type===ia?Y=36012:I.type===Vd?Y=33190:I.type===lu?Y=35056:Y=33189:I.type===ia&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),I.format===Al&&Y===6402&&I.type!==Bf&&I.type!==Vd&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),I.type=Bf,V=s.convert(I.type)),I.format===Au&&Y===6402&&(Y=34041,I.type!==lu&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),I.type=lu,V=s.convert(I.type))),t.texImage2D(3553,0,Y,A.width,A.height,0,ee,V,null);else if(I.isDataTexture)if(le.length>0&&Z){for(let ce=0,Ie=le.length;ce<Ie;ce++)se=le[ce],t.texImage2D(3553,ce,Y,se.width,se.height,0,ee,V,se.data);I.generateMipmaps=!1,F.__maxMipLevel=le.length-1}else t.texImage2D(3553,0,Y,A.width,A.height,0,ee,V,A.data),F.__maxMipLevel=0;else if(I.isCompressedTexture){for(let ce=0,Ie=le.length;ce<Ie;ce++)se=le[ce],I.format!==Fr&&I.format!==no?ee!==null?t.compressedTexImage2D(3553,ce,Y,se.width,se.height,0,se.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):t.texImage2D(3553,ce,Y,se.width,se.height,0,ee,V,se.data);F.__maxMipLevel=le.length-1}else if(I.isDataTexture2DArray)t.texImage3D(35866,0,Y,A.width,A.height,A.depth,0,ee,V,A.data),F.__maxMipLevel=0;else if(I.isDataTexture3D)t.texImage3D(32879,0,Y,A.width,A.height,A.depth,0,ee,V,A.data),F.__maxMipLevel=0;else if(le.length>0&&Z){for(let ce=0,Ie=le.length;ce<Ie;ce++)se=le[ce],t.texImage2D(3553,ce,Y,ee,V,se);I.generateMipmaps=!1,F.__maxMipLevel=le.length-1}else t.texImage2D(3553,0,Y,ee,V,A),F.__maxMipLevel=0;x(I,Z)&&y(j,I,A.width,A.height),F.__version=I.version,I.onUpdate&&I.onUpdate(I)}function _e(F,I,oe){if(I.image.length!==6)return;ne(F,I),t.activeTexture(33984+oe),t.bindTexture(34067,F.__webglTexture),r.pixelStorei(37440,I.flipY),r.pixelStorei(37441,I.premultiplyAlpha),r.pixelStorei(3317,I.unpackAlignment),r.pixelStorei(37443,0);const j=I&&(I.isCompressedTexture||I.image[0].isCompressedTexture),L=I.image[0]&&I.image[0].isDataTexture,A=[];for(let ce=0;ce<6;ce++)!j&&!L?A[ce]=g(I.image[ce],!1,!0,c):A[ce]=L?I.image[ce].image:I.image[ce];const Z=A[0],ee=m(Z)||o,V=s.convert(I.format),Y=s.convert(I.type),se=b(I.internalFormat,V,Y);re(34067,I,ee);let le;if(j){for(let ce=0;ce<6;ce++){le=A[ce].mipmaps;for(let Ie=0;Ie<le.length;Ie++){const Se=le[Ie];I.format!==Fr&&I.format!==no?V!==null?t.compressedTexImage2D(34069+ce,Ie,se,Se.width,Se.height,0,Se.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):t.texImage2D(34069+ce,Ie,se,Se.width,Se.height,0,V,Y,Se.data)}}F.__maxMipLevel=le.length-1}else{le=I.mipmaps;for(let ce=0;ce<6;ce++)if(L){t.texImage2D(34069+ce,0,se,A[ce].width,A[ce].height,0,V,Y,A[ce].data);for(let Ie=0;Ie<le.length;Ie++){const De=le[Ie].image[ce].image;t.texImage2D(34069+ce,Ie+1,se,De.width,De.height,0,V,Y,De.data)}}else{t.texImage2D(34069+ce,0,se,V,Y,A[ce]);for(let Ie=0;Ie<le.length;Ie++){const Se=le[Ie];t.texImage2D(34069+ce,Ie+1,se,V,Y,Se.image[ce])}}F.__maxMipLevel=le.length}x(I,ee)&&y(34067,I,Z.width,Z.height),F.__version=I.version,I.onUpdate&&I.onUpdate(I)}function $(F,I,oe,j){const L=I.texture,A=s.convert(L.format),Z=s.convert(L.type),ee=b(L.internalFormat,A,Z);j===32879||j===35866?t.texImage3D(j,0,ee,I.width,I.height,I.depth,0,A,Z,null):t.texImage2D(j,0,ee,I.width,I.height,0,A,Z,null),t.bindFramebuffer(36160,F),r.framebufferTexture2D(36160,oe,j,n.get(L).__webglTexture,0),t.bindFramebuffer(36160,null)}function K(F,I,oe){if(r.bindRenderbuffer(36161,F),I.depthBuffer&&!I.stencilBuffer){let j=33189;if(oe){const L=I.depthTexture;L&&L.isDepthTexture&&(L.type===ia?j=36012:L.type===Vd&&(j=33190));const A=Ue(I);r.renderbufferStorageMultisample(36161,A,j,I.width,I.height)}else r.renderbufferStorage(36161,j,I.width,I.height);r.framebufferRenderbuffer(36160,36096,36161,F)}else if(I.depthBuffer&&I.stencilBuffer){if(oe){const j=Ue(I);r.renderbufferStorageMultisample(36161,j,35056,I.width,I.height)}else r.renderbufferStorage(36161,34041,I.width,I.height);r.framebufferRenderbuffer(36160,33306,36161,F)}else{const j=I.texture,L=s.convert(j.format),A=s.convert(j.type),Z=b(j.internalFormat,L,A);if(oe){const ee=Ue(I);r.renderbufferStorageMultisample(36161,ee,Z,I.width,I.height)}else r.renderbufferStorage(36161,Z,I.width,I.height)}r.bindRenderbuffer(36161,null)}function ge(F,I){if(I&&I.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,F),!(I.depthTexture&&I.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(I.depthTexture).__webglTexture||I.depthTexture.image.width!==I.width||I.depthTexture.image.height!==I.height)&&(I.depthTexture.image.width=I.width,I.depthTexture.image.height=I.height,I.depthTexture.needsUpdate=!0),O(I.depthTexture,0);const j=n.get(I.depthTexture).__webglTexture;if(I.depthTexture.format===Al)r.framebufferTexture2D(36160,36096,3553,j,0);else if(I.depthTexture.format===Au)r.framebufferTexture2D(36160,33306,3553,j,0);else throw new Error("Unknown depthTexture format")}function J(F){const I=n.get(F),oe=F.isWebGLCubeRenderTarget===!0;if(F.depthTexture){if(oe)throw new Error("target.depthTexture not supported in Cube render targets");ge(I.__webglFramebuffer,F)}else if(oe){I.__webglDepthbuffer=[];for(let j=0;j<6;j++)t.bindFramebuffer(36160,I.__webglFramebuffer[j]),I.__webglDepthbuffer[j]=r.createRenderbuffer(),K(I.__webglDepthbuffer[j],F,!1)}else t.bindFramebuffer(36160,I.__webglFramebuffer),I.__webglDepthbuffer=r.createRenderbuffer(),K(I.__webglDepthbuffer,F,!1);t.bindFramebuffer(36160,null)}function ue(F){const I=F.texture,oe=n.get(F),j=n.get(I);F.addEventListener("dispose",C),j.__webglTexture=r.createTexture(),j.__version=I.version,a.memory.textures++;const L=F.isWebGLCubeRenderTarget===!0,A=F.isWebGLMultisampleRenderTarget===!0,Z=I.isDataTexture3D||I.isDataTexture2DArray,ee=m(F)||o;if(o&&I.format===no&&(I.type===ia||I.type===zf)&&(I.format=Fr,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),L){oe.__webglFramebuffer=[];for(let V=0;V<6;V++)oe.__webglFramebuffer[V]=r.createFramebuffer()}else if(oe.__webglFramebuffer=r.createFramebuffer(),A)if(o){oe.__webglMultisampledFramebuffer=r.createFramebuffer(),oe.__webglColorRenderbuffer=r.createRenderbuffer(),r.bindRenderbuffer(36161,oe.__webglColorRenderbuffer);const V=s.convert(I.format),Y=s.convert(I.type),se=b(I.internalFormat,V,Y),le=Ue(F);r.renderbufferStorageMultisample(36161,le,se,F.width,F.height),t.bindFramebuffer(36160,oe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(36160,36064,36161,oe.__webglColorRenderbuffer),r.bindRenderbuffer(36161,null),F.depthBuffer&&(oe.__webglDepthRenderbuffer=r.createRenderbuffer(),K(oe.__webglDepthRenderbuffer,F,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(L){t.bindTexture(34067,j.__webglTexture),re(34067,I,ee);for(let V=0;V<6;V++)$(oe.__webglFramebuffer[V],F,36064,34069+V);x(I,ee)&&y(34067,I,F.width,F.height),t.bindTexture(34067,null)}else{let V=3553;Z&&(o?V=I.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),t.bindTexture(V,j.__webglTexture),re(V,I,ee),$(oe.__webglFramebuffer,F,36064,V),x(I,ee)&&y(3553,I,F.width,F.height),t.bindTexture(3553,null)}F.depthBuffer&&J(F)}function Ce(F){const I=F.texture,oe=m(F)||o;if(x(I,oe)){const j=F.isWebGLCubeRenderTarget?34067:3553,L=n.get(I).__webglTexture;t.bindTexture(j,L),y(j,I,F.width,F.height),t.bindTexture(j,null)}}function Ee(F){if(F.isWebGLMultisampleRenderTarget)if(o){const I=F.width,oe=F.height;let j=16384;F.depthBuffer&&(j|=256),F.stencilBuffer&&(j|=1024);const L=n.get(F);t.bindFramebuffer(36008,L.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,L.__webglFramebuffer),r.blitFramebuffer(0,0,I,oe,0,0,I,oe,j,9728),t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,L.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function Ue(F){return o&&F.isWebGLMultisampleRenderTarget?Math.min(h,F.samples):0}function xe(F){const I=a.render.frame;d.get(F)!==I&&(d.set(F,I),F.update())}let ye=!1,N=!1;function pe(F,I){F&&F.isWebGLRenderTarget&&(ye===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),ye=!0),F=F.texture),O(F,I)}function ie(F,I){F&&F.isWebGLCubeRenderTarget&&(N===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),N=!0),F=F.texture),z(F,I)}this.allocateTextureUnit=D,this.resetTextureUnits=H,this.setTexture2D=O,this.setTexture2DArray=G,this.setTexture3D=P,this.setTextureCube=z,this.setupRenderTarget=ue,this.updateRenderTargetMipmap=Ce,this.updateMultisampleRenderTarget=Ee,this.safeSetTexture2D=pe,this.safeSetTextureCube=ie}function rV(r,e,t){const n=t.isWebGL2;function i(s){let a;if(s===H_)return 5121;if(s===PO)return 32819;if(s===IO)return 32820;if(s===DO)return 33635;if(s===CO)return 5120;if(s===RO)return 5122;if(s===Bf)return 5123;if(s===LO)return 5124;if(s===Vd)return 5125;if(s===ia)return 5126;if(s===zf)return n?5131:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(s===NO)return 6406;if(s===no)return 6407;if(s===Fr)return 6408;if(s===FO)return 6409;if(s===OO)return 6410;if(s===Al)return 6402;if(s===Au)return 34041;if(s===UO)return 6403;if(s===BO)return 36244;if(s===zO)return 33319;if(s===kO)return 33320;if(s===VO)return 36248;if(s===HO)return 36249;if(s===Dx||s===Nx||s===Fx||s===Ox)if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(s===Dx)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===Nx)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===Fx)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===Ox)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===Ux||s===Bx||s===zx||s===kx)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(s===Ux)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===Bx)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===zx)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===kx)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===GO)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if((s===Vx||s===Hx)&&(a=e.get("WEBGL_compressed_texture_etc"),a!==null)){if(s===Vx)return a.COMPRESSED_RGB8_ETC2;if(s===Hx)return a.COMPRESSED_RGBA8_ETC2_EAC}if(s===WO||s===$O||s===XO||s===qO||s===ZO||s===YO||s===jO||s===JO||s===KO||s===QO||s===eU||s===tU||s===nU||s===iU||s===sU||s===aU||s===oU||s===lU||s===cU||s===uU||s===hU||s===dU||s===fU||s===pU||s===mU||s===gU||s===vU||s===_U)return a=e.get("WEBGL_compressed_texture_astc"),a!==null?s:null;if(s===rU)return a=e.get("EXT_texture_compression_bptc"),a!==null?s:null;if(s===lu)return n?34042:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:i}}class pw extends Ji{constructor(e=[]){super(),this.cameras=e}}pw.prototype.isArrayCamera=!0;class Hc extends rn{constructor(){super(),this.type="Group"}}Hc.prototype.isGroup=!0;const sV={type:"move"};class Dg{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Hc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Hc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new q,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new q),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Hc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new q,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new q),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,a=null;const o=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred")if(o!==null&&(i=t.getPose(e.targetRaySpace,n),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(sV))),c&&e.hand){a=!0;for(const v of e.hand.values()){const g=t.getJointPose(v,n);if(c.joints[v.jointName]===void 0){const _=new Hc;_.matrixAutoUpdate=!1,_.visible=!1,c.joints[v.jointName]=_,c.add(_)}const m=c.joints[v.jointName];g!==null&&(m.matrix.fromArray(g.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.jointRadius=g.radius),m.visible=g!==null}const u=c.joints["index-finger-tip"],h=c.joints["thumb-tip"],d=u.position.distanceTo(h.position),f=.02,p=.005;c.inputState.pinching&&d>f+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&d<=f-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));return o!==null&&(o.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=a!==null),this}}class aV extends So{constructor(e,t){super();const n=this,i=e.state;let s=null,a=1,o=null,l="local-floor",c=null;const u=[],h=new Map,d=new Ji;d.layers.enable(1),d.viewport=new cn;const f=new Ji;f.layers.enable(2),f.viewport=new cn;const p=[d,f],v=new pw;v.layers.enable(1),v.layers.enable(2);let g=null,m=null;this.enabled=!1,this.isPresenting=!1,this.getController=function(H){let D=u[H];return D===void 0&&(D=new Dg,u[H]=D),D.getTargetRaySpace()},this.getControllerGrip=function(H){let D=u[H];return D===void 0&&(D=new Dg,u[H]=D),D.getGripSpace()},this.getHand=function(H){let D=u[H];return D===void 0&&(D=new Dg,u[H]=D),D.getHandSpace()};function _(H){const D=h.get(H.inputSource);D&&D.dispatchEvent({type:H.type,data:H.inputSource})}function x(){h.forEach(function(H,D){H.disconnect(D)}),h.clear(),g=null,m=null,i.bindXRFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),R.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(H){a=H,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(H){l=H,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return o},this.getSession=function(){return s},this.setSession=async function(H){if(s=H,s!==null){s.addEventListener("select",_),s.addEventListener("selectstart",_),s.addEventListener("selectend",_),s.addEventListener("squeeze",_),s.addEventListener("squeezestart",_),s.addEventListener("squeezeend",_),s.addEventListener("end",x),s.addEventListener("inputsourceschange",y);const D=t.getContextAttributes();D.xrCompatible!==!0&&await t.makeXRCompatible();const O={antialias:D.antialias,alpha:D.alpha,depth:D.depth,stencil:D.stencil,framebufferScaleFactor:a},G=new XRWebGLLayer(s,t,O);s.updateRenderState({baseLayer:G}),o=await s.requestReferenceSpace(l),R.setContext(s),R.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function y(H){const D=s.inputSources;for(let O=0;O<u.length;O++)h.set(D[O],u[O]);for(let O=0;O<H.removed.length;O++){const G=H.removed[O],P=h.get(G);P&&(P.dispatchEvent({type:"disconnected",data:G}),h.delete(G))}for(let O=0;O<H.added.length;O++){const G=H.added[O],P=h.get(G);P&&P.dispatchEvent({type:"connected",data:G})}}const b=new q,M=new q;function w(H,D,O){b.setFromMatrixPosition(D.matrixWorld),M.setFromMatrixPosition(O.matrixWorld);const G=b.distanceTo(M),P=D.projectionMatrix.elements,z=O.projectionMatrix.elements,W=P[14]/(P[10]-1),X=P[14]/(P[10]+1),re=(P[9]+1)/P[5],ne=(P[9]-1)/P[5],be=(P[8]-1)/P[0],_e=(z[8]+1)/z[0],$=W*be,K=W*_e,ge=G/(-be+_e),J=ge*-be;D.matrixWorld.decompose(H.position,H.quaternion,H.scale),H.translateX(J),H.translateZ(ge),H.matrixWorld.compose(H.position,H.quaternion,H.scale),H.matrixWorldInverse.copy(H.matrixWorld).invert();const ue=W+ge,Ce=X+ge,Ee=$-J,Ue=K+(G-J),xe=re*X/Ce*ue,ye=ne*X/Ce*ue;H.projectionMatrix.makePerspective(Ee,Ue,xe,ye,ue,Ce)}function C(H,D){D===null?H.matrixWorld.copy(H.matrix):H.matrixWorld.multiplyMatrices(D.matrixWorld,H.matrix),H.matrixWorldInverse.copy(H.matrixWorld).invert()}this.getCamera=function(H){v.near=f.near=d.near=H.near,v.far=f.far=d.far=H.far,(g!==v.near||m!==v.far)&&(s.updateRenderState({depthNear:v.near,depthFar:v.far}),g=v.near,m=v.far);const D=H.parent,O=v.cameras;C(v,D);for(let P=0;P<O.length;P++)C(O[P],D);H.matrixWorld.copy(v.matrixWorld),H.matrix.copy(v.matrix),H.matrix.decompose(H.position,H.quaternion,H.scale);const G=H.children;for(let P=0,z=G.length;P<z;P++)G[P].updateMatrixWorld(!0);return O.length===2?w(v,d,f):v.projectionMatrix.copy(d.projectionMatrix),v};let T=null;function S(H,D){if(c=D.getViewerPose(o),c!==null){const G=c.views,P=s.renderState.baseLayer;i.bindXRFramebuffer(P.framebuffer);let z=!1;G.length!==v.cameras.length&&(v.cameras.length=0,z=!0);for(let W=0;W<G.length;W++){const X=G[W],re=P.getViewport(X),ne=p[W];ne.matrix.fromArray(X.transform.matrix),ne.projectionMatrix.fromArray(X.projectionMatrix),ne.viewport.set(re.x,re.y,re.width,re.height),W===0&&v.matrix.copy(ne.matrix),z===!0&&v.cameras.push(ne)}}const O=s.inputSources;for(let G=0;G<u.length;G++){const P=u[G],z=O[G];P.update(z,D,o)}T&&T(H,D)}const R=new tw;R.setAnimationLoop(S),this.setAnimationLoop=function(H){T=H},this.dispose=function(){}}}function oV(r){function e(m,_){m.fogColor.value.copy(_.color),_.isFog?(m.fogNear.value=_.near,m.fogFar.value=_.far):_.isFogExp2&&(m.fogDensity.value=_.density)}function t(m,_,x,y){_.isMeshBasicMaterial?n(m,_):_.isMeshLambertMaterial?(n(m,_),l(m,_)):_.isMeshToonMaterial?(n(m,_),u(m,_)):_.isMeshPhongMaterial?(n(m,_),c(m,_)):_.isMeshStandardMaterial?(n(m,_),_.isMeshPhysicalMaterial?d(m,_):h(m,_)):_.isMeshMatcapMaterial?(n(m,_),f(m,_)):_.isMeshDepthMaterial?(n(m,_),p(m,_)):_.isMeshDistanceMaterial?(n(m,_),v(m,_)):_.isMeshNormalMaterial?(n(m,_),g(m,_)):_.isLineBasicMaterial?(i(m,_),_.isLineDashedMaterial&&s(m,_)):_.isPointsMaterial?a(m,_,x,y):_.isSpriteMaterial?o(m,_):_.isShadowMaterial?(m.color.value.copy(_.color),m.opacity.value=_.opacity):_.isShaderMaterial&&(_.uniformsNeedUpdate=!1)}function n(m,_){m.opacity.value=_.opacity,_.color&&m.diffuse.value.copy(_.color),_.emissive&&m.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity),_.map&&(m.map.value=_.map),_.alphaMap&&(m.alphaMap.value=_.alphaMap),_.specularMap&&(m.specularMap.value=_.specularMap);const x=r.get(_).envMap;if(x){m.envMap.value=x,m.flipEnvMap.value=x.isCubeTexture&&x._needsFlipEnvMap?-1:1,m.reflectivity.value=_.reflectivity,m.refractionRatio.value=_.refractionRatio;const M=r.get(x).__maxMipLevel;M!==void 0&&(m.maxMipLevel.value=M)}_.lightMap&&(m.lightMap.value=_.lightMap,m.lightMapIntensity.value=_.lightMapIntensity),_.aoMap&&(m.aoMap.value=_.aoMap,m.aoMapIntensity.value=_.aoMapIntensity);let y;_.map?y=_.map:_.specularMap?y=_.specularMap:_.displacementMap?y=_.displacementMap:_.normalMap?y=_.normalMap:_.bumpMap?y=_.bumpMap:_.roughnessMap?y=_.roughnessMap:_.metalnessMap?y=_.metalnessMap:_.alphaMap?y=_.alphaMap:_.emissiveMap?y=_.emissiveMap:_.clearcoatMap?y=_.clearcoatMap:_.clearcoatNormalMap?y=_.clearcoatNormalMap:_.clearcoatRoughnessMap&&(y=_.clearcoatRoughnessMap),y!==void 0&&(y.isWebGLRenderTarget&&(y=y.texture),y.matrixAutoUpdate===!0&&y.updateMatrix(),m.uvTransform.value.copy(y.matrix));let b;_.aoMap?b=_.aoMap:_.lightMap&&(b=_.lightMap),b!==void 0&&(b.isWebGLRenderTarget&&(b=b.texture),b.matrixAutoUpdate===!0&&b.updateMatrix(),m.uv2Transform.value.copy(b.matrix))}function i(m,_){m.diffuse.value.copy(_.color),m.opacity.value=_.opacity}function s(m,_){m.dashSize.value=_.dashSize,m.totalSize.value=_.dashSize+_.gapSize,m.scale.value=_.scale}function a(m,_,x,y){m.diffuse.value.copy(_.color),m.opacity.value=_.opacity,m.size.value=_.size*x,m.scale.value=y*.5,_.map&&(m.map.value=_.map),_.alphaMap&&(m.alphaMap.value=_.alphaMap);let b;_.map?b=_.map:_.alphaMap&&(b=_.alphaMap),b!==void 0&&(b.matrixAutoUpdate===!0&&b.updateMatrix(),m.uvTransform.value.copy(b.matrix))}function o(m,_){m.diffuse.value.copy(_.color),m.opacity.value=_.opacity,m.rotation.value=_.rotation,_.map&&(m.map.value=_.map),_.alphaMap&&(m.alphaMap.value=_.alphaMap);let x;_.map?x=_.map:_.alphaMap&&(x=_.alphaMap),x!==void 0&&(x.matrixAutoUpdate===!0&&x.updateMatrix(),m.uvTransform.value.copy(x.matrix))}function l(m,_){_.emissiveMap&&(m.emissiveMap.value=_.emissiveMap)}function c(m,_){m.specular.value.copy(_.specular),m.shininess.value=Math.max(_.shininess,1e-4),_.emissiveMap&&(m.emissiveMap.value=_.emissiveMap),_.bumpMap&&(m.bumpMap.value=_.bumpMap,m.bumpScale.value=_.bumpScale,_.side===Jn&&(m.bumpScale.value*=-1)),_.normalMap&&(m.normalMap.value=_.normalMap,m.normalScale.value.copy(_.normalScale),_.side===Jn&&m.normalScale.value.negate()),_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias)}function u(m,_){_.gradientMap&&(m.gradientMap.value=_.gradientMap),_.emissiveMap&&(m.emissiveMap.value=_.emissiveMap),_.bumpMap&&(m.bumpMap.value=_.bumpMap,m.bumpScale.value=_.bumpScale,_.side===Jn&&(m.bumpScale.value*=-1)),_.normalMap&&(m.normalMap.value=_.normalMap,m.normalScale.value.copy(_.normalScale),_.side===Jn&&m.normalScale.value.negate()),_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias)}function h(m,_){m.roughness.value=_.roughness,m.metalness.value=_.metalness,_.roughnessMap&&(m.roughnessMap.value=_.roughnessMap),_.metalnessMap&&(m.metalnessMap.value=_.metalnessMap),_.emissiveMap&&(m.emissiveMap.value=_.emissiveMap),_.bumpMap&&(m.bumpMap.value=_.bumpMap,m.bumpScale.value=_.bumpScale,_.side===Jn&&(m.bumpScale.value*=-1)),_.normalMap&&(m.normalMap.value=_.normalMap,m.normalScale.value.copy(_.normalScale),_.side===Jn&&m.normalScale.value.negate()),_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias),r.get(_).envMap&&(m.envMapIntensity.value=_.envMapIntensity)}function d(m,_){h(m,_),m.reflectivity.value=_.reflectivity,m.clearcoat.value=_.clearcoat,m.clearcoatRoughness.value=_.clearcoatRoughness,_.sheen&&m.sheen.value.copy(_.sheen),_.clearcoatMap&&(m.clearcoatMap.value=_.clearcoatMap),_.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=_.clearcoatRoughnessMap),_.clearcoatNormalMap&&(m.clearcoatNormalScale.value.copy(_.clearcoatNormalScale),m.clearcoatNormalMap.value=_.clearcoatNormalMap,_.side===Jn&&m.clearcoatNormalScale.value.negate()),m.transmission.value=_.transmission,_.transmissionMap&&(m.transmissionMap.value=_.transmissionMap)}function f(m,_){_.matcap&&(m.matcap.value=_.matcap),_.bumpMap&&(m.bumpMap.value=_.bumpMap,m.bumpScale.value=_.bumpScale,_.side===Jn&&(m.bumpScale.value*=-1)),_.normalMap&&(m.normalMap.value=_.normalMap,m.normalScale.value.copy(_.normalScale),_.side===Jn&&m.normalScale.value.negate()),_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias)}function p(m,_){_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias)}function v(m,_){_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias),m.referencePosition.value.copy(_.referencePosition),m.nearDistance.value=_.nearDistance,m.farDistance.value=_.farDistance}function g(m,_){_.bumpMap&&(m.bumpMap.value=_.bumpMap,m.bumpScale.value=_.bumpScale,_.side===Jn&&(m.bumpScale.value*=-1)),_.normalMap&&(m.normalMap.value=_.normalMap,m.normalScale.value.copy(_.normalScale),_.side===Jn&&m.normalScale.value.negate()),_.displacementMap&&(m.displacementMap.value=_.displacementMap,m.displacementScale.value=_.displacementScale,m.displacementBias.value=_.displacementBias)}return{refreshFogUniforms:e,refreshMaterialUniforms:t}}function lV(){const r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return r.style.display="block",r}function hn(r){r=r||{};const e=r.canvas!==void 0?r.canvas:lV(),t=r.context!==void 0?r.context:null,n=r.alpha!==void 0?r.alpha:!1,i=r.depth!==void 0?r.depth:!0,s=r.stencil!==void 0?r.stencil:!0,a=r.antialias!==void 0?r.antialias:!1,o=r.premultipliedAlpha!==void 0?r.premultipliedAlpha:!0,l=r.preserveDrawingBuffer!==void 0?r.preserveDrawingBuffer:!1,c=r.powerPreference!==void 0?r.powerPreference:"default",u=r.failIfMajorPerformanceCaveat!==void 0?r.failIfMajorPerformanceCaveat:!1;let h=null,d=null;const f=[],p=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=rh,this.physicallyCorrectLights=!1,this.toneMapping=ou,this.toneMappingExposure=1;const v=this;let g=!1,m=0,_=0,x=null,y=-1,b=null;const M=new cn,w=new cn;let C=null,T=e.width,S=e.height,R=1,H=null,D=null;const O=new cn(0,0,T,S),G=new cn(0,0,T,S);let P=!1;const z=new Qp;let W=!1,X=!1;const re=new Mt,ne=new q,be={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function _e(){return x===null?R:1}let $=t;function K(U,ae){for(let fe=0;fe<U.length;fe++){const de=U[fe],Ae=e.getContext(de,ae);if(Ae!==null)return Ae}return null}try{const U={alpha:n,depth:i,stencil:s,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:u};if(e.addEventListener("webglcontextlost",Ie,!1),e.addEventListener("webglcontextrestored",Se,!1),$===null){const ae=["webgl2","webgl","experimental-webgl"];if(v.isWebGL1Renderer===!0&&ae.shift(),$=K(ae,U),$===null)throw K(ae)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}$.getShaderPrecisionFormat===void 0&&($.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(U){throw console.error("THREE.WebGLRenderer: "+U.message),U}let ge,J,ue,Ce,Ee,Ue,xe,ye,N,pe,ie,F,I,oe,j,L,A,Z,ee,V,Y,se;function le(){ge=new Lk($),J=new Ak($,ge,r),ge.init(J),Y=new rV($,ge,J),ue=new nV($,ge,J),Ce=new Dk,Ee=new W4,Ue=new iV($,ge,ue,Ee,J,Y,Ce),xe=new Rk(v),ye=new tB($,J),se=new Tk($,ge,ye,J),N=new Pk($,ye,Ce,se),pe=new Uk($,N,ye,Ce),Z=new Ok($),j=new Ck(Ee),ie=new G4(v,xe,ge,J,se,j),F=new oV(Ee),I=new q4(Ee),oe=new Q4(ge,J),A=new wk(v,xe,ue,pe,o),L=new fw(v,pe,J),ee=new Ek($,ge,Ce,J),V=new Ik($,ge,Ce,J),Ce.programs=ie.programs,v.capabilities=J,v.extensions=ge,v.properties=Ee,v.renderLists=I,v.shadowMap=L,v.state=ue,v.info=Ce}le();const ce=new aV(v,$);this.xr=ce,this.getContext=function(){return $},this.getContextAttributes=function(){return $.getContextAttributes()},this.forceContextLoss=function(){const U=ge.get("WEBGL_lose_context");U&&U.loseContext()},this.forceContextRestore=function(){const U=ge.get("WEBGL_lose_context");U&&U.restoreContext()},this.getPixelRatio=function(){return R},this.setPixelRatio=function(U){U!==void 0&&(R=U,this.setSize(T,S,!1))},this.getSize=function(U){return U===void 0&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),U=new Ge),U.set(T,S)},this.setSize=function(U,ae,fe){if(ce.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}T=U,S=ae,e.width=Math.floor(U*R),e.height=Math.floor(ae*R),fe!==!1&&(e.style.width=U+"px",e.style.height=ae+"px"),this.setViewport(0,0,U,ae)},this.getDrawingBufferSize=function(U){return U===void 0&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),U=new Ge),U.set(T*R,S*R).floor()},this.setDrawingBufferSize=function(U,ae,fe){T=U,S=ae,R=fe,e.width=Math.floor(U*fe),e.height=Math.floor(ae*fe),this.setViewport(0,0,U,ae)},this.getCurrentViewport=function(U){return U===void 0&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),U=new cn),U.copy(M)},this.getViewport=function(U){return U.copy(O)},this.setViewport=function(U,ae,fe,de){U.isVector4?O.set(U.x,U.y,U.z,U.w):O.set(U,ae,fe,de),ue.viewport(M.copy(O).multiplyScalar(R).floor())},this.getScissor=function(U){return U.copy(G)},this.setScissor=function(U,ae,fe,de){U.isVector4?G.set(U.x,U.y,U.z,U.w):G.set(U,ae,fe,de),ue.scissor(w.copy(G).multiplyScalar(R).floor())},this.getScissorTest=function(){return P},this.setScissorTest=function(U){ue.setScissorTest(P=U)},this.setOpaqueSort=function(U){H=U},this.setTransparentSort=function(U){D=U},this.getClearColor=function(U){return U===void 0&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),U=new yt),U.copy(A.getClearColor())},this.setClearColor=function(){A.setClearColor.apply(A,arguments)},this.getClearAlpha=function(){return A.getClearAlpha()},this.setClearAlpha=function(){A.setClearAlpha.apply(A,arguments)},this.clear=function(U,ae,fe){let de=0;(U===void 0||U)&&(de|=16384),(ae===void 0||ae)&&(de|=256),(fe===void 0||fe)&&(de|=1024),$.clear(de)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Ie,!1),e.removeEventListener("webglcontextrestored",Se,!1),I.dispose(),oe.dispose(),Ee.dispose(),xe.dispose(),pe.dispose(),se.dispose(),ce.dispose(),ce.removeEventListener("sessionstart",Pt),ce.removeEventListener("sessionend",Q),ze.stop()};function Ie(U){U.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),g=!0}function Se(){console.log("THREE.WebGLRenderer: Context Restored."),g=!1;const U=Ce.autoReset,ae=L.enabled,fe=L.autoUpdate,de=L.needsUpdate,Ae=L.type;le(),Ce.autoReset=U,L.enabled=ae,L.autoUpdate=fe,L.needsUpdate=de,L.type=Ae}function De(U){const ae=U.target;ae.removeEventListener("dispose",De),nt(ae)}function nt(U){Je(U),Ee.remove(U)}function Je(U){const ae=Ee.get(U).programs;ae!==void 0&&ae.forEach(function(fe){ie.releaseProgram(fe)})}function ke(U,ae){U.render(function(fe){v.renderBufferImmediate(fe,ae)})}this.renderBufferImmediate=function(U,ae){se.initAttributes();const fe=Ee.get(U);U.hasPositions&&!fe.position&&(fe.position=$.createBuffer()),U.hasNormals&&!fe.normal&&(fe.normal=$.createBuffer()),U.hasUvs&&!fe.uv&&(fe.uv=$.createBuffer()),U.hasColors&&!fe.color&&(fe.color=$.createBuffer());const de=ae.getAttributes();U.hasPositions&&($.bindBuffer(34962,fe.position),$.bufferData(34962,U.positionArray,35048),se.enableAttribute(de.position),$.vertexAttribPointer(de.position,3,5126,!1,0,0)),U.hasNormals&&($.bindBuffer(34962,fe.normal),$.bufferData(34962,U.normalArray,35048),se.enableAttribute(de.normal),$.vertexAttribPointer(de.normal,3,5126,!1,0,0)),U.hasUvs&&($.bindBuffer(34962,fe.uv),$.bufferData(34962,U.uvArray,35048),se.enableAttribute(de.uv),$.vertexAttribPointer(de.uv,2,5126,!1,0,0)),U.hasColors&&($.bindBuffer(34962,fe.color),$.bufferData(34962,U.colorArray,35048),se.enableAttribute(de.color),$.vertexAttribPointer(de.color,3,5126,!1,0,0)),se.disableUnusedAttributes(),$.drawArrays(4,0,U.count),U.count=0},this.renderBufferDirect=function(U,ae,fe,de,Ae,Ze){ae===null&&(ae=be);const Ve=Ae.isMesh&&Ae.matrixWorld.determinant()<0,mt=Gt(U,ae,de,Ae);ue.setMaterial(de,Ve);let Ot=fe.index;const dt=fe.attributes.position;if(Ot===null){if(dt===void 0||dt.count===0)return}else if(Ot.count===0)return;let Tt=1;de.wireframe===!0&&(Ot=N.getWireframeAttribute(fe),Tt=2),(de.morphTargets||de.morphNormals)&&Z.update(Ae,fe,de,mt),se.setup(Ae,de,mt,fe,Ot);let ct,zt=ee;Ot!==null&&(ct=ye.get(Ot),zt=V,zt.setIndex(ct));const bn=Ot!==null?Ot.count:dt.count,Rn=fe.drawRange.start*Tt,li=fe.drawRange.count*Tt,Jt=Ze!==null?Ze.start*Tt:0,Wi=Ze!==null?Ze.count*Tt:1/0,fn=Math.max(Rn,Jt),B=Math.min(bn,Rn+li,Jt+Wi)-1,te=Math.max(0,B-fn+1);if(te!==0){if(Ae.isMesh)de.wireframe===!0?(ue.setLineWidth(de.wireframeLinewidth*_e()),zt.setMode(1)):zt.setMode(4);else if(Ae.isLine){let me=de.linewidth;me===void 0&&(me=1),ue.setLineWidth(me*_e()),Ae.isLineSegments?zt.setMode(1):Ae.isLineLoop?zt.setMode(2):zt.setMode(3)}else Ae.isPoints?zt.setMode(0):Ae.isSprite&&zt.setMode(4);if(Ae.isInstancedMesh)zt.renderInstances(fn,te,Ae.count);else if(fe.isInstancedBufferGeometry){const me=Math.min(fe.instanceCount,fe._maxInstanceCount);zt.renderInstances(fn,te,me)}else zt.render(fn,te)}},this.compile=function(U,ae){d=oe.get(U),d.init(),U.traverseVisible(function(fe){fe.isLight&&fe.layers.test(ae.layers)&&(d.pushLight(fe),fe.castShadow&&d.pushShadow(fe))}),d.setupLights(),U.traverse(function(fe){const de=fe.material;if(de)if(Array.isArray(de))for(let Ae=0;Ae<de.length;Ae++){const Ze=de[Ae];$e(Ze,U,fe)}else $e(de,U,fe)})};let ot=null;function pt(U){ot&&ot(U)}function Pt(){ze.stop()}function Q(){ze.start()}const ze=new tw;ze.setAnimationLoop(pt),typeof window<"u"&&ze.setContext(window),this.setAnimationLoop=function(U){ot=U,ce.setAnimationLoop(U),U===null?ze.stop():ze.start()},ce.addEventListener("sessionstart",Pt),ce.addEventListener("sessionend",Q),this.render=function(U,ae){let fe,de;if(arguments[2]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),fe=arguments[2]),arguments[3]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),de=arguments[3]),ae!==void 0&&ae.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(g===!0)return;U.autoUpdate===!0&&U.updateMatrixWorld(),ae.parent===null&&ae.updateMatrixWorld(),ce.enabled===!0&&ce.isPresenting===!0&&(ae=ce.getCamera(ae)),U.isScene===!0&&U.onBeforeRender(v,U,ae,fe||x),d=oe.get(U,p.length),d.init(),p.push(d),re.multiplyMatrices(ae.projectionMatrix,ae.matrixWorldInverse),z.setFromProjectionMatrix(re),X=this.localClippingEnabled,W=j.init(this.clippingPlanes,X,ae),h=I.get(U,f.length),h.init(),f.push(h),Me(U,ae,0,v.sortObjects),h.finish(),v.sortObjects===!0&&h.sort(H,D),W===!0&&j.beginShadows();const Ae=d.state.shadowsArray;L.render(Ae,U,ae),d.setupLights(),d.setupLightsView(ae),W===!0&&j.endShadows(),this.info.autoReset===!0&&this.info.reset(),fe!==void 0&&this.setRenderTarget(fe),A.render(h,U,ae,de);const Ze=h.opaque,Ve=h.transparent;Ze.length>0&&Te(Ze,U,ae),Ve.length>0&&Te(Ve,U,ae),x!==null&&(Ue.updateRenderTargetMipmap(x),Ue.updateMultisampleRenderTarget(x)),U.isScene===!0&&U.onAfterRender(v,U,ae),ue.buffers.depth.setTest(!0),ue.buffers.depth.setMask(!0),ue.buffers.color.setMask(!0),ue.setPolygonOffset(!1),se.resetDefaultState(),y=-1,b=null,p.pop(),p.length>0?d=p[p.length-1]:d=null,f.pop(),f.length>0?h=f[f.length-1]:h=null};function Me(U,ae,fe,de){if(U.visible===!1)return;if(U.layers.test(ae.layers)){if(U.isGroup)fe=U.renderOrder;else if(U.isLOD)U.autoUpdate===!0&&U.update(ae);else if(U.isLight)d.pushLight(U),U.castShadow&&d.pushShadow(U);else if(U.isSprite){if(!U.frustumCulled||z.intersectsSprite(U)){de&&ne.setFromMatrixPosition(U.matrixWorld).applyMatrix4(re);const Ve=pe.update(U),mt=U.material;mt.visible&&h.push(U,Ve,mt,fe,ne.z,null)}}else if(U.isImmediateRenderObject)de&&ne.setFromMatrixPosition(U.matrixWorld).applyMatrix4(re),h.push(U,null,U.material,fe,ne.z,null);else if((U.isMesh||U.isLine||U.isPoints)&&(U.isSkinnedMesh&&U.skeleton.frame!==Ce.render.frame&&(U.skeleton.update(),U.skeleton.frame=Ce.render.frame),!U.frustumCulled||z.intersectsObject(U))){de&&ne.setFromMatrixPosition(U.matrixWorld).applyMatrix4(re);const Ve=pe.update(U),mt=U.material;if(Array.isArray(mt)){const Ot=Ve.groups;for(let dt=0,Tt=Ot.length;dt<Tt;dt++){const ct=Ot[dt],zt=mt[ct.materialIndex];zt&&zt.visible&&h.push(U,Ve,zt,fe,ne.z,ct)}}else mt.visible&&h.push(U,Ve,mt,fe,ne.z,null)}}const Ze=U.children;for(let Ve=0,mt=Ze.length;Ve<mt;Ve++)Me(Ze[Ve],ae,fe,de)}function Te(U,ae,fe){const de=ae.isScene===!0?ae.overrideMaterial:null;for(let Ae=0,Ze=U.length;Ae<Ze;Ae++){const Ve=U[Ae],mt=Ve.object,Ot=Ve.geometry,dt=de===null?Ve.material:de,Tt=Ve.group;if(fe.isArrayCamera){const ct=fe.cameras;for(let zt=0,bn=ct.length;zt<bn;zt++){const Rn=ct[zt];mt.layers.test(Rn.layers)&&(ue.viewport(M.copy(Rn.viewport)),d.setupLightsView(Rn),We(mt,ae,Rn,Ot,dt,Tt))}}else We(mt,ae,fe,Ot,dt,Tt)}}function We(U,ae,fe,de,Ae,Ze){if(U.onBeforeRender(v,ae,fe,de,Ae,Ze),U.modelViewMatrix.multiplyMatrices(fe.matrixWorldInverse,U.matrixWorld),U.normalMatrix.getNormalMatrix(U.modelViewMatrix),U.isImmediateRenderObject){const Ve=Gt(fe,ae,Ae,U);ue.setMaterial(Ae),se.reset(),ke(U,Ve)}else v.renderBufferDirect(fe,ae,de,Ae,U,Ze);U.onAfterRender(v,ae,fe,de,Ae,Ze)}function $e(U,ae,fe){ae.isScene!==!0&&(ae=be);const de=Ee.get(U),Ae=d.state.lights,Ze=d.state.shadowsArray,Ve=Ae.state.version,mt=ie.getParameters(U,Ae.state,Ze,ae,fe),Ot=ie.getProgramCacheKey(mt);let dt=de.programs;de.environment=U.isMeshStandardMaterial?ae.environment:null,de.fog=ae.fog,de.envMap=xe.get(U.envMap||de.environment),dt===void 0&&(U.addEventListener("dispose",De),dt=new Map,de.programs=dt);let Tt=dt.get(Ot);if(Tt!==void 0){if(de.currentProgram===Tt&&de.lightsStateVersion===Ve)return ht(U,mt),Tt}else mt.uniforms=ie.getUniforms(U),U.onBuild(mt,v),U.onBeforeCompile(mt,v),Tt=ie.acquireProgram(mt,Ot),dt.set(Ot,Tt),de.uniforms=mt.uniforms;const ct=de.uniforms;(!U.isShaderMaterial&&!U.isRawShaderMaterial||U.clipping===!0)&&(ct.clippingPlanes=j.uniform),ht(U,mt),de.needsLights=et(U),de.lightsStateVersion=Ve,de.needsLights&&(ct.ambientLightColor.value=Ae.state.ambient,ct.lightProbe.value=Ae.state.probe,ct.directionalLights.value=Ae.state.directional,ct.directionalLightShadows.value=Ae.state.directionalShadow,ct.spotLights.value=Ae.state.spot,ct.spotLightShadows.value=Ae.state.spotShadow,ct.rectAreaLights.value=Ae.state.rectArea,ct.ltc_1.value=Ae.state.rectAreaLTC1,ct.ltc_2.value=Ae.state.rectAreaLTC2,ct.pointLights.value=Ae.state.point,ct.pointLightShadows.value=Ae.state.pointShadow,ct.hemisphereLights.value=Ae.state.hemi,ct.directionalShadowMap.value=Ae.state.directionalShadowMap,ct.directionalShadowMatrix.value=Ae.state.directionalShadowMatrix,ct.spotShadowMap.value=Ae.state.spotShadowMap,ct.spotShadowMatrix.value=Ae.state.spotShadowMatrix,ct.pointShadowMap.value=Ae.state.pointShadowMap,ct.pointShadowMatrix.value=Ae.state.pointShadowMatrix);const zt=Tt.getUniforms(),bn=ca.seqWithValue(zt.seq,ct);return de.currentProgram=Tt,de.uniformsList=bn,Tt}function ht(U,ae){const fe=Ee.get(U);fe.outputEncoding=ae.outputEncoding,fe.instancing=ae.instancing,fe.numClippingPlanes=ae.numClippingPlanes,fe.numIntersection=ae.numClipIntersection,fe.vertexAlphas=ae.vertexAlphas}function Gt(U,ae,fe,de){ae.isScene!==!0&&(ae=be),Ue.resetTextureUnits();const Ae=ae.fog,Ze=fe.isMeshStandardMaterial?ae.environment:null,Ve=x===null?v.outputEncoding:x.texture.encoding,mt=xe.get(fe.envMap||Ze),Ot=fe.vertexColors===!0&&de.geometry&&de.geometry.attributes.color&&de.geometry.attributes.color.itemSize===4,dt=Ee.get(fe),Tt=d.state.lights;if(W===!0&&(X===!0||U!==b)){const fn=U===b&&fe.id===y;j.setState(fe,U,fn)}let ct=!1;fe.version===dt.__version?(dt.needsLights&&dt.lightsStateVersion!==Tt.state.version||dt.outputEncoding!==Ve||de.isInstancedMesh&&dt.instancing===!1||!de.isInstancedMesh&&dt.instancing===!0||dt.envMap!==mt||fe.fog&&dt.fog!==Ae||dt.numClippingPlanes!==void 0&&(dt.numClippingPlanes!==j.numPlanes||dt.numIntersection!==j.numIntersection)||dt.vertexAlphas!==Ot)&&(ct=!0):(ct=!0,dt.__version=fe.version);let zt=dt.currentProgram;ct===!0&&(zt=$e(fe,ae,de));let bn=!1,Rn=!1,li=!1;const Jt=zt.getUniforms(),Wi=dt.uniforms;if(ue.useProgram(zt.program)&&(bn=!0,Rn=!0,li=!0),fe.id!==y&&(y=fe.id,Rn=!0),bn||b!==U){if(Jt.setValue($,"projectionMatrix",U.projectionMatrix),J.logarithmicDepthBuffer&&Jt.setValue($,"logDepthBufFC",2/(Math.log(U.far+1)/Math.LN2)),b!==U&&(b=U,Rn=!0,li=!0),fe.isShaderMaterial||fe.isMeshPhongMaterial||fe.isMeshToonMaterial||fe.isMeshStandardMaterial||fe.envMap){const fn=Jt.map.cameraPosition;fn!==void 0&&fn.setValue($,ne.setFromMatrixPosition(U.matrixWorld))}(fe.isMeshPhongMaterial||fe.isMeshToonMaterial||fe.isMeshLambertMaterial||fe.isMeshBasicMaterial||fe.isMeshStandardMaterial||fe.isShaderMaterial)&&Jt.setValue($,"isOrthographic",U.isOrthographicCamera===!0),(fe.isMeshPhongMaterial||fe.isMeshToonMaterial||fe.isMeshLambertMaterial||fe.isMeshBasicMaterial||fe.isMeshStandardMaterial||fe.isShaderMaterial||fe.isShadowMaterial||fe.skinning)&&Jt.setValue($,"viewMatrix",U.matrixWorldInverse)}if(fe.skinning){Jt.setOptional($,de,"bindMatrix"),Jt.setOptional($,de,"bindMatrixInverse");const fn=de.skeleton;if(fn){const B=fn.bones;if(J.floatVertexTextures){if(fn.boneTexture===null){let te=Math.sqrt(B.length*4);te=NU(te),te=Math.max(te,4);const me=new Float32Array(te*te*4);me.set(fn.boneMatrices);const ve=new ew(me,te,te,Fr,ia);fn.boneMatrices=me,fn.boneTexture=ve,fn.boneTextureSize=te}Jt.setValue($,"boneTexture",fn.boneTexture,Ue),Jt.setValue($,"boneTextureSize",fn.boneTextureSize)}else Jt.setOptional($,fn,"boneMatrices")}}return(Rn||dt.receiveShadow!==de.receiveShadow)&&(dt.receiveShadow=de.receiveShadow,Jt.setValue($,"receiveShadow",de.receiveShadow)),Rn&&(Jt.setValue($,"toneMappingExposure",v.toneMappingExposure),dt.needsLights&&dn(Wi,li),Ae&&fe.fog&&F.refreshFogUniforms(Wi,Ae),F.refreshMaterialUniforms(Wi,fe,R,S),ca.upload($,dt.uniformsList,Wi,Ue)),fe.isShaderMaterial&&fe.uniformsNeedUpdate===!0&&(ca.upload($,dt.uniformsList,Wi,Ue),fe.uniformsNeedUpdate=!1),fe.isSpriteMaterial&&Jt.setValue($,"center",de.center),Jt.setValue($,"modelViewMatrix",de.modelViewMatrix),Jt.setValue($,"normalMatrix",de.normalMatrix),Jt.setValue($,"modelMatrix",de.matrixWorld),zt}function dn(U,ae){U.ambientLightColor.needsUpdate=ae,U.lightProbe.needsUpdate=ae,U.directionalLights.needsUpdate=ae,U.directionalLightShadows.needsUpdate=ae,U.pointLights.needsUpdate=ae,U.pointLightShadows.needsUpdate=ae,U.spotLights.needsUpdate=ae,U.spotLightShadows.needsUpdate=ae,U.rectAreaLights.needsUpdate=ae,U.hemisphereLights.needsUpdate=ae}function et(U){return U.isMeshLambertMaterial||U.isMeshToonMaterial||U.isMeshPhongMaterial||U.isMeshStandardMaterial||U.isShadowMaterial||U.isShaderMaterial&&U.lights===!0}this.getActiveCubeFace=function(){return m},this.getActiveMipmapLevel=function(){return _},this.getRenderTarget=function(){return x},this.setRenderTarget=function(U,ae=0,fe=0){x=U,m=ae,_=fe,U&&Ee.get(U).__webglFramebuffer===void 0&&Ue.setupRenderTarget(U);let de=null,Ae=!1,Ze=!1;if(U){const Ve=U.texture;(Ve.isDataTexture3D||Ve.isDataTexture2DArray)&&(Ze=!0);const mt=Ee.get(U).__webglFramebuffer;U.isWebGLCubeRenderTarget?(de=mt[ae],Ae=!0):U.isWebGLMultisampleRenderTarget?de=Ee.get(U).__webglMultisampledFramebuffer:de=mt,M.copy(U.viewport),w.copy(U.scissor),C=U.scissorTest}else M.copy(O).multiplyScalar(R).floor(),w.copy(G).multiplyScalar(R).floor(),C=P;if(ue.bindFramebuffer(36160,de),ue.viewport(M),ue.scissor(w),ue.setScissorTest(C),Ae){const Ve=Ee.get(U.texture);$.framebufferTexture2D(36160,36064,34069+ae,Ve.__webglTexture,fe)}else if(Ze){const Ve=Ee.get(U.texture),mt=ae||0;$.framebufferTextureLayer(36160,36064,Ve.__webglTexture,fe||0,mt)}},this.readRenderTargetPixels=function(U,ae,fe,de,Ae,Ze,Ve){if(!(U&&U.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let mt=Ee.get(U).__webglFramebuffer;if(U.isWebGLCubeRenderTarget&&Ve!==void 0&&(mt=mt[Ve]),mt){ue.bindFramebuffer(36160,mt);try{const Ot=U.texture,dt=Ot.format,Tt=Ot.type;if(dt!==Fr&&Y.convert(dt)!==$.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const ct=Tt===zf&&(ge.has("EXT_color_buffer_half_float")||J.isWebGL2&&ge.has("EXT_color_buffer_float"));if(Tt!==H_&&Y.convert(Tt)!==$.getParameter(35738)&&!(Tt===ia&&(J.isWebGL2||ge.has("OES_texture_float")||ge.has("WEBGL_color_buffer_float")))&&!ct){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}$.checkFramebufferStatus(36160)===36053?ae>=0&&ae<=U.width-de&&fe>=0&&fe<=U.height-Ae&&$.readPixels(ae,fe,de,Ae,Y.convert(dt),Y.convert(Tt),Ze):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const Ot=x!==null?Ee.get(x).__webglFramebuffer:null;ue.bindFramebuffer(36160,Ot)}}},this.copyFramebufferToTexture=function(U,ae,fe=0){const de=Math.pow(2,-fe),Ae=Math.floor(ae.image.width*de),Ze=Math.floor(ae.image.height*de),Ve=Y.convert(ae.format);Ue.setTexture2D(ae,0),$.copyTexImage2D(3553,fe,Ve,U.x,U.y,Ae,Ze,0),ue.unbindTexture()},this.copyTextureToTexture=function(U,ae,fe,de=0){const Ae=ae.image.width,Ze=ae.image.height,Ve=Y.convert(fe.format),mt=Y.convert(fe.type);Ue.setTexture2D(fe,0),$.pixelStorei(37440,fe.flipY),$.pixelStorei(37441,fe.premultiplyAlpha),$.pixelStorei(3317,fe.unpackAlignment),ae.isDataTexture?$.texSubImage2D(3553,de,U.x,U.y,Ae,Ze,Ve,mt,ae.image.data):ae.isCompressedTexture?$.compressedTexSubImage2D(3553,de,U.x,U.y,ae.mipmaps[0].width,ae.mipmaps[0].height,Ve,ae.mipmaps[0].data):$.texSubImage2D(3553,de,U.x,U.y,Ve,mt,ae.image),de===0&&fe.generateMipmaps&&$.generateMipmap(3553),ue.unbindTexture()},this.copyTextureToTexture3D=function(U,ae,fe,de,Ae=0){if(v.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const{width:Ze,height:Ve,data:mt}=fe.image,Ot=Y.convert(de.format),dt=Y.convert(de.type);let Tt;if(de.isDataTexture3D)Ue.setTexture3D(de,0),Tt=32879;else if(de.isDataTexture2DArray)Ue.setTexture2DArray(de,0),Tt=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}$.pixelStorei(37440,de.flipY),$.pixelStorei(37441,de.premultiplyAlpha),$.pixelStorei(3317,de.unpackAlignment);const ct=$.getParameter(3314),zt=$.getParameter(32878),bn=$.getParameter(3316),Rn=$.getParameter(3315),li=$.getParameter(32877);$.pixelStorei(3314,Ze),$.pixelStorei(32878,Ve),$.pixelStorei(3316,U.min.x),$.pixelStorei(3315,U.min.y),$.pixelStorei(32877,U.min.z),$.texSubImage3D(Tt,Ae,ae.x,ae.y,ae.z,U.max.x-U.min.x+1,U.max.y-U.min.y+1,U.max.z-U.min.z+1,Ot,dt,mt),$.pixelStorei(3314,ct),$.pixelStorei(32878,zt),$.pixelStorei(3316,bn),$.pixelStorei(3315,Rn),$.pixelStorei(32877,li),Ae===0&&de.generateMipmaps&&$.generateMipmap(Tt),ue.unbindTexture()},this.initTexture=function(U){Ue.setTexture2D(U,0),ue.unbindTexture()},this.resetState=function(){m=0,_=0,x=null,ue.reset(),se.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class cV extends hn{}cV.prototype.isWebGL1Renderer=!0;class mw extends rn{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.background!==null&&(t.object.background=this.background.toJSON(e)),this.environment!==null&&(t.object.environment=this.environment.toJSON(e)),this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}}mw.prototype.isScene=!0;class wo{constructor(e,t){this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Cu,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Kr(),this.onUploadCallback=function(){}}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Kr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new wo(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Kr()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}wo.prototype.isInterleavedBuffer=!0;const Fn=new q;class Ru{constructor(e,t,n,i){this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)Fn.x=this.getX(t),Fn.y=this.getY(t),Fn.z=this.getZ(t),Fn.applyMatrix4(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Fn.x=this.getX(t),Fn.y=this.getY(t),Fn.z=this.getZ(t),Fn.applyNormalMatrix(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Fn.x=this.getX(t),Fn.y=this.getY(t),Fn.z=this.getZ(t),Fn.transformDirection(e),this.setXYZ(t,Fn.x,Fn.y,Fn.z);return this}setX(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){return this.data.array[e*this.data.stride+this.offset]}getY(e){return this.data.array[e*this.data.stride+this.offset+1]}getZ(e){return this.data.array[e*this.data.stride+this.offset+2]}getW(e){return this.data.array[e*this.data.stride+this.offset+3]}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new Kn(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Ru(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Ru.prototype.isInterleavedBufferAttribute=!0;class gw extends ei{constructor(e){super(),this.type="SpriteMaterial",this.color=new yt(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this}}gw.prototype.isSpriteMaterial=!0;let al;const Pc=new q,ol=new q,ll=new q,cl=new Ge,Ic=new Ge,vw=new Mt,Sd=new q,Dc=new q,wd=new q,gM=new Ge,Ng=new Ge,vM=new Ge;class uV extends rn{constructor(e){if(super(),this.type="Sprite",al===void 0){al=new mn;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new wo(t,5);al.setIndex([0,1,2,0,2,3]),al.setAttribute("position",new Ru(n,3,0,!1)),al.setAttribute("uv",new Ru(n,2,3,!1))}this.geometry=al,this.material=e!==void 0?e:new gw,this.center=new Ge(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ol.setFromMatrixScale(this.matrixWorld),vw.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),ll.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&ol.multiplyScalar(-ll.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const a=this.center;Td(Sd.set(-.5,-.5,0),ll,a,ol,i,s),Td(Dc.set(.5,-.5,0),ll,a,ol,i,s),Td(wd.set(.5,.5,0),ll,a,ol,i,s),gM.set(0,0),Ng.set(1,0),vM.set(1,1);let o=e.ray.intersectTriangle(Sd,Dc,wd,!1,Pc);if(o===null&&(Td(Dc.set(-.5,.5,0),ll,a,ol,i,s),Ng.set(0,1),o=e.ray.intersectTriangle(Sd,wd,Dc,!1,Pc),o===null))return;const l=e.ray.origin.distanceTo(Pc);l<e.near||l>e.far||t.push({distance:l,point:Pc.clone(),uv:Gn.getUV(Pc,Sd,Dc,wd,gM,Ng,vM,new Ge),face:null,object:this})}copy(e){return super.copy(e),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}uV.prototype.isSprite=!0;function Td(r,e,t,n,i,s){cl.subVectors(r,t).addScalar(.5).multiply(n),i!==void 0?(Ic.x=s*cl.x-i*cl.y,Ic.y=i*cl.x+s*cl.y):Ic.copy(cl),r.copy(e),r.x+=Ic.x,r.y+=Ic.y,r.applyMatrix4(vw)}const _M=new q,yM=new cn,xM=new cn,hV=new q,MM=new Mt;class _w extends Br{constructor(e,t){super(e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Mt,this.bindMatrixInverse=new Mt}copy(e){return super.copy(e),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new cn,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.x=t.getX(n),e.y=t.getY(n),e.z=t.getZ(n),e.w=t.getW(n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,i=this.geometry;yM.fromBufferAttribute(i.attributes.skinIndex,e),xM.fromBufferAttribute(i.attributes.skinWeight,e),_M.fromBufferAttribute(i.attributes.position,e).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const a=xM.getComponent(s);if(a!==0){const o=yM.getComponent(s);MM.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(hV.copy(_M).applyMatrix4(MM),a)}}return t.applyMatrix4(this.bindMatrixInverse)}}_w.prototype.isSkinnedMesh=!0;class dV extends rn{constructor(){super(),this.type="Bone"}}dV.prototype.isBone=!0;const bM=new Mt,SM=new Mt,Ed=[],Nc=new Br;class fV extends Br{constructor(e,t,n){super(e,t),this.instanceMatrix=new Kn(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e){return super.copy(e),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Nc.geometry=this.geometry,Nc.material=this.material,Nc.material!==void 0)for(let s=0;s<i;s++){this.getMatrixAt(s,bM),SM.multiplyMatrices(n,bM),Nc.matrixWorld=SM,Nc.raycast(e,Ed);for(let a=0,o=Ed.length;a<o;a++){const l=Ed[a];l.instanceId=s,l.object=this,t.push(l)}Ed.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new Kn(new Float32Array(this.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}fV.prototype.isInstancedMesh=!0;class sh extends ei{constructor(e){super(),this.type="LineBasicMaterial",this.color=new yt(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.morphTargets=e.morphTargets,this}}sh.prototype.isLineBasicMaterial=!0;const wM=new q,TM=new q,EM=new Mt,Fg=new sc,Ad=new rc;class Z_ extends rn{constructor(e=new mn,t=new sh){super(),this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)wM.fromBufferAttribute(t,i-1),TM.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=wM.distanceTo(TM);e.setAttribute("lineDistance",new Qn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Ad.copy(n.boundingSphere),Ad.applyMatrix4(i),Ad.radius+=s,e.ray.intersectsSphere(Ad)===!1)return;EM.copy(i).invert(),Fg.copy(e.ray).applyMatrix4(EM);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=new q,u=new q,h=new q,d=new q,f=this.isLineSegments?2:1;if(n.isBufferGeometry){const p=n.index,g=n.attributes.position;if(p!==null){const m=Math.max(0,a.start),_=Math.min(p.count,a.start+a.count);for(let x=m,y=_-1;x<y;x+=f){const b=p.getX(x),M=p.getX(x+1);if(c.fromBufferAttribute(g,b),u.fromBufferAttribute(g,M),Fg.distanceSqToSegment(c,u,d,h)>l)continue;d.applyMatrix4(this.matrixWorld);const C=e.ray.origin.distanceTo(d);C<e.near||C>e.far||t.push({distance:C,point:h.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else{const m=Math.max(0,a.start),_=Math.min(g.count,a.start+a.count);for(let x=m,y=_-1;x<y;x+=f){if(c.fromBufferAttribute(g,x),u.fromBufferAttribute(g,x+1),Fg.distanceSqToSegment(c,u,d,h)>l)continue;d.applyMatrix4(this.matrixWorld);const M=e.ray.origin.distanceTo(d);M<e.near||M>e.far||t.push({distance:M,point:h.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Z_.prototype.isLine=!0;const AM=new q,CM=new q;class Y_ extends Z_{constructor(e,t){super(e,t),this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)AM.fromBufferAttribute(t,i),CM.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+AM.distanceTo(CM);e.setAttribute("lineDistance",new Qn(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Y_.prototype.isLineSegments=!0;class pV extends Z_{constructor(e,t){super(e,t),this.type="LineLoop"}}pV.prototype.isLineLoop=!0;class yw extends ei{constructor(e){super(),this.type="PointsMaterial",this.color=new yt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this}}yw.prototype.isPointsMaterial=!0;const RM=new Mt,bv=new sc,Cd=new rc,Rd=new q;class mV extends rn{constructor(e=new mn,t=new yw){super(),this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Cd.copy(n.boundingSphere),Cd.applyMatrix4(i),Cd.radius+=s,e.ray.intersectsSphere(Cd)===!1)return;RM.copy(i).invert(),bv.copy(e.ray).applyMatrix4(RM);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o;if(n.isBufferGeometry){const c=n.index,h=n.attributes.position;if(c!==null){const d=Math.max(0,a.start),f=Math.min(c.count,a.start+a.count);for(let p=d,v=f;p<v;p++){const g=c.getX(p);Rd.fromBufferAttribute(h,g),LM(Rd,g,l,i,e,t,this)}}else{const d=Math.max(0,a.start),f=Math.min(h.count,a.start+a.count);for(let p=d,v=f;p<v;p++)Rd.fromBufferAttribute(h,p),LM(Rd,p,l,i,e,t,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=i.length;s<a;s++){const o=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}mV.prototype.isPoints=!0;function LM(r,e,t,n,i,s,a){const o=bv.distanceSqToPoint(r);if(o<t){const l=new q;bv.closestPointToPoint(r,l),l.applyMatrix4(n);const c=i.ray.origin.distanceTo(l);if(c<i.near||c>i.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:e,face:null,object:a})}}class gV extends oi{constructor(e,t,n,i,s,a,o,l,c){super(e,t,n,i,s,a,o,l,c),this.format=o!==void 0?o:no,this.minFilter=a!==void 0?a:gr,this.magFilter=s!==void 0?s:gr,this.generateMipmaps=!1;const u=this;function h(){u.needsUpdate=!0,e.requestVideoFrameCallback(h)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(h)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}gV.prototype.isVideoTexture=!0;class vV extends oi{constructor(e,t,n,i,s,a,o,l,c,u,h,d){super(null,a,o,l,c,u,i,s,h,d),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}vV.prototype.isCompressedTexture=!0;class _V extends oi{constructor(e,t,n,i,s,a,o,l,c){super(e,t,n,i,s,a,o,l,c),this.needsUpdate=!0}}_V.prototype.isCanvasTexture=!0;class yV extends oi{constructor(e,t,n,i,s,a,o,l,c,u){if(u=u!==void 0?u:Al,u!==Al&&u!==Au)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&u===Al&&(n=Bf),n===void 0&&u===Au&&(n=lu),super(null,i,s,a,o,l,u,n,c),this.image={width:e,height:t},this.magFilter=o!==void 0?o:Ci,this.minFilter=l!==void 0?l:Ci,this.flipY=!1,this.generateMipmaps=!1}}yV.prototype.isDepthTexture=!0;const xV={triangulate:function(r,e,t){t=t||2;const n=e&&e.length,i=n?e[0]*t:r.length;let s=xw(r,0,i,t,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,u,h,d,f;if(n&&(s=TV(r,e,s,t)),r.length>80*t){o=c=r[0],l=u=r[1];for(let p=t;p<i;p+=t)h=r[p],d=r[p+1],h<o&&(o=h),d<l&&(l=d),h>c&&(c=h),d>u&&(u=d);f=Math.max(c-o,u-l),f=f!==0?1/f:0}return Lu(s,a,t,o,l,f),a}};function xw(r,e,t,n,i){let s,a;if(i===OV(r,e,t,n)>0)for(s=e;s<t;s+=n)a=PM(s,r[s],r[s+1],a);else for(s=t-n;s>=e;s-=n)a=PM(s,r[s],r[s+1],a);return a&&em(a,a.next)&&(Iu(a),a=a.next),a}function pa(r,e){if(!r)return r;e||(e=r);let t=r,n;do if(n=!1,!t.steiner&&(em(t,t.next)||En(t.prev,t,t.next)===0)){if(Iu(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function Lu(r,e,t,n,i,s,a){if(!r)return;!a&&s&&LV(r,n,i,s);let o=r,l,c;for(;r.prev!==r.next;){if(l=r.prev,c=r.next,s?bV(r,n,i,s):MV(r)){e.push(l.i/t),e.push(r.i/t),e.push(c.i/t),Iu(r),r=c.next,o=c.next;continue}if(r=c,r===o){a?a===1?(r=SV(pa(r),e,t),Lu(r,e,t,n,i,s,2)):a===2&&wV(r,e,t,n,i,s):Lu(pa(r),e,t,n,i,s,1);break}}}function MV(r){const e=r.prev,t=r,n=r.next;if(En(e,t,n)>=0)return!1;let i=r.next.next;for(;i!==r.prev;){if(Ml(e.x,e.y,t.x,t.y,n.x,n.y,i.x,i.y)&&En(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function bV(r,e,t,n){const i=r.prev,s=r,a=r.next;if(En(i,s,a)>=0)return!1;const o=i.x<s.x?i.x<a.x?i.x:a.x:s.x<a.x?s.x:a.x,l=i.y<s.y?i.y<a.y?i.y:a.y:s.y<a.y?s.y:a.y,c=i.x>s.x?i.x>a.x?i.x:a.x:s.x>a.x?s.x:a.x,u=i.y>s.y?i.y>a.y?i.y:a.y:s.y>a.y?s.y:a.y,h=Sv(o,l,e,t,n),d=Sv(c,u,e,t,n);let f=r.prevZ,p=r.nextZ;for(;f&&f.z>=h&&p&&p.z<=d;){if(f!==r.prev&&f!==r.next&&Ml(i.x,i.y,s.x,s.y,a.x,a.y,f.x,f.y)&&En(f.prev,f,f.next)>=0||(f=f.prevZ,p!==r.prev&&p!==r.next&&Ml(i.x,i.y,s.x,s.y,a.x,a.y,p.x,p.y)&&En(p.prev,p,p.next)>=0))return!1;p=p.nextZ}for(;f&&f.z>=h;){if(f!==r.prev&&f!==r.next&&Ml(i.x,i.y,s.x,s.y,a.x,a.y,f.x,f.y)&&En(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;p&&p.z<=d;){if(p!==r.prev&&p!==r.next&&Ml(i.x,i.y,s.x,s.y,a.x,a.y,p.x,p.y)&&En(p.prev,p,p.next)>=0)return!1;p=p.nextZ}return!0}function SV(r,e,t){let n=r;do{const i=n.prev,s=n.next.next;!em(i,s)&&Mw(i,n,n.next,s)&&Pu(i,s)&&Pu(s,i)&&(e.push(i.i/t),e.push(n.i/t),e.push(s.i/t),Iu(n),Iu(n.next),n=r=s),n=n.next}while(n!==r);return pa(n)}function wV(r,e,t,n,i,s){let a=r;do{let o=a.next.next;for(;o!==a.prev;){if(a.i!==o.i&&DV(a,o)){let l=bw(a,o);a=pa(a,a.next),l=pa(l,l.next),Lu(a,e,t,n,i,s),Lu(l,e,t,n,i,s);return}o=o.next}a=a.next}while(a!==r)}function TV(r,e,t,n){const i=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*n,l=s<a-1?e[s+1]*n:r.length,c=xw(r,o,l,n,!1),c===c.next&&(c.steiner=!0),i.push(IV(c));for(i.sort(EV),s=0;s<i.length;s++)AV(i[s],t),t=pa(t,t.next);return t}function EV(r,e){return r.x-e.x}function AV(r,e){if(e=CV(r,e),e){const t=bw(e,r);pa(e,e.next),pa(t,t.next)}}function CV(r,e){let t=e;const n=r.x,i=r.y;let s=-1/0,a;do{if(i<=t.y&&i>=t.next.y&&t.next.y!==t.y){const d=t.x+(i-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(d<=n&&d>s){if(s=d,d===n){if(i===t.y)return t;if(i===t.next.y)return t.next}a=t.x<t.next.x?t:t.next}}t=t.next}while(t!==e);if(!a)return null;if(n===s)return a;const o=a,l=a.x,c=a.y;let u=1/0,h;t=a;do n>=t.x&&t.x>=l&&n!==t.x&&Ml(i<c?n:s,i,l,c,i<c?s:n,i,t.x,t.y)&&(h=Math.abs(i-t.y)/(n-t.x),Pu(t,r)&&(h<u||h===u&&(t.x>a.x||t.x===a.x&&RV(a,t)))&&(a=t,u=h)),t=t.next;while(t!==o);return a}function RV(r,e){return En(r.prev,r,e.prev)<0&&En(e.next,r,r.next)<0}function LV(r,e,t,n){let i=r;do i.z===null&&(i.z=Sv(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==r);i.prevZ.nextZ=null,i.prevZ=null,PV(i)}function PV(r){let e,t,n,i,s,a,o,l,c=1;do{for(t=r,r=null,s=null,a=0;t;){for(a++,n=t,o=0,e=0;e<c&&(o++,n=n.nextZ,!!n);e++);for(l=c;o>0||l>0&&n;)o!==0&&(l===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,o--):(i=n,n=n.nextZ,l--),s?s.nextZ=i:r=i,i.prevZ=s,s=i;t=n}s.nextZ=null,c*=2}while(a>1);return r}function Sv(r,e,t,n,i){return r=32767*(r-t)*i,e=32767*(e-n)*i,r=(r|r<<8)&16711935,r=(r|r<<4)&252645135,r=(r|r<<2)&858993459,r=(r|r<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,r|e<<1}function IV(r){let e=r,t=r;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==r);return t}function Ml(r,e,t,n,i,s,a,o){return(i-a)*(e-o)-(r-a)*(s-o)>=0&&(r-a)*(n-o)-(t-a)*(e-o)>=0&&(t-a)*(s-o)-(i-a)*(n-o)>=0}function DV(r,e){return r.next.i!==e.i&&r.prev.i!==e.i&&!NV(r,e)&&(Pu(r,e)&&Pu(e,r)&&FV(r,e)&&(En(r.prev,r,e.prev)||En(r,e.prev,e))||em(r,e)&&En(r.prev,r,r.next)>0&&En(e.prev,e,e.next)>0)}function En(r,e,t){return(e.y-r.y)*(t.x-e.x)-(e.x-r.x)*(t.y-e.y)}function em(r,e){return r.x===e.x&&r.y===e.y}function Mw(r,e,t,n){const i=Pd(En(r,e,t)),s=Pd(En(r,e,n)),a=Pd(En(t,n,r)),o=Pd(En(t,n,e));return!!(i!==s&&a!==o||i===0&&Ld(r,t,e)||s===0&&Ld(r,n,e)||a===0&&Ld(t,r,n)||o===0&&Ld(t,e,n))}function Ld(r,e,t){return e.x<=Math.max(r.x,t.x)&&e.x>=Math.min(r.x,t.x)&&e.y<=Math.max(r.y,t.y)&&e.y>=Math.min(r.y,t.y)}function Pd(r){return r>0?1:r<0?-1:0}function NV(r,e){let t=r;do{if(t.i!==r.i&&t.next.i!==r.i&&t.i!==e.i&&t.next.i!==e.i&&Mw(t,t.next,r,e))return!0;t=t.next}while(t!==r);return!1}function Pu(r,e){return En(r.prev,r,r.next)<0?En(r,e,r.next)>=0&&En(r,r.prev,e)>=0:En(r,e,r.prev)<0||En(r,r.next,e)<0}function FV(r,e){let t=r,n=!1;const i=(r.x+e.x)/2,s=(r.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==r);return n}function bw(r,e){const t=new wv(r.i,r.x,r.y),n=new wv(e.i,e.x,e.y),i=r.next,s=e.prev;return r.next=e,e.prev=r,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function PM(r,e,t,n){const i=new wv(r,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function Iu(r){r.next.prev=r.prev,r.prev.next=r.next,r.prevZ&&(r.prevZ.nextZ=r.nextZ),r.nextZ&&(r.nextZ.prevZ=r.prevZ)}function wv(r,e,t){this.i=r,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function OV(r,e,t,n){let i=0;for(let s=e,a=t-n;s<t;s+=n)i+=(r[a]-r[s])*(r[s+1]+r[a+1]),a=s;return i}class ua{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return ua.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];IM(e),DM(n,e);let a=e.length;t.forEach(IM);for(let l=0;l<t.length;l++)i.push(a),a+=t[l].length,DM(n,t[l]);const o=xV.triangulate(n,i);for(let l=0;l<o.length;l+=3)s.push(o.slice(l,l+3));return s}}function IM(r){const e=r.length;e>2&&r[e-1].equals(r[0])&&r.pop()}function DM(r,e){for(let t=0;t<e.length;t++)r.push(e[t].x),r.push(e[t].y)}class tm extends mn{constructor(e,t){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let o=0,l=e.length;o<l;o++){const c=e[o];a(c)}this.setAttribute("position",new Qn(i,3)),this.setAttribute("uv",new Qn(s,2)),this.computeVertexNormals();function a(o){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,u=t.steps!==void 0?t.steps:1;let h=t.depth!==void 0?t.depth:100,d=t.bevelEnabled!==void 0?t.bevelEnabled:!0,f=t.bevelThickness!==void 0?t.bevelThickness:6,p=t.bevelSize!==void 0?t.bevelSize:f-2,v=t.bevelOffset!==void 0?t.bevelOffset:0,g=t.bevelSegments!==void 0?t.bevelSegments:3;const m=t.extrudePath,_=t.UVGenerator!==void 0?t.UVGenerator:UV;t.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),h=t.amount);let x,y=!1,b,M,w,C;m&&(x=m.getSpacedPoints(u),y=!0,d=!1,b=m.computeFrenetFrames(u,!1),M=new q,w=new q,C=new q),d||(g=0,f=0,p=0,v=0);const T=o.extractPoints(c);let S=T.shape;const R=T.holes;if(!ua.isClockWise(S)){S=S.reverse();for(let xe=0,ye=R.length;xe<ye;xe++){const N=R[xe];ua.isClockWise(N)&&(R[xe]=N.reverse())}}const D=ua.triangulateShape(S,R),O=S;for(let xe=0,ye=R.length;xe<ye;xe++){const N=R[xe];S=S.concat(N)}function G(xe,ye,N){return ye||console.error("THREE.ExtrudeGeometry: vec does not exist"),ye.clone().multiplyScalar(N).add(xe)}const P=S.length,z=D.length;function W(xe,ye,N){let pe,ie,F;const I=xe.x-ye.x,oe=xe.y-ye.y,j=N.x-xe.x,L=N.y-xe.y,A=I*I+oe*oe,Z=I*L-oe*j;if(Math.abs(Z)>Number.EPSILON){const ee=Math.sqrt(A),V=Math.sqrt(j*j+L*L),Y=ye.x-oe/ee,se=ye.y+I/ee,le=N.x-L/V,ce=N.y+j/V,Ie=((le-Y)*L-(ce-se)*j)/(I*L-oe*j);pe=Y+I*Ie-xe.x,ie=se+oe*Ie-xe.y;const Se=pe*pe+ie*ie;if(Se<=2)return new Ge(pe,ie);F=Math.sqrt(Se/2)}else{let ee=!1;I>Number.EPSILON?j>Number.EPSILON&&(ee=!0):I<-Number.EPSILON?j<-Number.EPSILON&&(ee=!0):Math.sign(oe)===Math.sign(L)&&(ee=!0),ee?(pe=-oe,ie=I,F=Math.sqrt(A)):(pe=I,ie=oe,F=Math.sqrt(A/2))}return new Ge(pe/F,ie/F)}const X=[];for(let xe=0,ye=O.length,N=ye-1,pe=xe+1;xe<ye;xe++,N++,pe++)N===ye&&(N=0),pe===ye&&(pe=0),X[xe]=W(O[xe],O[N],O[pe]);const re=[];let ne,be=X.concat();for(let xe=0,ye=R.length;xe<ye;xe++){const N=R[xe];ne=[];for(let pe=0,ie=N.length,F=ie-1,I=pe+1;pe<ie;pe++,F++,I++)F===ie&&(F=0),I===ie&&(I=0),ne[pe]=W(N[pe],N[F],N[I]);re.push(ne),be=be.concat(ne)}for(let xe=0;xe<g;xe++){const ye=xe/g,N=f*Math.cos(ye*Math.PI/2),pe=p*Math.sin(ye*Math.PI/2)+v;for(let ie=0,F=O.length;ie<F;ie++){const I=G(O[ie],X[ie],pe);J(I.x,I.y,-N)}for(let ie=0,F=R.length;ie<F;ie++){const I=R[ie];ne=re[ie];for(let oe=0,j=I.length;oe<j;oe++){const L=G(I[oe],ne[oe],pe);J(L.x,L.y,-N)}}}const _e=p+v;for(let xe=0;xe<P;xe++){const ye=d?G(S[xe],be[xe],_e):S[xe];y?(w.copy(b.normals[0]).multiplyScalar(ye.x),M.copy(b.binormals[0]).multiplyScalar(ye.y),C.copy(x[0]).add(w).add(M),J(C.x,C.y,C.z)):J(ye.x,ye.y,0)}for(let xe=1;xe<=u;xe++)for(let ye=0;ye<P;ye++){const N=d?G(S[ye],be[ye],_e):S[ye];y?(w.copy(b.normals[xe]).multiplyScalar(N.x),M.copy(b.binormals[xe]).multiplyScalar(N.y),C.copy(x[xe]).add(w).add(M),J(C.x,C.y,C.z)):J(N.x,N.y,h/u*xe)}for(let xe=g-1;xe>=0;xe--){const ye=xe/g,N=f*Math.cos(ye*Math.PI/2),pe=p*Math.sin(ye*Math.PI/2)+v;for(let ie=0,F=O.length;ie<F;ie++){const I=G(O[ie],X[ie],pe);J(I.x,I.y,h+N)}for(let ie=0,F=R.length;ie<F;ie++){const I=R[ie];ne=re[ie];for(let oe=0,j=I.length;oe<j;oe++){const L=G(I[oe],ne[oe],pe);y?J(L.x,L.y+x[u-1].y,x[u-1].x+N):J(L.x,L.y,h+N)}}}$(),K();function $(){const xe=i.length/3;if(d){let ye=0,N=P*ye;for(let pe=0;pe<z;pe++){const ie=D[pe];ue(ie[2]+N,ie[1]+N,ie[0]+N)}ye=u+g*2,N=P*ye;for(let pe=0;pe<z;pe++){const ie=D[pe];ue(ie[0]+N,ie[1]+N,ie[2]+N)}}else{for(let ye=0;ye<z;ye++){const N=D[ye];ue(N[2],N[1],N[0])}for(let ye=0;ye<z;ye++){const N=D[ye];ue(N[0]+P*u,N[1]+P*u,N[2]+P*u)}}n.addGroup(xe,i.length/3-xe,0)}function K(){const xe=i.length/3;let ye=0;ge(O,ye),ye+=O.length;for(let N=0,pe=R.length;N<pe;N++){const ie=R[N];ge(ie,ye),ye+=ie.length}n.addGroup(xe,i.length/3-xe,1)}function ge(xe,ye){let N=xe.length;for(;--N>=0;){const pe=N;let ie=N-1;ie<0&&(ie=xe.length-1);for(let F=0,I=u+g*2;F<I;F++){const oe=P*F,j=P*(F+1),L=ye+pe+oe,A=ye+ie+oe,Z=ye+ie+j,ee=ye+pe+j;Ce(L,A,Z,ee)}}}function J(xe,ye,N){l.push(xe),l.push(ye),l.push(N)}function ue(xe,ye,N){Ee(xe),Ee(ye),Ee(N);const pe=i.length/3,ie=_.generateTopUV(n,i,pe-3,pe-2,pe-1);Ue(ie[0]),Ue(ie[1]),Ue(ie[2])}function Ce(xe,ye,N,pe){Ee(xe),Ee(ye),Ee(pe),Ee(ye),Ee(N),Ee(pe);const ie=i.length/3,F=_.generateSideWallUV(n,i,ie-6,ie-3,ie-2,ie-1);Ue(F[0]),Ue(F[1]),Ue(F[3]),Ue(F[1]),Ue(F[2]),Ue(F[3])}function Ee(xe){i.push(l[xe*3+0]),i.push(l[xe*3+1]),i.push(l[xe*3+2])}function Ue(xe){s.push(xe.x),s.push(xe.y)}}}toJSON(){const e=mn.prototype.toJSON.call(this),t=this.parameters.shapes,n=this.parameters.options;return BV(t,n,e)}}const UV={generateTopUV:function(r,e,t,n,i){const s=e[t*3],a=e[t*3+1],o=e[n*3],l=e[n*3+1],c=e[i*3],u=e[i*3+1];return[new Ge(s,a),new Ge(o,l),new Ge(c,u)]},generateSideWallUV:function(r,e,t,n,i,s){const a=e[t*3],o=e[t*3+1],l=e[t*3+2],c=e[n*3],u=e[n*3+1],h=e[n*3+2],d=e[i*3],f=e[i*3+1],p=e[i*3+2],v=e[s*3],g=e[s*3+1],m=e[s*3+2];return Math.abs(o-u)<.01?[new Ge(a,1-l),new Ge(c,1-h),new Ge(d,1-p),new Ge(v,1-m)]:[new Ge(o,1-l),new Ge(u,1-h),new Ge(f,1-p),new Ge(g,1-m)]}};function BV(r,e,t){if(t.shapes=[],Array.isArray(r))for(let n=0,i=r.length;n<i;n++){const s=r[n];t.shapes.push(s.uuid)}else t.shapes.push(r.uuid);return e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class zV extends mn{constructor(e,t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],a=[];let o=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let u=0;u<e.length;u++)c(e[u]),this.addGroup(o,l,u),o+=l,l=0;this.setIndex(n),this.setAttribute("position",new Qn(i,3)),this.setAttribute("normal",new Qn(s,3)),this.setAttribute("uv",new Qn(a,2));function c(u){const h=i.length/3,d=u.extractPoints(t);let f=d.shape;const p=d.holes;ua.isClockWise(f)===!1&&(f=f.reverse());for(let g=0,m=p.length;g<m;g++){const _=p[g];ua.isClockWise(_)===!0&&(p[g]=_.reverse())}const v=ua.triangulateShape(f,p);for(let g=0,m=p.length;g<m;g++){const _=p[g];f=f.concat(_)}for(let g=0,m=f.length;g<m;g++){const _=f[g];i.push(_.x,_.y,0),s.push(0,0,1),a.push(_.x,_.y)}for(let g=0,m=v.length;g<m;g++){const _=v[g],x=_[0]+h,y=_[1]+h,b=_[2]+h;n.push(x,y,b),l+=3}}}toJSON(){const e=mn.prototype.toJSON.call(this),t=this.parameters.shapes;return kV(t,e)}}function kV(r,e){if(e.shapes=[],Array.isArray(r))for(let t=0,n=r.length;t<n;t++){const i=r[t];e.shapes.push(i.uuid)}else e.shapes.push(r.uuid);return e}class VV extends ei{constructor(e){super(),this.type="ShadowMaterial",this.color=new yt(0),this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this}}VV.prototype.isShadowMaterial=!0;class HV extends po{constructor(e){super(e),this.type="RawShaderMaterial"}}HV.prototype.isRawShaderMaterial=!0;class Sw extends ei{constructor(e){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new yt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=nc,this.normalScale=new Ge(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.flatShading=e.flatShading,this.vertexTangents=e.vertexTangents,this}}Sw.prototype.isMeshStandardMaterial=!0;class GV extends Sw{constructor(e){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Ge(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=ji(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.reflectivity=e.reflectivity,e.sheen?this.sheen=(this.sheen||new yt).copy(e.sheen):this.sheen=null,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this}}GV.prototype.isMeshPhysicalMaterial=!0;class WV extends ei{constructor(e){super(),this.type="MeshPhongMaterial",this.color=new yt(16777215),this.specular=new yt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=nc,this.normalScale=new Ge(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Jp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.flatShading=e.flatShading,this}}WV.prototype.isMeshPhongMaterial=!0;class $V extends ei{constructor(e){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new yt(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=nc,this.normalScale=new Ge(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this}}$V.prototype.isMeshToonMaterial=!0;class XV extends ei{constructor(e){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=nc,this.normalScale=new Ge(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.flatShading=e.flatShading,this}}XV.prototype.isMeshNormalMaterial=!0;class qV extends ei{constructor(e){super(),this.type="MeshLambertMaterial",this.color=new yt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new yt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Jp,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this}}qV.prototype.isMeshLambertMaterial=!0;class ZV extends ei{constructor(e){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new yt(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=nc,this.normalScale=new Ge(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.flatShading=e.flatShading,this}}ZV.prototype.isMeshMatcapMaterial=!0;class YV extends sh{constructor(e){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}YV.prototype.isLineDashedMaterial=!0;const vn={arraySlice:function(r,e,t){return vn.isTypedArray(r)?new r.constructor(r.subarray(e,t!==void 0?t:r.length)):r.slice(e,t)},convertArray:function(r,e,t){return!r||!t&&r.constructor===e?r:typeof e.BYTES_PER_ELEMENT=="number"?new e(r):Array.prototype.slice.call(r)},isTypedArray:function(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)},getKeyframeOrder:function(r){function e(i,s){return r[i]-r[s]}const t=r.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n},sortedArray:function(r,e,t){const n=r.length,i=new r.constructor(n);for(let s=0,a=0;a!==n;++s){const o=t[s]*e;for(let l=0;l!==e;++l)i[a++]=r[o+l]}return i},flattenJSON:function(r,e,t,n){let i=1,s=r[0];for(;s!==void 0&&s[n]===void 0;)s=r[i++];if(s===void 0)return;let a=s[n];if(a!==void 0)if(Array.isArray(a))do a=s[n],a!==void 0&&(e.push(s.time),t.push.apply(t,a)),s=r[i++];while(s!==void 0);else if(a.toArray!==void 0)do a=s[n],a!==void 0&&(e.push(s.time),a.toArray(t,t.length)),s=r[i++];while(s!==void 0);else do a=s[n],a!==void 0&&(e.push(s.time),t.push(a)),s=r[i++];while(s!==void 0)},subclip:function(r,e,t,n,i=30){const s=r.clone();s.name=e;const a=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],u=c.getValueSize(),h=[],d=[];for(let f=0;f<c.times.length;++f){const p=c.times[f]*i;if(!(p<t||p>=n)){h.push(c.times[f]);for(let v=0;v<u;++v)d.push(c.values[f*u+v])}}h.length!==0&&(c.times=vn.convertArray(h,c.times.constructor),c.values=vn.convertArray(d,c.values.constructor),a.push(c))}s.tracks=a;let o=1/0;for(let l=0;l<s.tracks.length;++l)o>s.tracks[l].times[0]&&(o=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(r,e=0,t=r,n=30){n<=0&&(n=30);const i=t.tracks.length,s=e/n;for(let a=0;a<i;++a){const o=t.tracks[a],l=o.ValueTypeName;if(l==="bool"||l==="string")continue;const c=r.tracks.find(function(m){return m.name===o.name&&m.ValueTypeName===l});if(c===void 0)continue;let u=0;const h=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=h/3);let d=0;const f=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const p=o.times.length-1;let v;if(s<=o.times[0]){const m=u,_=h-u;v=vn.arraySlice(o.values,m,_)}else if(s>=o.times[p]){const m=p*h+u,_=m+h-u;v=vn.arraySlice(o.values,m,_)}else{const m=o.createInterpolant(),_=u,x=h-u;m.evaluate(s),v=vn.arraySlice(m.resultBuffer,_,x)}l==="quaternion"&&new Li().fromArray(v).normalize().conjugate().toArray(v);const g=c.times.length;for(let m=0;m<g;++m){const _=m*f+d;if(l==="quaternion")Li.multiplyQuaternionsFlat(c.values,_,v,0,c.values,_);else{const x=f-d*2;for(let y=0;y<x;++y)c.values[_+y]-=v[y]}}}return r.blendMode=q1,r}};class ma{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];e:{t:{let a;n:{i:if(!(e<i)){for(let o=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,e,s)}if(n===o)break;if(s=i,i=t[++n],e<i)break t}a=t.length;break n}if(!(e>=s)){const o=t[1];e<o&&(n=2,s=o);for(let l=n-2;;){if(s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(n===l)break;if(i=s,s=t[--n-1],e>=s)break t}a=n,n=0;break n}break e}for(;n<a;){const o=n+a>>>1;e<t[o]?a=o:n=o+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,i);if(i===void 0)return n=t.length,this._cachedIndex=n,this.afterEnd_(n-1,s,e)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let a=0;a!==i;++a)t[a]=n[s+a];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}ma.prototype.beforeStart_=ma.prototype.copySampleValue_;ma.prototype.afterEnd_=ma.prototype.copySampleValue_;class jV extends ma{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:yl,endingEnd:yl}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,a=e+1,o=i[s],l=i[a];if(o===void 0)switch(this.getSettings_().endingStart){case xl:s=e,o=2*t-n;break;case Hf:s=i.length-2,o=t+i[s]-i[s+1];break;default:s=e,o=n}if(l===void 0)switch(this.getSettings_().endingEnd){case xl:a=e,l=2*n-t;break;case Hf:a=1,l=n+i[1]-i[0];break;default:a=e-1,l=t}const c=(n-t)*.5,u=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(l-n),this._offsetPrev=s*u,this._offsetNext=a*u}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,u=this._offsetPrev,h=this._offsetNext,d=this._weightPrev,f=this._weightNext,p=(n-t)/(i-t),v=p*p,g=v*p,m=-d*g+2*d*v-d*p,_=(1+d)*g+(-1.5-2*d)*v+(-.5+d)*p+1,x=(-1-f)*g+(1.5+f)*v+.5*p,y=f*g-f*v;for(let b=0;b!==o;++b)s[b]=m*a[u+b]+_*a[c+b]+x*a[l+b]+y*a[h+b];return s}}class ww extends ma{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=e*o,c=l-o,u=(n-t)/(i-t),h=1-u;for(let d=0;d!==o;++d)s[d]=a[c+d]*h+a[l+d]*u;return s}}class JV extends ma{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class as{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=vn.convertArray(t,this.TimeBufferType),this.values=vn.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:vn.convertArray(e.times,Array),values:vn.convertArray(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new JV(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new ww(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new jV(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case kf:t=this.InterpolantFactoryMethodDiscrete;break;case Vf:t=this.InterpolantFactoryMethodLinear;break;case sg:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return kf;case this.InterpolantFactoryMethodLinear:return Vf;case this.InterpolantFactoryMethodSmooth:return sg}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,a=i-1;for(;s!==i&&n[s]<e;)++s;for(;a!==-1&&n[a]>t;)--a;if(++a,s!==0||a!==i){s>=a&&(a=Math.max(a,1),s=a-1);const o=this.getValueSize();this.times=vn.arraySlice(n,s,a),this.values=vn.arraySlice(this.values,s*o,a*o)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let a=null;for(let o=0;o!==s;o++){const l=n[o];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,l),e=!1;break}if(a!==null&&a>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,l,a),e=!1;break}a=l}if(i!==void 0&&vn.isTypedArray(i))for(let o=0,l=i.length;o!==l;++o){const c=i[o];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,c),e=!1;break}}return e}optimize(){const e=vn.arraySlice(this.times),t=vn.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===sg,s=e.length-1;let a=1;for(let o=1;o<s;++o){let l=!1;const c=e[o],u=e[o+1];if(c!==u&&(o!==1||c!==e[0]))if(i)l=!0;else{const h=o*n,d=h-n,f=h+n;for(let p=0;p!==n;++p){const v=t[h+p];if(v!==t[d+p]||v!==t[f+p]){l=!0;break}}}if(l){if(o!==a){e[a]=e[o];const h=o*n,d=a*n;for(let f=0;f!==n;++f)t[d+f]=t[h+f]}++a}}if(s>0){e[a]=e[s];for(let o=s*n,l=a*n,c=0;c!==n;++c)t[l+c]=t[o+c];++a}return a!==e.length?(this.times=vn.arraySlice(e,0,a),this.values=vn.arraySlice(t,0,a*n)):(this.times=e,this.values=t),this}clone(){const e=vn.arraySlice(this.times,0),t=vn.arraySlice(this.values,0),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}as.prototype.TimeBufferType=Float32Array;as.prototype.ValueBufferType=Float32Array;as.prototype.DefaultInterpolation=Vf;class lc extends as{}lc.prototype.ValueTypeName="bool";lc.prototype.ValueBufferType=Array;lc.prototype.DefaultInterpolation=kf;lc.prototype.InterpolantFactoryMethodLinear=void 0;lc.prototype.InterpolantFactoryMethodSmooth=void 0;class Tw extends as{}Tw.prototype.ValueTypeName="color";class Wf extends as{}Wf.prototype.ValueTypeName="number";class KV extends ma{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,a=this.sampleValues,o=this.valueSize,l=(n-t)/(i-t);let c=e*o;for(let u=c+o;c!==u;c+=4)Li.slerpFlat(s,0,a,c-o,a,c,l);return s}}class ah extends as{InterpolantFactoryMethodLinear(e){return new KV(this.times,this.values,this.getValueSize(),e)}}ah.prototype.ValueTypeName="quaternion";ah.prototype.DefaultInterpolation=Vf;ah.prototype.InterpolantFactoryMethodSmooth=void 0;class cc extends as{}cc.prototype.ValueTypeName="string";cc.prototype.ValueBufferType=Array;cc.prototype.DefaultInterpolation=kf;cc.prototype.InterpolantFactoryMethodLinear=void 0;cc.prototype.InterpolantFactoryMethodSmooth=void 0;class $f extends as{}$f.prototype.ValueTypeName="vector";class NM{constructor(e,t=-1,n,i=G_){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=Kr(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let a=0,o=n.length;a!==o;++a)t.push(eH(n[a]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,a=n.length;s!==a;++s)t.push(as.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,a=[];for(let o=0;o<s;o++){let l=[],c=[];l.push((o+s-1)%s,o,(o+1)%s),c.push(0,1,0);const u=vn.getKeyframeOrder(l);l=vn.sortedArray(l,1,u),c=vn.sortedArray(c,1,u),!i&&l[0]===0&&(l.push(s),c.push(c[0])),a.push(new Wf(".morphTargetInfluences["+t[o].name+"]",l,c).scale(1/n))}return new this(e,-1,a)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let o=0,l=e.length;o<l;o++){const c=e[o],u=c.name.match(s);if(u&&u.length>1){const h=u[1];let d=i[h];d||(i[h]=d=[]),d.push(c)}}const a=[];for(const o in i)a.push(this.CreateFromMorphTargetSequence(o,i[o],t,n));return a}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(h,d,f,p,v){if(f.length!==0){const g=[],m=[];vn.flattenJSON(f,g,m,p),g.length!==0&&v.push(new h(d,g,m))}},i=[],s=e.name||"default",a=e.fps||30,o=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let h=0;h<c.length;h++){const d=c[h].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const f={};let p;for(p=0;p<d.length;p++)if(d[p].morphTargets)for(let v=0;v<d[p].morphTargets.length;v++)f[d[p].morphTargets[v]]=-1;for(const v in f){const g=[],m=[];for(let _=0;_!==d[p].morphTargets.length;++_){const x=d[p];g.push(x.time),m.push(x.morphTarget===v?1:0)}i.push(new Wf(".morphTargetInfluence["+v+"]",g,m))}l=f.length*a}else{const f=".bones["+t[h].name+"]";n($f,f+".position",d,"pos",i),n(ah,f+".quaternion",d,"rot",i),n($f,f+".scale",d,"scl",i)}}return i.length===0?null:new this(s,l,i,o)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function QV(r){switch(r.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Wf;case"vector":case"vector2":case"vector3":case"vector4":return $f;case"color":return Tw;case"quaternion":return ah;case"bool":case"boolean":return lc;case"string":return cc}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+r)}function eH(r){if(r.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=QV(r.type);if(r.times===void 0){const t=[],n=[];vn.flattenJSON(r.keys,t,n,"value"),r.times=t,r.values=n}return e.parse!==void 0?e.parse(r):new e(r.name,r.times,r.values,r.interpolation)}const Gl={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class tH{constructor(e,t,n){const i=this;let s=!1,a=0,o=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(u){o++,s===!1&&i.onStart!==void 0&&i.onStart(u,a,o),s=!0},this.itemEnd=function(u){a++,i.onProgress!==void 0&&i.onProgress(u,a,o),a===o&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(u){i.onError!==void 0&&i.onError(u)},this.resolveURL=function(u){return l?l(u):u},this.setURLModifier=function(u){return l=u,this},this.addHandler=function(u,h){return c.push(u,h),this},this.removeHandler=function(u){const h=c.indexOf(u);return h!==-1&&c.splice(h,2),this},this.getHandler=function(u){for(let h=0,d=c.length;h<d;h+=2){const f=c[h],p=c[h+1];if(f.global&&(f.lastIndex=0),f.test(u))return p}return null}}}const nH=new tH;class wa{constructor(e){this.manager=e!==void 0?e:nH,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const Lr={};class iH extends wa{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,a=Gl.get(e);if(a!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(a),s.manager.itemEnd(e)},0),a;if(Lr[e]!==void 0){Lr[e].push({onLoad:t,onProgress:n,onError:i});return}const o=/^data:(.*?)(;base64)?,(.*)$/,l=e.match(o);let c;if(l){const u=l[1],h=!!l[2];let d=l[3];d=decodeURIComponent(d),h&&(d=atob(d));try{let f;const p=(this.responseType||"").toLowerCase();switch(p){case"arraybuffer":case"blob":const v=new Uint8Array(d.length);for(let m=0;m<d.length;m++)v[m]=d.charCodeAt(m);p==="blob"?f=new Blob([v.buffer],{type:u}):f=v.buffer;break;case"document":f=new DOMParser().parseFromString(d,u);break;case"json":f=JSON.parse(d);break;default:f=d;break}setTimeout(function(){t&&t(f),s.manager.itemEnd(e)},0)}catch(f){setTimeout(function(){i&&i(f),s.manager.itemError(e),s.manager.itemEnd(e)},0)}}else{Lr[e]=[],Lr[e].push({onLoad:t,onProgress:n,onError:i}),c=new XMLHttpRequest,c.open("GET",e,!0),c.addEventListener("load",function(u){const h=this.response,d=Lr[e];if(delete Lr[e],this.status===200||this.status===0){this.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Gl.add(e,h);for(let f=0,p=d.length;f<p;f++){const v=d[f];v.onLoad&&v.onLoad(h)}s.manager.itemEnd(e)}else{for(let f=0,p=d.length;f<p;f++){const v=d[f];v.onError&&v.onError(u)}s.manager.itemError(e),s.manager.itemEnd(e)}},!1),c.addEventListener("progress",function(u){const h=Lr[e];for(let d=0,f=h.length;d<f;d++){const p=h[d];p.onProgress&&p.onProgress(u)}},!1),c.addEventListener("error",function(u){const h=Lr[e];delete Lr[e];for(let d=0,f=h.length;d<f;d++){const p=h[d];p.onError&&p.onError(u)}s.manager.itemError(e),s.manager.itemEnd(e)},!1),c.addEventListener("abort",function(u){const h=Lr[e];delete Lr[e];for(let d=0,f=h.length;d<f;d++){const p=h[d];p.onError&&p.onError(u)}s.manager.itemError(e),s.manager.itemEnd(e)},!1),this.responseType!==void 0&&(c.responseType=this.responseType),this.withCredentials!==void 0&&(c.withCredentials=this.withCredentials),c.overrideMimeType&&c.overrideMimeType(this.mimeType!==void 0?this.mimeType:"text/plain");for(const u in this.requestHeader)c.setRequestHeader(u,this.requestHeader[u]);c.send(null)}return s.manager.itemStart(e),c}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Ew extends wa{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,a=Gl.get(e);if(a!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(a),s.manager.itemEnd(e)},0),a;const o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function l(){o.removeEventListener("load",l,!1),o.removeEventListener("error",c,!1),Gl.add(e,this),t&&t(this),s.manager.itemEnd(e)}function c(u){o.removeEventListener("load",l,!1),o.removeEventListener("error",c,!1),i&&i(u),s.manager.itemError(e),s.manager.itemEnd(e)}return o.addEventListener("load",l,!1),o.addEventListener("error",c,!1),e.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),s.manager.itemStart(e),o.src=e,o}}class rH extends wa{constructor(e){super(e)}load(e,t,n,i){const s=new Kp,a=new Ew(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);let o=0;function l(c){a.load(e[c],function(u){s.images[c]=u,o++,o===6&&(s.needsUpdate=!0,t&&t(s))},void 0,i)}for(let c=0;c<e.length;++c)l(c);return s}}class sH extends wa{constructor(e){super(e)}load(e,t,n,i){const s=new oi,a=new Ew(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(o){s.image=o;const l=e.search(/\.jpe?g($|\?)/i)>0||e.search(/^data\:image\/jpeg/)===0;s.format=l?no:Fr,s.needsUpdate=!0,t!==void 0&&t(s)},n,i),s}}class vr{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let a=1;a<=e;a++)n=this.getPoint(a/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let a;t?a=t:a=e*n[s-1];let o=0,l=s-1,c;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),c=n[i]-a,c<0)o=i+1;else if(c>0)l=i-1;else{l=i;break}if(i=l,n[i]===a)return i/(s-1);const u=n[i],d=n[i+1]-u,f=(a-u)/d;return(i+f)/(s-1)}getTangent(e,t){let i=e-1e-4,s=e+1e-4;i<0&&(i=0),s>1&&(s=1);const a=this.getPoint(i),o=this.getPoint(s),l=t||(a.isVector2?new Ge:new q);return l.copy(o).sub(a).normalize(),l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new q,i=[],s=[],a=[],o=new q,l=new Mt;for(let f=0;f<=e;f++){const p=f/e;i[f]=this.getTangentAt(p,new q),i[f].normalize()}s[0]=new q,a[0]=new q;let c=Number.MAX_VALUE;const u=Math.abs(i[0].x),h=Math.abs(i[0].y),d=Math.abs(i[0].z);u<=c&&(c=u,n.set(1,0,0)),h<=c&&(c=h,n.set(0,1,0)),d<=c&&n.set(0,0,1),o.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],o),a[0].crossVectors(i[0],s[0]);for(let f=1;f<=e;f++){if(s[f]=s[f-1].clone(),a[f]=a[f-1].clone(),o.crossVectors(i[f-1],i[f]),o.length()>Number.EPSILON){o.normalize();const p=Math.acos(ji(i[f-1].dot(i[f]),-1,1));s[f].applyMatrix4(l.makeRotationAxis(o,p))}a[f].crossVectors(i[f],s[f])}if(t===!0){let f=Math.acos(ji(s[0].dot(s[e]),-1,1));f/=e,i[0].dot(o.crossVectors(s[0],s[e]))>0&&(f=-f);for(let p=1;p<=e;p++)s[p].applyMatrix4(l.makeRotationAxis(i[p],f*p)),a[p].crossVectors(i[p],s[p])}return{tangents:i,normals:s,binormals:a}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class nm extends vr{constructor(e=0,t=0,n=1,i=1,s=0,a=Math.PI*2,o=!1,l=0){super(),this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=a,this.aClockwise=o,this.aRotation=l}getPoint(e,t){const n=t||new Ge,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const a=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(a?s=0:s=i),this.aClockwise===!0&&!a&&(s===i?s=-i:s=s-i);const o=this.aStartAngle+e*s;let l=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const u=Math.cos(this.aRotation),h=Math.sin(this.aRotation),d=l-this.aX,f=c-this.aY;l=d*u-f*h+this.aX,c=d*h+f*u+this.aY}return n.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}nm.prototype.isEllipseCurve=!0;class Aw extends nm{constructor(e,t,n,i,s,a){super(e,t,n,n,i,s,a),this.type="ArcCurve"}}Aw.prototype.isArcCurve=!0;function j_(){let r=0,e=0,t=0,n=0;function i(s,a,o,l){r=s,e=o,t=-3*s+3*a-2*o-l,n=2*s-2*a+o+l}return{initCatmullRom:function(s,a,o,l,c){i(a,o,c*(o-s),c*(l-a))},initNonuniformCatmullRom:function(s,a,o,l,c,u,h){let d=(a-s)/c-(o-s)/(c+u)+(o-a)/u,f=(o-a)/u-(l-a)/(u+h)+(l-o)/h;d*=u,f*=u,i(a,o,d,f)},calc:function(s){const a=s*s,o=a*s;return r+e*s+t*a+n*o}}}const Id=new q,Og=new j_,Ug=new j_,Bg=new j_;class Cw extends vr{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new q){const n=t,i=this.points,s=i.length,a=(s-(this.closed?0:1))*e;let o=Math.floor(a),l=a-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/s)+1)*s:l===0&&o===s-1&&(o=s-2,l=1);let c,u;this.closed||o>0?c=i[(o-1)%s]:(Id.subVectors(i[0],i[1]).add(i[0]),c=Id);const h=i[o%s],d=i[(o+1)%s];if(this.closed||o+2<s?u=i[(o+2)%s]:(Id.subVectors(i[s-1],i[s-2]).add(i[s-1]),u=Id),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let p=Math.pow(c.distanceToSquared(h),f),v=Math.pow(h.distanceToSquared(d),f),g=Math.pow(d.distanceToSquared(u),f);v<1e-4&&(v=1),p<1e-4&&(p=v),g<1e-4&&(g=v),Og.initNonuniformCatmullRom(c.x,h.x,d.x,u.x,p,v,g),Ug.initNonuniformCatmullRom(c.y,h.y,d.y,u.y,p,v,g),Bg.initNonuniformCatmullRom(c.z,h.z,d.z,u.z,p,v,g)}else this.curveType==="catmullrom"&&(Og.initCatmullRom(c.x,h.x,d.x,u.x,this.tension),Ug.initCatmullRom(c.y,h.y,d.y,u.y,this.tension),Bg.initCatmullRom(c.z,h.z,d.z,u.z,this.tension));return n.set(Og.calc(l),Ug.calc(l),Bg.calc(l)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new q().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}Cw.prototype.isCatmullRomCurve3=!0;function FM(r,e,t,n,i){const s=(n-e)*.5,a=(i-t)*.5,o=r*r,l=r*o;return(2*t-2*n+s+a)*l+(-3*t+3*n-2*s-a)*o+s*r+t}function aH(r,e){const t=1-r;return t*t*e}function oH(r,e){return 2*(1-r)*r*e}function lH(r,e){return r*r*e}function cu(r,e,t,n){return aH(r,e)+oH(r,t)+lH(r,n)}function cH(r,e){const t=1-r;return t*t*t*e}function uH(r,e){const t=1-r;return 3*t*t*r*e}function hH(r,e){return 3*(1-r)*r*r*e}function dH(r,e){return r*r*r*e}function uu(r,e,t,n,i){return cH(r,e)+uH(r,t)+hH(r,n)+dH(r,i)}class J_ extends vr{constructor(e=new Ge,t=new Ge,n=new Ge,i=new Ge){super(),this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new Ge){const n=t,i=this.v0,s=this.v1,a=this.v2,o=this.v3;return n.set(uu(e,i.x,s.x,a.x,o.x),uu(e,i.y,s.y,a.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}J_.prototype.isCubicBezierCurve=!0;class Rw extends vr{constructor(e=new q,t=new q,n=new q,i=new q){super(),this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new q){const n=t,i=this.v0,s=this.v1,a=this.v2,o=this.v3;return n.set(uu(e,i.x,s.x,a.x,o.x),uu(e,i.y,s.y,a.y,o.y),uu(e,i.z,s.z,a.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}Rw.prototype.isCubicBezierCurve3=!0;class im extends vr{constructor(e=new Ge,t=new Ge){super(),this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new Ge){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const n=t||new Ge;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}im.prototype.isLineCurve=!0;class fH extends vr{constructor(e=new q,t=new q){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=e,this.v2=t}getPoint(e,t=new q){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class K_ extends vr{constructor(e=new Ge,t=new Ge,n=new Ge){super(),this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new Ge){const n=t,i=this.v0,s=this.v1,a=this.v2;return n.set(cu(e,i.x,s.x,a.x),cu(e,i.y,s.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}K_.prototype.isQuadraticBezierCurve=!0;class Lw extends vr{constructor(e=new q,t=new q,n=new q){super(),this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new q){const n=t,i=this.v0,s=this.v1,a=this.v2;return n.set(cu(e,i.x,s.x,a.x),cu(e,i.y,s.y,a.y),cu(e,i.z,s.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}Lw.prototype.isQuadraticBezierCurve3=!0;class Q_ extends vr{constructor(e=[]){super(),this.type="SplineCurve",this.points=e}getPoint(e,t=new Ge){const n=t,i=this.points,s=(i.length-1)*e,a=Math.floor(s),o=s-a,l=i[a===0?a:a-1],c=i[a],u=i[a>i.length-2?i.length-1:a+1],h=i[a>i.length-3?i.length-1:a+2];return n.set(FM(o,l.x,c.x,u.x,h.x),FM(o,l.y,c.y,u.y,h.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new Ge().fromArray(i))}return this}}Q_.prototype.isSplineCurve=!0;var pH=Object.freeze({__proto__:null,ArcCurve:Aw,CatmullRomCurve3:Cw,CubicBezierCurve:J_,CubicBezierCurve3:Rw,EllipseCurve:nm,LineCurve:im,LineCurve3:fH,QuadraticBezierCurve:K_,QuadraticBezierCurve3:Lw,SplineCurve:Q_});class mH extends vr{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new im(t,e))}getPoint(e){const t=e*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=t){const s=n[i]-t,a=this.curves[i],o=a.getLength(),l=o===0?0:1-s/o;return a.getPointAt(l)}i++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const a=s[i],o=a&&a.isEllipseCurve?e*2:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e,l=a.getPoints(o);for(let c=0;c<l.length;c++){const u=l[c];n&&n.equals(u)||(t.push(u),n=u)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new pH[i.type]().fromJSON(i))}return this}}class Tv extends mH{constructor(e){super(),this.type="Path",this.currentPoint=new Ge,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new im(this.currentPoint.clone(),new Ge(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new K_(this.currentPoint.clone(),new Ge(e,t),new Ge(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,a){const o=new J_(this.currentPoint.clone(),new Ge(e,t),new Ge(n,i),new Ge(s,a));return this.curves.push(o),this.currentPoint.set(s,a),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new Q_(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,a){const o=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+o,t+l,n,i,s,a),this}absarc(e,t,n,i,s,a){return this.absellipse(e,t,n,n,i,s,a),this}ellipse(e,t,n,i,s,a,o,l){const c=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(e+c,t+u,n,i,s,a,o,l),this}absellipse(e,t,n,i,s,a,o,l){const c=new nm(e,t,n,i,s,a,o,l);if(this.curves.length>0){const h=c.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(c);const u=c.getPoint(1);return this.currentPoint.copy(u),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class e0 extends Tv{constructor(e){super(e),this.uuid=Kr(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new Tv().fromJSON(i))}return this}}class ns extends rn{constructor(e,t=1){super(),this.type="Light",this.color=new yt(e),this.intensity=t}dispose(){}copy(e){return super.copy(e),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}ns.prototype.isLight=!0;class gH extends ns{constructor(e,t,n){super(e,n),this.type="HemisphereLight",this.position.copy(rn.DefaultUp),this.updateMatrix(),this.groundColor=new yt(t)}copy(e){return ns.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}gH.prototype.isHemisphereLight=!0;const OM=new Mt,UM=new q,BM=new q;class t0{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new Ge(512,512),this.map=null,this.mapPass=null,this.matrix=new Mt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Qp,this._frameExtents=new Ge(1,1),this._viewportCount=1,this._viewports=[new cn(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;UM.setFromMatrixPosition(e.matrixWorld),t.position.copy(UM),BM.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(BM),t.updateMatrixWorld(),OM.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(OM),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class Pw extends t0{constructor(){super(new Ji(50,1,.5,500)),this.focus=1}updateMatrices(e){const t=this.camera,n=xv*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}Pw.prototype.isSpotLightShadow=!0;class vH extends ns{constructor(e,t,n=0,i=Math.PI/3,s=0,a=1){super(e,t),this.type="SpotLight",this.position.copy(rn.DefaultUp),this.updateMatrix(),this.target=new rn,this.distance=n,this.angle=i,this.penumbra=s,this.decay=a,this.shadow=new Pw}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}vH.prototype.isSpotLight=!0;const zM=new Mt,Fc=new q,zg=new q;class Iw extends t0{constructor(){super(new Ji(90,1,.5,500)),this._frameExtents=new Ge(4,2),this._viewportCount=6,this._viewports=[new cn(2,1,1,1),new cn(0,1,1,1),new cn(3,1,1,1),new cn(1,1,1,1),new cn(3,0,1,1),new cn(1,0,1,1)],this._cubeDirections=[new q(1,0,0),new q(-1,0,0),new q(0,0,1),new q(0,0,-1),new q(0,1,0),new q(0,-1,0)],this._cubeUps=[new q(0,1,0),new q(0,1,0),new q(0,1,0),new q(0,1,0),new q(0,0,1),new q(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Fc.setFromMatrixPosition(e.matrixWorld),n.position.copy(Fc),zg.copy(n.position),zg.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(zg),n.updateMatrixWorld(),i.makeTranslation(-Fc.x,-Fc.y,-Fc.z),zM.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(zM)}}Iw.prototype.isPointLightShadow=!0;class _H extends ns{constructor(e,t,n=0,i=1){super(e,t),this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Iw}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}_H.prototype.isPointLight=!0;class Dw extends X_{constructor(e=-1,t=1,n=1,i=-1,s=.1,a=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,a=n+e,o=i+t,l=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,a=s+c*this.view.width,o-=u*this.view.offsetY,l=o-u*this.view.height}this.projectionMatrix.makeOrthographic(s,a,o,l,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}Dw.prototype.isOrthographicCamera=!0;class Nw extends t0{constructor(){super(new Dw(-5,5,5,-5,.5,500))}}Nw.prototype.isDirectionalLightShadow=!0;class yH extends ns{constructor(e,t){super(e,t),this.type="DirectionalLight",this.position.copy(rn.DefaultUp),this.updateMatrix(),this.target=new rn,this.shadow=new Nw}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}yH.prototype.isDirectionalLight=!0;class xH extends ns{constructor(e,t){super(e,t),this.type="AmbientLight"}}xH.prototype.isAmbientLight=!0;class MH extends ns{constructor(e,t,n=10,i=10){super(e,t),this.type="RectAreaLight",this.width=n,this.height=i}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}MH.prototype.isRectAreaLight=!0;class Fw{constructor(){this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new q)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScaledVector(a[1],.488603*i),t.addScaledVector(a[2],.488603*s),t.addScaledVector(a[3],.488603*n),t.addScaledVector(a[4],1.092548*(n*i)),t.addScaledVector(a[5],1.092548*(i*s)),t.addScaledVector(a[6],.315392*(3*s*s-1)),t.addScaledVector(a[7],1.092548*(n*s)),t.addScaledVector(a[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScaledVector(a[1],2*.511664*i),t.addScaledVector(a[2],2*.511664*s),t.addScaledVector(a[3],2*.511664*n),t.addScaledVector(a[4],2*.429043*n*i),t.addScaledVector(a[5],2*.429043*i*s),t.addScaledVector(a[6],.743125*s*s-.247708),t.addScaledVector(a[7],2*.429043*n*s),t.addScaledVector(a[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}}Fw.prototype.isSphericalHarmonics3=!0;class n0 extends ns{constructor(e=new Fw,t=1){super(void 0,t),this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}n0.prototype.isLightProbe=!0;class bH{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.substr(0,t+1)}}class SH extends mn{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}SH.prototype.isInstancedBufferGeometry=!0;class wH extends Kn{constructor(e,t,n,i){typeof n=="number"&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(e,t,n),this.meshPerAttribute=i||1}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}wH.prototype.isInstancedBufferAttribute=!0;class TH extends wa{constructor(e){super(e),typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,a=Gl.get(e);if(a!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(a),s.manager.itemEnd(e)},0),a;const o={};o.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",o.headers=this.requestHeader,fetch(e,o).then(function(l){return l.blob()}).then(function(l){return createImageBitmap(l,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(l){Gl.add(e,l),t&&t(l),s.manager.itemEnd(e)}).catch(function(l){i&&i(l),s.manager.itemError(e),s.manager.itemEnd(e)}),s.manager.itemStart(e)}}TH.prototype.isImageBitmapLoader=!0;let Dd;const EH={getContext:function(){return Dd===void 0&&(Dd=new(window.AudioContext||window.webkitAudioContext)),Dd},setContext:function(r){Dd=r}};class AH extends wa{constructor(e){super(e)}load(e,t,n,i){const s=this,a=new iH(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(o){try{const l=o.slice(0);EH.getContext().decodeAudioData(l,function(u){t(u)})}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}}class CH extends n0{constructor(e,t,n=1){super(void 0,n);const i=new yt().set(e),s=new yt().set(t),a=new q(i.r,i.g,i.b),o=new q(s.r,s.g,s.b),l=Math.sqrt(Math.PI),c=l*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(l),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}}CH.prototype.isHemisphereLightProbe=!0;class RH extends n0{constructor(e,t=1){super(void 0,t);const n=new yt().set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}RH.prototype.isAmbientLightProbe=!0;class LH extends rn{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}class PH{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,s,a;switch(t){case"quaternion":i=this._slerp,s=this._slerpAdditive,a=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,s=this._select,a=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,s=this._lerpAdditive,a=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=s,this._setIdentity=a,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,s=e*i+i;let a=this.cumulativeWeight;if(a===0){for(let o=0;o!==i;++o)n[s+o]=n[o];a=t}else{a+=t;const o=t/a;this._mixBufferRegion(n,s,0,o,i)}this.cumulativeWeight=a}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,s=this.cumulativeWeight,a=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const l=t*this._origIndex;this._mixBufferRegion(n,i,l,1-s,t)}a>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let l=t,c=t+t;l!==c;++l)if(n[l]!==n[l+t]){o.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let s=n,a=i;s!==a;++s)t[s]=t[i+s%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,s){if(i>=.5)for(let a=0;a!==s;++a)e[t+a]=e[n+a]}_slerp(e,t,n,i){Li.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,s){const a=this._workIndex*s;Li.multiplyQuaternionsFlat(e,a,e,t,e,n),Li.slerpFlat(e,t,e,t,e,a,i)}_lerp(e,t,n,i,s){const a=1-i;for(let o=0;o!==s;++o){const l=t+o;e[l]=e[l]*a+e[n+o]*i}}_lerpAdditive(e,t,n,i,s){for(let a=0;a!==s;++a){const o=t+a;e[o]=e[o]+e[n+a]*i}}}const i0="\\[\\]\\.:\\/",IH=new RegExp("["+i0+"]","g"),r0="[^"+i0+"]",DH="[^"+i0.replace("\\.","")+"]",NH=/((?:WC+[\/:])*)/.source.replace("WC",r0),FH=/(WCOD+)?/.source.replace("WCOD",DH),OH=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",r0),UH=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",r0),BH=new RegExp("^"+NH+FH+OH+UH+"$"),zH=["material","materials","bones"];class kH{constructor(e,t,n){const i=n||an.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=n.length;i!==s;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class an{constructor(e,t,n){this.path=t,this.parsedPath=n||an.parseTrackName(t),this.node=an.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new an.Composite(e,t,n):new an(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(IH,"")}static parseTrackName(e){const t=BH.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const s=n.nodeName.substring(i+1);zH.indexOf(s)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=s)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(!t||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(s){for(let a=0;a<s.length;a++){const o=s[a];if(o.name===t||o.uuid===t)return o;const l=n(o.children);if(l)return l}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.node[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let s=t.propertyIndex;if(e||(e=an.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let c=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let u=0;u<e.length;u++)if(e[u].name===c){c=u;break}break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const a=e[i];if(a===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e);return}let o=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?o=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(o=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(s!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}l=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=s}else a.fromArray!==void 0&&a.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(l=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}an.Composite=kH;an.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};an.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};an.prototype.GetterByBindingType=[an.prototype._getValue_direct,an.prototype._getValue_array,an.prototype._getValue_arrayElement,an.prototype._getValue_toArray];an.prototype.SetterByBindingTypeAndVersioning=[[an.prototype._setValue_direct,an.prototype._setValue_direct_setNeedsUpdate,an.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[an.prototype._setValue_array,an.prototype._setValue_array_setNeedsUpdate,an.prototype._setValue_array_setMatrixWorldNeedsUpdate],[an.prototype._setValue_arrayElement,an.prototype._setValue_arrayElement_setNeedsUpdate,an.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[an.prototype._setValue_fromArray,an.prototype._setValue_fromArray_setNeedsUpdate,an.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class VH{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const s=t.tracks,a=s.length,o=new Array(a),l={endingStart:yl,endingEnd:yl};for(let c=0;c!==a;++c){const u=s[c].createInterpolant(null);o[c]=u,u.settings=l}this._interpolantSettings=l,this._interpolants=o,this._propertyBindings=new Array(a),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=xU,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,s=e._clip.duration,a=s/i,o=i/s;e.warp(1,a,t),this.warp(o,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,s=i.time,a=this.timeScale;let o=this._timeScaleInterpolant;o===null&&(o=i._lendControlInterpolant(),this._timeScaleInterpolant=o);const l=o.parameterPositions,c=o.sampleValues;return l[0]=s,l[1]=s+n,c[0]=e/a,c[1]=t/a,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const s=this._startTime;if(s!==null){const l=(e-s)*n;if(l<0||n===0)return;this._startTime=null,t=n*l}t*=this._updateTimeScale(e);const a=this._updateTime(t),o=this._updateWeight(e);if(o>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case q1:for(let u=0,h=l.length;u!==h;++u)l[u].evaluate(a),c[u].accumulateAdditive(o);break;case G_:default:for(let u=0,h=l.length;u!==h;++u)l[u].evaluate(a),c[u].accumulate(i,o)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,s=this._loopCount;const a=n===MU;if(e===0)return s===-1?i:a&&(s&1)===1?t-i:i;if(n===yU){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(s===-1&&(e>=0?(s=0,this._setEndings(!0,this.repetitions===0,a)):this._setEndings(this.repetitions===0,!0,a)),i>=t||i<0){const o=Math.floor(i/t);i-=t*o,s+=Math.abs(o);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(l===1){const c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=s,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=i;if(a&&(s&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=xl,i.endingEnd=xl):(e?i.endingStart=this.zeroSlopeAtStart?xl:yl:i.endingStart=Hf,t?i.endingEnd=this.zeroSlopeAtEnd?xl:yl:i.endingEnd=Hf)}_scheduleFading(e,t,n){const i=this._mixer,s=i.time;let a=this._weightInterpolant;a===null&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=s,l[0]=t,o[1]=s+e,l[1]=n,this}}class HH extends So{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,s=i.length,a=e._propertyBindings,o=e._interpolants,l=n.uuid,c=this._bindingsByRootAndName;let u=c[l];u===void 0&&(u={},c[l]=u);for(let h=0;h!==s;++h){const d=i[h],f=d.name;let p=u[f];if(p!==void 0)a[h]=p;else{if(p=a[h],p!==void 0){p._cacheIndex===null&&(++p.referenceCount,this._addInactiveBinding(p,l,f));continue}const v=t&&t._propertyBindings[h].binding.parsedPath;p=new PH(an.create(n,f,v),d.ValueTypeName,d.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,l,f),a[h]=p}o[h].resultBuffer=p.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,s=this._actionsByClip[i];this._bindAction(e,s&&s.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];s.useCount++===0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.useCount===0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,s=this._actionsByClip;let a=s[t];if(a===void 0)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,s[t]=a;else{const o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=i.length,i.push(e),a.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const s=e._clip.uuid,a=this._actionsByClip,o=a[s],l=o.knownActions,c=l[l.length-1],u=e._byClipCacheIndex;c._byClipCacheIndex=u,l[u]=c,l.pop(),e._byClipCacheIndex=null;const h=o.actionByRoot,d=(e._localRoot||this._root).uuid;delete h[d],l.length===0&&delete a[s],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.referenceCount===0&&this._removeInactiveBinding(s)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,s=this._bindings;let a=i[t];a===void 0&&(a={},i[t]=a),a[n]=e,e._cacheIndex=s.length,s.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,s=n.path,a=this._bindingsByRootAndName,o=a[i],l=t[t.length-1],c=e._cacheIndex;l._cacheIndex=c,t[c]=l,t.pop(),delete o[s],Object.keys(o).length===0&&delete a[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new ww(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,s=t[i];e.__cacheIndex=i,t[i]=e,s.__cacheIndex=n,t[n]=s}clipAction(e,t,n){const i=t||this._root,s=i.uuid;let a=typeof e=="string"?NM.findByName(i,e):e;const o=a!==null?a.uuid:e,l=this._actionsByClip[o];let c=null;if(n===void 0&&(a!==null?n=a.blendMode:n=G_),l!==void 0){const h=l.actionByRoot[s];if(h!==void 0&&h.blendMode===n)return h;c=l.knownActions[0],a===null&&(a=c._clip)}if(a===null)return null;const u=new VH(this,a,t,n);return this._bindAction(u,c),this._addInactiveAction(u,o,s),u}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?NM.findByName(n,e):e,a=s?s.uuid:e,o=this._actionsByClip[a];return o!==void 0&&o.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,s=Math.sign(e),a=this._accuIndex^=1;for(let c=0;c!==n;++c)t[c]._update(i,e,s,a);const o=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)o[c].apply(a);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,s=i[n];if(s!==void 0){const a=s.knownActions;for(let o=0,l=a.length;o!==l;++o){const c=a[o];this._deactivateAction(c);const u=c._cacheIndex,h=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=u,t[u]=h,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const a in n){const o=n[a].actionByRoot,l=o[t];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const i=this._bindingsByRootAndName,s=i[t];if(s!==void 0)for(const a in s){const o=s[a];o.restoreOriginalState(),this._removeInactiveBinding(o)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}HH.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class GH extends wo{constructor(e,t,n=1){super(e,t),this.meshPerAttribute=n||1}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}GH.prototype.isInstancedInterleavedBuffer=!0;class WH extends rn{constructor(e){super(),this.material=e,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}WH.prototype.isImmediateRenderObject=!0;const Js=new q,Nd=new Mt,kg=new Mt;class $H extends Y_{constructor(e){const t=Ow(e),n=new mn,i=[],s=[],a=new yt(0,0,1),o=new yt(0,1,0);for(let c=0;c<t.length;c++){const u=t[c];u.parent&&u.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),s.push(a.r,a.g,a.b),s.push(o.r,o.g,o.b))}n.setAttribute("position",new Qn(i,3)),n.setAttribute("color",new Qn(s,3));const l=new sh({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,l),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");kg.copy(this.root.matrixWorld).invert();for(let s=0,a=0;s<t.length;s++){const o=t[s];o.parent&&o.parent.isBone&&(Nd.multiplyMatrices(kg,o.matrixWorld),Js.setFromMatrixPosition(Nd),i.setXYZ(a,Js.x,Js.y,Js.z),Nd.multiplyMatrices(kg,o.parent.matrixWorld),Js.setFromMatrixPosition(Nd),i.setXYZ(a+1,Js.x,Js.y,Js.z),a+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function Ow(r){const e=[];r&&r.isBone&&e.push(r);for(let t=0;t<r.children.length;t++)e.push.apply(e,Ow(r.children[t]));return e}class XH extends Y_{constructor(e=10,t=10,n=4473924,i=8947848){n=new yt(n),i=new yt(i);const s=t/2,a=e/t,o=e/2,l=[],c=[];for(let d=0,f=0,p=-o;d<=t;d++,p+=a){l.push(-o,0,p,o,0,p),l.push(p,0,-o,p,0,o);const v=d===s?n:i;v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3}const u=new mn;u.setAttribute("position",new Qn(l,3)),u.setAttribute("color",new Qn(c,3));const h=new sh({vertexColors:!0,toneMapped:!1});super(u,h),this.type="GridHelper"}}const qH=new Float32Array(1);new Int32Array(qH.buffer);const ZH=new W_({side:Jn,depthWrite:!1,depthTest:!1});new Br(new $_,ZH);vr.create=function(r,e){return console.log("THREE.Curve.create() has been deprecated"),r.prototype=Object.create(vr.prototype),r.prototype.constructor=r,r.prototype.getPoint=e,r};Tv.prototype.fromPoints=function(r){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(r)};XH.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};$H.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};wa.prototype.extractUrlBase=function(r){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),bH.extractUrlBase(r)};wa.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};br.prototype.center=function(r){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(r)};br.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()};br.prototype.isIntersectionBox=function(r){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(r)};br.prototype.isIntersectionSphere=function(r){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(r)};br.prototype.size=function(r){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(r)};rc.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Qp.prototype.setFromMatrix=function(r){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(r)};si.prototype.flattenToArrayOffset=function(r,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(r,e)};si.prototype.multiplyVector3=function(r){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),r.applyMatrix3(this)};si.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};si.prototype.applyToBufferAttribute=function(r){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),r.applyMatrix3(this)};si.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};si.prototype.getInverse=function(r){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(r).invert()};Mt.prototype.extractPosition=function(r){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(r)};Mt.prototype.flattenToArrayOffset=function(r,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(r,e)};Mt.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new q().setFromMatrixColumn(this,3)};Mt.prototype.setRotationFromQuaternion=function(r){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(r)};Mt.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};Mt.prototype.multiplyVector3=function(r){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Mt.prototype.multiplyVector4=function(r){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Mt.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};Mt.prototype.rotateAxis=function(r){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),r.transformDirection(this)};Mt.prototype.crossVector=function(r){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Mt.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};Mt.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};Mt.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};Mt.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};Mt.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};Mt.prototype.applyToBufferAttribute=function(r){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),r.applyMatrix4(this)};Mt.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};Mt.prototype.makeFrustum=function(r,e,t,n,i,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(r,e,n,t,i,s)};Mt.prototype.getInverse=function(r){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(r).invert()};qr.prototype.isIntersectionLine=function(r){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(r)};Li.prototype.multiplyVector3=function(r){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),r.applyQuaternion(this)};Li.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()};sc.prototype.isIntersectionBox=function(r){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(r)};sc.prototype.isIntersectionPlane=function(r){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(r)};sc.prototype.isIntersectionSphere=function(r){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(r)};Gn.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()};Gn.prototype.barycoordFromPoint=function(r,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(r,e)};Gn.prototype.midpoint=function(r){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(r)};Gn.prototypenormal=function(r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(r)};Gn.prototype.plane=function(r){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(r)};Gn.barycoordFromPoint=function(r,e,t,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Gn.getBarycoord(r,e,t,n,i)};Gn.normal=function(r,e,t,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Gn.getNormal(r,e,t,n)};e0.prototype.extractAllPoints=function(r){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(r)};e0.prototype.extrude=function(r){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new tm(this,r)};e0.prototype.makeGeometry=function(r){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new zV(this,r)};Ge.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};Ge.prototype.distanceToManhattan=function(r){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(r)};Ge.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};q.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};q.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};q.prototype.getPositionFromMatrix=function(r){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(r)};q.prototype.getScaleFromMatrix=function(r){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(r)};q.prototype.getColumnFromMatrix=function(r,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,r)};q.prototype.applyProjection=function(r){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(r)};q.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};q.prototype.distanceToManhattan=function(r){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(r)};q.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};cn.prototype.fromAttribute=function(r,e,t){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(r,e,t)};cn.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};rn.prototype.getChildByName=function(r){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(r)};rn.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};rn.prototype.translate=function(r,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,r)};rn.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};rn.prototype.applyMatrix=function(r){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(r)};Object.defineProperties(rn.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(r){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=r}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Br.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(Br.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),bU},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});_w.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Ji.prototype.setLens=function(r,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),e!==void 0&&(this.filmGauge=e),this.setFocalLength(r)};Object.defineProperties(ns.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(r){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=r}},shadowCameraLeft:{set:function(r){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=r}},shadowCameraRight:{set:function(r){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=r}},shadowCameraTop:{set:function(r){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=r}},shadowCameraBottom:{set:function(r){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=r}},shadowCameraNear:{set:function(r){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=r}},shadowCameraFar:{set:function(r){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=r}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(r){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=r}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(r){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=r}},shadowMapHeight:{set:function(r){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=r}}});Object.defineProperties(Kn.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Gf},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Gf)}}});Kn.prototype.setDynamic=function(r){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(r===!0?Gf:Cu),this};Kn.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Kn.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};mn.prototype.addIndex=function(r){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(r)};mn.prototype.addAttribute=function(r,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(e&&e.isBufferAttribute)&&!(e&&e.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(r,new Kn(arguments[1],arguments[2]))):r==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(r,e)};mn.prototype.addDrawCall=function(r,e,t){t!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(r,e)};mn.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()};mn.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};mn.prototype.removeAttribute=function(r){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(r)};mn.prototype.applyMatrix=function(r){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(r)};Object.defineProperties(mn.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});wo.prototype.setDynamic=function(r){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(r===!0?Gf:Cu),this};wo.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};tm.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};tm.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};tm.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};mw.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Object.defineProperties(ei.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new yt}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(r){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=r===G1}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(r){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=r}}});Object.defineProperties(po.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(r){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=r}}});hn.prototype.clearTarget=function(r,e,t,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(r),this.clear(e,t,n)};hn.prototype.animate=function(r){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(r)};hn.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()};hn.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()};hn.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision};hn.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()};hn.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")};hn.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")};hn.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")};hn.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")};hn.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")};hn.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")};hn.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures};hn.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")};hn.prototype.enableScissorTest=function(r){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(r)};hn.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};hn.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};hn.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};hn.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};hn.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};hn.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};hn.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};hn.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};hn.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};hn.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()};Object.defineProperties(hn.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(r){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=r}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(r){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=r}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(r){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=r===!0?Z1:rh}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(fw.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(io.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(r){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=r}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(r){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=r}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(r){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=r}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(r){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=r}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(r){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=r}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(r){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=r}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(r){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=r}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(r){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=r}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(r){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=r}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(r){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=r}}});LH.prototype.load=function(r){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return new AH().load(r,function(n){e.setBuffer(n)}),this};q_.prototype.updateCubeMap=function(r,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(r,e)};q_.prototype.clear=function(r,e,t,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(r,e,t,n)};ic.crossOrigin=void 0;ic.loadTexture=function(r,e,t,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new sH;i.setCrossOrigin(this.crossOrigin);const s=i.load(r,t,void 0,n);return e&&(s.mapping=e),s};ic.loadTextureCube=function(r,e,t,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new rH;i.setCrossOrigin(this.crossOrigin);const s=i.load(r,t,void 0,n);return e&&(s.mapping=e),s};ic.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};ic.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:V1}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=V1);var YH=`#define GLSLIFY 1
// From https://github.com/hughsk/glsl-noise/blob/master/periodic/2d.glsl

//
// GLSL textureless classic 2D noise "cnoise",
// with an RSL-style periodic variant "pnoise".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-08-22
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/ashima/webgl-noise
//

vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }

vec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }

vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

vec2 fade(vec2 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// Classic Perlin noise, periodic variant
float perlin(vec2 P) {

  vec2 rep = vec2(255.0, 255.0);

  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period
  Pi = mod289(Pi);        // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0;
  vec4 gy = abs(gx) - 0.5;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x, gy.x);
  vec2 g10 = vec2(gx.y, gy.y);
  vec2 g01 = vec2(gx.z, gy.z);
  vec2 g11 = vec2(gx.w, gy.w);

  vec4 norm = taylorInvSqrt(
      vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;
  g01 *= norm.y;
  g10 *= norm.z;
  g11 *= norm.w;

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return map(2.3 * n_xy, -1.0, 1.0, 0.0, 1.0);
}

float fbm(vec2 pos, vec4 props) {
  float persistance = props.x;
  float lacunarity = props.y;
  float redistribution = props.z;
  int octaves = int(props.w);

  float result = 0.0;
  float amplitude = 1.0;
  float frequency = 1.0;
  float maximum = amplitude;

  for (int i = 0; i < 2; i++) {

    vec2 p = pos.xy * frequency;

    float noiseVal = perlin(p);
    result += noiseVal * amplitude;

    frequency *= lacunarity;
    amplitude *= persistance;
    maximum += amplitude;
  }

  float redistributed = pow(result, redistribution);
  return redistributed / maximum;
}
`,kM=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];class jH{constructor(e){const t=[new q(1,1,0),new q(-1,1,0),new q(1,-1,0),new q(-1,-1,0),new q(1,0,1),new q(-1,0,1),new q(1,0,-1),new q(-1,0,-1),new q(0,1,1),new q(0,-1,1),new q(0,1,-1),new q(0,-1,-1)];var n=new Array(512),i=new Array(512);e||(e=1),e*=65536,e=Math.floor(e),e<256&&(e|=e<<8);for(var s=0;s<256;s++){var a;s&1?a=kM[s]^e&255:a=kM[s]^e>>8&255,n[s]=n[s+256]=a,i[s]=i[s+256]=t[a%12]}this._seed=e,this._offsetMatrix=[new q(0,0,0),new q(0,0,1),new q(0,1,0),new q(0,1,1),new q(1,0,0),new q(1,0,1),new q(1,1,0),new q(1,1,1)],this.shaderChunk={defines:"",header:YH,main:"",uniforms:[{three_noise_seed:this._seed}]},this.perm=n,this.gradP=i}_fade(e){return e*e*e*(e*(e*6-15)+10)}_lerp(e,t,n){return(1-n)*e+n*t}_gradient(e){return e instanceof q?e.x+this.perm[e.y+this.perm[e.z]]:e.x+this.perm[e.y]}static map(e,t,n,i,s){return(e-t)*(s-i)/(n-t)+i}get2(e){e.z!==void 0&&(e=new Ge(e.x,e.y));const t=new Ge(Math.floor(e.x),Math.floor(e.y));e.sub(t),t.x&=255,t.y&=255;const n=[];for(let o=0;o<4;o++){const l=this._offsetMatrix[o*2],c=new Ge(l.x,l.y),u=this.gradP[this._gradient(new Ge().addVectors(t,c))],h=new Ge(u.x,u.y),d=new Ge().subVectors(e,c);n.push(h.dot(d))}const i=this._fade(e.x),s=this._fade(e.y);return this._lerp(this._lerp(n[0],n[2],i),this._lerp(n[1],n[3],i),s)}get3(e){if(e.z===void 0)throw"Input to Perlin::get3() must be of type THREE.Vector3";const t=new q(Math.floor(e.x),Math.floor(e.y),Math.floor(e.z));e.sub(t),t.x&=255,t.y&=255,t.z&=255;const n=[];for(let l=0;l<8;l++){const c=this._offsetMatrix[l],u=this.gradP[this._gradient(new q().addVectors(t,c))],h=new q().subVectors(e,c);n.push(u.dot(h))}const i=this._fade(e.x),s=this._fade(e.y),a=this._fade(e.z);return this._lerp(this._lerp(this._lerp(n[0],n[4],i),this._lerp(n[1],n[5],i),a),this._lerp(this._lerp(n[2],n[6],i),this._lerp(n[3],n[7],i),a),s)}}class JH{constructor(e){const{seed:t,scale:n,persistance:i,lacunarity:s,octaves:a,redistribution:o}=e;this._noise=new jH(t),this._scale=n||1,this._persistance=i||.5,this._lacunarity=s||2,this._octaves=a||6,this._redistribution=o||1}get2(e){let t=0,n=1,i=1,s=n,a=this._noise.get2.bind(this._noise);for(let l=0;l<this._octaves;l++){const c=new Ge(e.x*this._scale*i,e.y*this._scale*i),u=a(c);t+=u*n,i*=this._lacunarity,n*=this._persistance,s+=n}return Math.pow(t,this._redistribution)/s}get3(e){let t=0,n=1,i=1,s=n,a=this._noise.get3.bind(this._noise);for(let l=0;l<this._octaves;l++){const c=new q(e.x*this._scale*i,e.y*this._scale*i,e.z*this._scale*i),u=a(c);t+=u*n,i*=this._lacunarity,n*=this._persistance,s+=n}return Math.pow(t,this._redistribution)/s}}const KH=`
  uniform sampler2D map;
  uniform float elapsed;
  uniform float fps;
  uniform bool useFPSForFrameIndex;
  uniform vec2 tiles;
  uniform bool discardBackgroundColor;
  uniform vec3 backgroundColor;
  uniform float backgroundColorTolerance;

  varying vec4 vColor;
  varying float vLifetime;
  varying float vStartLifetime;
  varying float vRotation;
  varying float vStartFrame;

  void main()
  {
    gl_FragColor = vColor;
    float mid = 0.5;

    float frameIndex = round(vStartFrame) + (
      useFPSForFrameIndex == true
        ? fps == 0.0
            ? 0.0
            : max((vLifetime / 1000.0) * fps, 0.0)
        : max(min(floor(min(vLifetime / vStartLifetime, 1.0) * (tiles.x * tiles.y)), tiles.x * tiles.y - 1.0), 0.0)
    );
        
    float spriteXIndex = floor(mod(frameIndex, tiles.x));
    float spriteYIndex = floor(mod(frameIndex / tiles.x, tiles.y));

    vec2 frameUV = vec2(
      gl_PointCoord.x / tiles.x + spriteXIndex / tiles.x,
      gl_PointCoord.y / tiles.y + spriteYIndex / tiles.y);

    vec2 center = vec2(0.5, 0.5);
    vec2 centeredPoint = gl_PointCoord - center;

    mat2 rotation = mat2(
      cos(vRotation), sin(vRotation),
      -sin(vRotation), cos(vRotation)
    );

    centeredPoint = rotation * centeredPoint;
    vec2 centeredMiddlePoint = vec2(
      centeredPoint.x + center.x,
      centeredPoint.y + center.y
    );

    float dist = distance(centeredMiddlePoint, center);
    if (dist > 0.5) discard;

    vec2 uvPoint = vec2(
      centeredMiddlePoint.x / tiles.x + spriteXIndex / tiles.x,
      centeredMiddlePoint.y / tiles.y + spriteYIndex / tiles.y
    );

    vec4 rotatedTexture = texture2D(map, uvPoint);

    gl_FragColor = gl_FragColor * rotatedTexture;

    if (discardBackgroundColor && abs(length(rotatedTexture.rgb - backgroundColor.rgb)) < backgroundColorTolerance ) discard;
  }
`,QH=`
  attribute float size;
  attribute float colorR;
  attribute float colorG;
  attribute float colorB;
  attribute float colorA;
  attribute float lifetime;
  attribute float startLifetime;
  attribute float rotation;
  attribute float startFrame;

  varying mat4 vPosition;
  varying vec4 vColor;
  varying float vLifetime;
  varying float vStartLifetime;
  varying float vRotation;
  varying float vStartFrame;

  void main()
  {
    vColor = vec4(colorR, colorG, colorB, colorA);
    vLifetime = lifetime;
    vStartLifetime = startLifetime;
    vRotation = rotation;
    vStartFrame = startFrame;

    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
    gl_PointSize = size * (100.0 / length(mvPosition.xyz));
    gl_Position = projectionMatrix * mvPosition;
  }
`;let eG=0,Xf=[];const tG={"THREE.NoBlending":jr,"THREE.NormalBlending":Cs,"THREE.AdditiveBlending":Rl,"THREE.SubtractiveBlending":$d,"THREE.MultiplyBlending":Xd},VM={transform:{position:new k,rotation:new k,scale:new k(1,1,1)},duration:5,looping:!0,startDelay:0,startLifetime:5,startSpeed:1,startSize:1,startOpacity:1,startRotation:0,startColor:{min:{r:1,g:1,b:1},max:{r:1,g:1,b:1}},gravity:0,simulationSpace:"LOCAL",maxParticles:100,emission:{rateOverTime:10,rateOverDistance:0},shape:{shape:"SPHERE",sphere:{radius:1,radiusThickness:1,arc:360},cone:{angle:25,radius:1,radiusThickness:1,arc:360},circle:{radius:1,radiusThickness:1,arc:360},rectangle:{rotation:{x:0,y:0},scale:{x:1,y:1}},box:{scale:{x:1,y:1,z:1},emitFrom:"VOLUME"}},map:void 0,renderer:{blending:Cs,discardBackgroundColor:!1,backgroundColorTolerance:1,backgroundColor:{r:1,g:1,b:1},transparent:!0,depthTest:!0,depthWrite:!1},velocityOverLifetime:{isActive:!1,linear:{x:0,y:0,z:0},orbital:{x:0,y:0,z:0}},sizeOverLifetime:{isActive:!1,lifetimeCurve:{type:"BEZIER",scale:1,bezierPoints:[{x:0,y:0,percentage:0},{x:1,y:1,percentage:1}]}},opacityOverLifetime:{isActive:!1,lifetimeCurve:{type:"BEZIER",scale:1,bezierPoints:[{x:0,y:0,percentage:0},{x:1,y:1,percentage:1}]}},rotationOverLifetime:{isActive:!1,min:0,max:0},noise:{isActive:!1,useRandomOffset:!1,strength:1,frequency:.5,octaves:1,positionAmount:1,rotationAmount:0,sizeAmount:0},textureSheetAnimation:{tiles:new Pe(1,1),timeMode:"LIFETIME",fps:30,startFrame:0}},nG=({geometry:r,propertyName:e,maxParticles:t,factory:n})=>{r.setAttribute(e,new qt(new Float32Array(Array.from({length:t},typeof n=="function"?n:()=>n)),1))},HM=(r,{shape:e,sphere:t,cone:n,circle:i,rectangle:s,box:a},o,l,c)=>{const u=on(r.particleSystemId,o,r.normalizedLifetimePercentage);switch(e){case"SPHERE":XF(l,r.wrapperQuaternion,c,u,t);break;case"CONE":qF(l,r.wrapperQuaternion,c,u,n);break;case"CIRCLE":YF(l,r.wrapperQuaternion,c,u,i);break;case"RECTANGLE":jF(l,r.wrapperQuaternion,c,u,s);break;case"BOX":ZF(l,r.wrapperQuaternion,c,u,a);break}},iG=r=>{Xf=Xf.filter(({particleSystem:e,wrapper:t,generalData:{particleSystemId:n}})=>e!==r&&t!==r?!0:(GF(n),e.geometry.dispose(),Array.isArray(e.material)?e.material.forEach(i=>i.dispose()):e.material.dispose(),e.parent&&e.parent.remove(e),!1))},GM=(r=VM,e)=>{const t=e||Date.now(),n={particleSystemId:eG++,normalizedLifetimePercentage:0,distanceFromLastEmitByDistance:0,lastWorldPosition:new k(-99999),currentWorldPosition:new k(-99999),worldPositionChange:new k,worldQuaternion:new Dn,wrapperQuaternion:new Dn,lastWorldQuaternion:new Dn(-99999),worldEuler:new Vi,gravityVelocity:new k(0,0,0),startValues:{},linearVelocityData:void 0,orbitalVelocityData:void 0,lifetimeValues:{},creationTimes:[],noise:{isActive:!1,strength:0,positionAmount:0,rotationAmount:0,sizeAmount:0},isEnabled:!0},i=k1(VM,r,{applyToFirstObject:!1,skippedProperties:[]});let s=i.map||JF();const{transform:a,duration:o,looping:l,startDelay:c,startLifetime:u,startSpeed:h,startSize:d,startRotation:f,startColor:p,startOpacity:v,gravity:g,simulationSpace:m,maxParticles:_,emission:x,shape:y,renderer:b,noise:M,velocityOverLifetime:w,onUpdate:C,onComplete:T,textureSheetAnimation:S}=i;typeof b?.blending=="string"&&(b.blending=tG[b.blending]);const R=Array.from({length:_},()=>new k),H=Array.from({length:_},()=>new k);n.creationTimes=Array.from({length:_},()=>0),w.isActive&&(n.linearVelocityData=Array.from({length:_},()=>({speed:new k(w.linear.x?on(n.particleSystemId,w.linear.x,0):0,w.linear.y?on(n.particleSystemId,w.linear.y,0):0,w.linear.z?on(n.particleSystemId,w.linear.z,0):0),valueModifiers:{x:$o(w.linear.x||0)?Xa(n.particleSystemId,w.linear.x):void 0,y:$o(w.linear.y||0)?Xa(n.particleSystemId,w.linear.y):void 0,z:$o(w.linear.z||0)?Xa(n.particleSystemId,w.linear.z):void 0}})),n.orbitalVelocityData=Array.from({length:_},()=>({speed:new k(w.orbital.x?on(n.particleSystemId,w.orbital.x,0):0,w.orbital.y?on(n.particleSystemId,w.orbital.y,0):0,w.orbital.z?on(n.particleSystemId,w.orbital.z,0):0),valueModifiers:{x:$o(w.orbital.x||0)?Xa(n.particleSystemId,w.orbital.x):void 0,y:$o(w.orbital.y||0)?Xa(n.particleSystemId,w.orbital.y):void 0,z:$o(w.orbital.z||0)?Xa(n.particleSystemId,w.orbital.z):void 0},positionOffset:new k}))),["startSize","startOpacity"].forEach(J=>{n.startValues[J]=Array.from({length:_},()=>on(n.particleSystemId,i[J],0))}),["rotationOverLifetime"].forEach(J=>{const ue=i[J];ue.isActive&&(n.lifetimeValues[J]=Array.from({length:_},()=>er.randFloat(ue.min,ue.max)))}),n.noise={isActive:M.isActive,strength:M.strength,positionAmount:M.positionAmount,rotationAmount:M.rotationAmount,sizeAmount:M.sizeAmount,sampler:M.isActive?new JH({seed:Math.random(),scale:M.frequency,octaves:M.octaves}):void 0,offsets:M.useRandomOffset?Array.from({length:_},()=>Math.random()*100):void 0};const G=new Pi({uniforms:{elapsed:{value:0},map:{value:s},tiles:{value:S.tiles},fps:{value:S.fps},useFPSForFrameIndex:{value:S.timeMode==="FPS"},backgroundColor:{value:b.backgroundColor},discardBackgroundColor:{value:b.discardBackgroundColor},backgroundColorTolerance:{value:b.backgroundColorTolerance}},vertexShader:QH,fragmentShader:KH,transparent:b.transparent,blending:b.blending,depthTest:b.depthTest,depthWrite:b.depthWrite}),P=new Lt;for(let J=0;J<_;J++)HM(n,y,h,R[J],H[J]);P.setFromPoints(Array.from({length:_},(J,ue)=>R[ue].clone()));const z=(J,ue)=>{nG({geometry:P,propertyName:J,maxParticles:_,factory:ue})};z("isActive",0),z("lifetime",0),z("startLifetime",()=>on(n.particleSystemId,u,0)*1e3),z("startFrame",()=>S.startFrame?on(n.particleSystemId,S.startFrame,0):0),z("opacity",()=>on(n.particleSystemId,v,0)),z("rotation",()=>on(n.particleSystemId,f,0)),z("size",(J,ue)=>n.startValues.startSize[ue]),z("rotation",0);const W=Math.random();z("colorR",()=>p.min.r+W*(p.max.r-p.min.r)),z("colorG",()=>p.min.g+W*(p.max.g-p.min.g)),z("colorB",()=>p.min.b+W*(p.max.b-p.min.b)),z("colorA",0);const X=J=>{P.attributes.isActive.array[J]=0,P.attributes.colorA.array[J]=0,P.attributes.colorA.needsUpdate=!0},re=({particleIndex:J,activationTime:ue,position:Ce})=>{P.attributes.isActive.array[J]=1,n.creationTimes[J]=ue,n.noise.offsets&&(n.noise.offsets[J]=Math.random()*100);const Ee=Math.random();P.attributes.colorR.array[J]=p.min.r+Ee*(p.max.r-p.min.r),P.attributes.colorR.needsUpdate=!0,P.attributes.colorG.array[J]=p.min.g+Ee*(p.max.g-p.min.g),P.attributes.colorG.needsUpdate=!0,P.attributes.colorB.array[J]=p.min.b+Ee*(p.max.b-p.min.b),P.attributes.colorB.needsUpdate=!0,P.attributes.startFrame.array[J]=S.startFrame?on(n.particleSystemId,S.startFrame,0):0,P.attributes.startFrame.needsUpdate=!0,P.attributes.startLifetime.array[J]=on(n.particleSystemId,u,n.normalizedLifetimePercentage)*1e3,P.attributes.startLifetime.needsUpdate=!0,n.startValues.startSize[J]=on(n.particleSystemId,d,n.normalizedLifetimePercentage),P.attributes.size.array[J]=n.startValues.startSize[J],P.attributes.size.needsUpdate=!0,n.startValues.startOpacity[J]=on(n.particleSystemId,v,n.normalizedLifetimePercentage),P.attributes.colorA.array[J]=n.startValues.startOpacity[J],P.attributes.colorA.needsUpdate=!0,P.attributes.rotation.array[J]=on(n.particleSystemId,f,n.normalizedLifetimePercentage),P.attributes.rotation.needsUpdate=!0,i.rotationOverLifetime.isActive&&(n.lifetimeValues.rotationOverLifetime[J]=er.randFloat(i.rotationOverLifetime.min,i.rotationOverLifetime.max)),HM(n,y,h,R[J],H[J]);const Ue=Math.floor(J*3);P.attributes.position.array[Ue]=Ce.x+R[J].x,P.attributes.position.array[Ue+1]=Ce.y+R[J].y,P.attributes.position.array[Ue+2]=Ce.z+R[J].z,P.attributes.position.needsUpdate=!0,n.linearVelocityData&&n.linearVelocityData[J].speed.set(i.velocityOverLifetime.linear.x?on(n.particleSystemId,i.velocityOverLifetime.linear.x,0):0,i.velocityOverLifetime.linear.y?on(n.particleSystemId,i.velocityOverLifetime.linear.y,0):0,i.velocityOverLifetime.linear.z?on(n.particleSystemId,i.velocityOverLifetime.linear.z,0):0),n.orbitalVelocityData&&(n.orbitalVelocityData[J].speed.set(i.velocityOverLifetime.orbital.x?on(n.particleSystemId,i.velocityOverLifetime.orbital.x,0):0,i.velocityOverLifetime.orbital.y?on(n.particleSystemId,i.velocityOverLifetime.orbital.y,0):0,i.velocityOverLifetime.orbital.z?on(n.particleSystemId,i.velocityOverLifetime.orbital.z,0):0),n.orbitalVelocityData[J].positionOffset.set(R[J].x,R[J].y,R[J].z)),P.attributes.lifetime.array[J]=0,P.attributes.lifetime.needsUpdate=!0,z1({delta:0,generalData:n,normalizedConfig:i,attributes:ne.geometry.attributes,particleLifetimePercentage:0,particleIndex:J})};let ne=new wp(P,G);ne.position.copy(a.position),ne.rotation.x=er.degToRad(a.rotation.x),ne.rotation.y=er.degToRad(a.rotation.y),ne.rotation.z=er.degToRad(a.rotation.z),ne.scale.copy(a.scale);const be=t+on(n.particleSystemId,c)*1e3;let _e;return i.simulationSpace==="WORLD"&&(_e=new NF,_e.add(ne)),Xf.push({particleSystem:ne,wrapper:_e,generalData:n,onUpdate:C,onComplete:T,creationTime:be,lastEmissionTime:be,duration:o,looping:l,simulationSpace:m,gravity:g,emission:x,normalizedConfig:i,iterationCount:0,velocities:H,deactivateParticle:X,activateParticle:re}),{instance:_e||ne,resumeEmitter:()=>n.isEnabled=!0,pauseEmitter:()=>n.isEnabled=!1,dispose:()=>iG(ne)}},rG=({now:r,delta:e,elapsed:t})=>{Xf.forEach(n=>{const{onUpdate:i,generalData:s,onComplete:a,particleSystem:o,wrapper:l,creationTime:c,lastEmissionTime:u,duration:h,looping:d,emission:f,normalizedConfig:p,iterationCount:v,velocities:g,deactivateParticle:m,activateParticle:_,simulationSpace:x,gravity:y}=n,b=r-c,M=b%(h*1e3);s.normalizedLifetimePercentage=Math.max(Math.min(M/(h*1e3),1),0);const{lastWorldPosition:w,currentWorldPosition:C,worldPositionChange:T,lastWorldQuaternion:S,worldQuaternion:R,worldEuler:H,gravityVelocity:D,isEnabled:O}=s;l?.parent&&s.wrapperQuaternion.copy(l.parent.quaternion);const G={...w};if(Array.isArray(o.material)?o.material.forEach(P=>{P instanceof Pi&&(P.uniforms.elapsed.value=t)}):o.material instanceof Pi&&(o.material.uniforms.elapsed.value=t),o.getWorldPosition(C),w.x!==-99999&&T.set(C.x-w.x,C.y-w.y,C.z-w.z),s.distanceFromLastEmitByDistance+=T.length(),o.getWorldPosition(w),o.getWorldQuaternion(R),(S.x===-99999||S.x!==R.x||S.y!==R.y||S.z!==R.z)&&(H.setFromQuaternion(R),S.copy(R),D.set(w.x,w.y+y,w.z),o.worldToLocal(D)),s.creationTimes.forEach((P,z)=>{if(o.geometry.attributes.isActive.array[z]){const W=r-P;if(W>o.geometry.attributes.startLifetime.array[z])m(z);else{const X=g[z];if(X.x-=D.x*e,X.y-=D.y*e,X.z-=D.z*e,y!==0||X.x!==0||X.y!==0||X.z!==0||T.x!==0||T.y!==0||T.z!==0){const ne=z*3,be=o.geometry.attributes.position.array;x==="WORLD"&&(be[ne]-=T.x,be[ne+1]-=T.y,be[ne+2]-=T.z),be[ne]+=X.x*e,be[ne+1]+=X.y*e,be[ne+2]+=X.z*e,o.geometry.attributes.position.needsUpdate=!0}o.geometry.attributes.lifetime.array[z]=W,o.geometry.attributes.lifetime.needsUpdate=!0;const re=W/o.geometry.attributes.startLifetime.array[z];z1({delta:e,generalData:s,normalizedConfig:p,attributes:o.geometry.attributes,particleLifetimePercentage:re,particleIndex:z})}}}),O&&(d||b<h*1e3)){const P=r-u,z=f.rateOverTime?Math.floor(on(s.particleSystemId,f.rateOverTime,s.normalizedLifetimePercentage)*(P/1e3)):0,W=f.rateOverDistance?on(s.particleSystemId,f.rateOverDistance,s.normalizedLifetimePercentage):0,X=W>0&&s.distanceFromLastEmitByDistance>0?Math.floor(s.distanceFromLastEmitByDistance/(1/W)):0,re=X>0?{x:(C.x-G.x)/X,y:(C.y-G.y)/X,z:(C.z-G.z)/X}:null,ne=z+X;if(W>0&&X>=1&&(s.distanceFromLastEmitByDistance=0),ne>0){let be=0;for(let _e=0;_e<ne;_e++){let $=-1;if(o.geometry.attributes.isActive.array.find((K,ge)=>K?!1:($=ge,!0)),$!==-1&&$<o.geometry.attributes.isActive.array.length){let K={x:0,y:0,z:0};re&&be<X&&(K={x:re.x*be,y:re.y*be,z:re.z*be},be++),_({particleIndex:$,activationTime:r,position:K}),n.lastEmissionTime=r}}}i&&i({particleSystem:o,delta:e,elapsed:t,lifetime:b,normalizedLifetime:M,iterationCount:v+1})}else a&&a({particleSystem:o})})};var sG=bt("<!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!>",1),aG=bt("<!> <!> <!>",1);function oG(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(_,"$gltf",t),s=Gp();let a=st(e,"ref",15),o=st(e,"mode",3,"travel"),l=st(e,"scale",19,()=>[1,1,1]),c=ti(e,["$$slots","$$events","$$legacy","fallback","error","children","ref","mode","scale"]);a(new mr);let u=ut(void 0),h=ut(void 0),d=ut(void 0),f=ut(void 0),p=ut(!0),v=ut(!1);const g=new b_,m={now:0,pauseStartTime:0,totalPauseTime:0,elapsed:0,delta:0},_=Mr("/models/fire_animation-transformed.glb",{dracoLoader:s}),{actions:x,mixer:y}=R1(_,a()),b={duration:.5,looping:!0,startLifetime:{min:.6,max:.7},startSpeed:{min:.9,max:1.1},startSize:{min:.8,max:1.2},startRotation:{min:-180,max:180},startColor:{min:{r:.8,g:.3,b:.05},max:{r:1,g:.6,b:.1}},transform:{rotation:new k(0,0,0)},gravity:0,maxParticles:500,emission:{rateOverTime:1500},shape:{shape:"SPHERE",sphere:{radius:.5}},renderer:{blending:Rl,discardBackgroundColor:!1,backgroundColorTolerance:0,backgroundColor:new Ye(0,0,0),transparent:!0,depthTest:!0,depthWrite:!1},sizeOverLifetime:{isActive:!0,lifetimeCurve:{type:"BEZIER",bezierPoints:[{x:0,y:0,percentage:0},{x:.4,y:.6},{x:.7,y:.9},{x:1,y:1,percentage:1}],scale:1}},opacityOverLifetime:{isActive:!0,lifetimeCurve:{type:"BEZIER",bezierPoints:[{x:0,y:.5,percentage:0},{x:.1,y:1},{x:.8,y:1},{x:1,y:.3,percentage:1}],scale:1}},rotationOverLifetime:{isActive:!0,min:-50,max:50},noise:{isActive:!0,useRandomOffset:!0,strength:.05,positionAmount:.1,rotationAmount:.5,frequency:1,octaves:1,sizeAmount:.5},map:void 0},M={duration:.5,looping:!0,startLifetime:{min:.2,max:.5},startSpeed:{min:5,max:10},startSize:{min:1,max:2.5},startRotation:{min:-180,max:180},startColor:{min:{r:.9,g:.2,b:.02},max:{r:1,g:.7,b:.1}},transform:{rotation:new k(0,0,0)},gravity:.1,maxParticles:400,emission:{rateOverTime:1e3},shape:{shape:"SPHERE",sphere:{radius:1}},renderer:{blending:Rl,discardBackgroundColor:!1,backgroundColorTolerance:0,backgroundColor:new Ye(0,0,0),transparent:!0,depthTest:!0,depthWrite:!1},sizeOverLifetime:{isActive:!0,lifetimeCurve:{type:"BEZIER",bezierPoints:[{x:0,y:.8,percentage:0},{x:.2,y:1},{x:.6,y:.9},{x:1,y:.3,percentage:1}],scale:1}},opacityOverLifetime:{isActive:!0,lifetimeCurve:{type:"BEZIER",bezierPoints:[{x:0,y:1,percentage:0},{x:.4,y:.9},{x:.7,y:.5},{x:1,y:0,percentage:1}],scale:1}},rotationOverLifetime:{isActive:!0,min:-90,max:90},noise:{isActive:!0,useRandomOffset:!0,strength:.2,positionAmount:.3,rotationAmount:.7,frequency:1.5,octaves:2,sizeAmount:.6},map:void 0};new m_().load("/textures/flame.webp",R=>{R.minFilter=xn,R.magFilter=xn,b.map=R,M.map=R,E(u)&&E(p)&&C(E(u))},void 0,R=>{console.error("Error loading flame texture:",R)});function C(R){if(!(!R||!E(p)||E(v)))try{if(m.now=Date.now(),b.map){const H=GM(b,m.now);H&&H.instance&&(Ne(d,H.instance,!0),E(d).scale.set(o()==="travel"?1:0,o()==="travel"?1:0,o()==="travel"?1:0),R.add(E(d)))}if(M.map){const H=GM(M,m.now);H&&H.instance&&(Ne(f,H.instance,!0),E(f).scale.set(o()==="explosion"?1:0,o()==="explosion"?1:0,o()==="explosion"?1:0),R.add(E(f)))}E(h)&&(E(h).visible=o()==="travel"),Ne(v,!0)}catch(H){console.error("Failed to initialize particle systems:",H)}}Ns(R=>{if(!E(p)||!E(v))return;const H=o()==="explosion";E(d)&&E(f)&&(H?(E(f).scale.set(1,1,1),E(d).scale.set(0,0,0)):(E(f).scale.set(0,0,0),E(d).scale.set(1,1,1))),E(h)&&(E(h).visible=!H);const D=g.getDelta();m.now=Date.now()-m.totalPauseTime,m.delta=D>.1?.1:D,m.elapsed=g.getElapsedTime(),rG(m),y&&y.update(R)});function T(){Ne(p,!1),E(u)&&(E(d)&&(E(u).remove(E(d)),Ne(d,void 0)),E(f)&&(E(u).remove(E(f)),Ne(f,void 0)))}Le(r,xi({get is(){return a()},dispose:!1},()=>c,{children:(R,H)=>{var D=aG(),O=Re(D);Fe(O,()=>Le.Group,(W,X)=>{X(W,{ondestroy:T,get ref(){return E(u)},set ref(re){Ne(u,re,!0)}})});var G=He(O,2);{var P=W=>{var X=Xe(),re=Re(X);const ne=xt(()=>o()==="travel");Fe(re,()=>Le.Group,(be,_e)=>{_e(be,{name:"Sketchfab_Scene",get scale(){return l()},get visible(){return E(ne)},get ref(){return E(h)},set ref($){Ne(h,$,!0)},children:($,K)=>{var ge=Xe(),J=Re(ge);Fe(J,()=>Le.Group,(ue,Ce)=>{Ce(ue,{name:"Sketchfab_model",rotation:[-Math.PI/2,0,0],scale:.4,children:(Ee,Ue)=>{var xe=Xe(),ye=Re(xe);Fe(ye,()=>Le.Group,(N,pe)=>{pe(N,{name:"7932a0dac3824e028da37f46ce28fafdfbx",rotation:[Math.PI/2,0,0],children:(ie,F)=>{var I=Xe(),oe=Re(I);Fe(oe,()=>Le.Group,(j,L)=>{L(j,{name:"Object_2",children:(A,Z)=>{var ee=Xe(),V=Re(ee);Fe(V,()=>Le.Group,(Y,se)=>{se(Y,{name:"RootNode",children:(le,ce)=>{var Ie=sG(),Se=Re(Ie);Fe(Se,()=>Le.Group,(et,U)=>{U(et,{name:"flame01",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame01_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame01_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var De=He(Se,2);Fe(De,()=>Le.Group,(et,U)=>{U(et,{name:"flame02",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame02_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame02_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var nt=He(De,2);Fe(nt,()=>Le.Group,(et,U)=>{U(et,{name:"flame03",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame03_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame03_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Je=He(nt,2);Fe(Je,()=>Le.Group,(et,U)=>{U(et,{name:"flame04",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame04_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame04_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var ke=He(Je,2);Fe(ke,()=>Le.Group,(et,U)=>{U(et,{name:"flame05",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame05_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame05_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var ot=He(ke,2);Fe(ot,()=>Le.Group,(et,U)=>{U(et,{name:"flame06",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame06_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame06_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var pt=He(ot,2);Fe(pt,()=>Le.Group,(et,U)=>{U(et,{name:"flame07",scale:[1,1,1.06],children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame07_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame07_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Pt=He(pt,2);Fe(Pt,()=>Le.Group,(et,U)=>{U(et,{name:"flame08",scale:[1,1,1.12],children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame08_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame08_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Q=He(Pt,2);Fe(Q,()=>Le.Group,(et,U)=>{U(et,{name:"flame09",scale:[1,1,1.14],children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame09_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame09_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var ze=He(Q,2);Fe(ze,()=>Le.Group,(et,U)=>{U(et,{name:"flame10",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame10_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame10_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Me=He(ze,2);Fe(Me,()=>Le.Group,(et,U)=>{U(et,{name:"flame11",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame11_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame11_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Te=He(Me,2);Fe(Te,()=>Le.Group,(et,U)=>{U(et,{name:"flame12",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame12_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame12_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var We=He(Te,2);Fe(We,()=>Le.Group,(et,U)=>{U(et,{name:"flame13",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame13_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame13_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var $e=He(We,2);Fe($e,()=>Le.Group,(et,U)=>{U(et,{name:"flame14",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame14_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame14_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var ht=He($e,2);Fe(ht,()=>Le.Group,(et,U)=>{U(et,{name:"flame16",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame16_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame16_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var Gt=He(ht,2);Fe(Gt,()=>Le.Group,(et,U)=>{U(et,{name:"flame15",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame15_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame15_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})});var dn=He(Gt,2);Fe(dn,()=>Le.Group,(et,U)=>{U(et,{name:"flame17",children:(ae,fe)=>{var de=Xe(),Ae=Re(de);Fe(Ae,()=>Le.Mesh,(Ze,Ve)=>{Ve(Ze,{name:"flame17_phong2_0",castShadow:!0,receiveShadow:!0,get geometry(){return i().nodes.flame17_phong2_0.geometry},get material(){return i().materials.phong2}})}),we(ae,de)},$$slots:{default:!0}})}),we(le,Ie)},$$slots:{default:!0}})}),we(A,ee)},$$slots:{default:!0}})}),we(ie,I)},$$slots:{default:!0}})}),we(Ee,xe)},$$slots:{default:!0}})}),we($,ge)},$$slots:{default:!0}})}),we(W,X)};yn(G,W=>{i()&&W(P)})}var z=He(G,2);Bt(z,()=>e.children??Rt,()=>({ref:a()})),we(R,D)},$$slots:{default:!0}}));var S=Cn({actions:x,mixer:y});return n(),S}var lG=bt("<!> <!> <!>",1);function cG(r,e){An(e,!0);let t=st(e,"id",3,0),n=ut(void 0),i=ut(void 0),s=ut(void 0),a=ut(!0),o=ut(!0);const{listener:l}=FN("default");let c=ut("travel");const{load:u}=L_(M_),h=u("/sounds/Fireball.wav"),d=1e3,f=400,p=250,v=1,g=3;let m=ut("travel"),_=ut(hr(performance.now()));const x=e.direction||new k().subVectors(e.endPosition,e.startPosition).normalize(),y=(()=>{const O=(e.startPosition.x+e.endPosition.x)/2;let G=2;const P=e.startPosition.distanceTo(e.endPosition);G=Math.min(P*.15,3);const z=Math.max(e.startPosition.y,e.endPosition.y)+G,W=(e.startPosition.z+e.endPosition.z)/2;return new k(O,z,W)})();let b=e.startPosition.y;const M=new k(2*(y.x-e.startPosition.x),2*(y.y-e.startPosition.y),2*(y.z-e.startPosition.z)).normalize();function w(O){const G=new Dn,P=new k(0,0,1);G.setFromUnitVectors(P,O);const z=new Vi;return z.setFromQuaternion(G),z}w(x);function C(){if(E(a)&&(console.log("Fireball animation complete, calling onComplete with ID:",t()),Ne(a,!1),e.onComplete))try{e.onComplete(t())}catch(O){console.error("Error in onComplete callback:",O)}}function T(){E(n)&&(Ne(c,"explosion"),E(i)&&(E(i).intensity=8,E(i).distance=50,E(i).color.set("#ffaa00")))}Ns(O=>{if(!E(a)||!E(n)||!e.startPosition||!e.endPosition)return;const G=performance.now(),P=G-E(_);try{if(E(m)==="travel")if(P<d){const z=P/d;if(z<.1&&E(s)&&E(o)&&!E(s).isPlaying)try{E(s).play(),Ne(o,!1)}catch(_e){console.warn("Could not play fireball sound:",_e)}const W=z,X=1-W,re=X*X*e.startPosition.x+2*X*W*y.x+W*W*e.endPosition.x,ne=X*X*e.startPosition.y+2*X*W*y.y+W*W*e.endPosition.y,be=X*X*e.startPosition.z+2*X*W*y.z+W*W*e.endPosition.z;if(E(n)&&(E(n).position.set(re,ne,be),Math.abs(ne-b)>.2)){const $=2*X*(y.x-e.startPosition.x)+2*W*(e.endPosition.x-y.x),K=2*X*(y.y-e.startPosition.y)+2*W*(e.endPosition.y-y.y),ge=2*X*(y.z-e.startPosition.z)+2*W*(e.endPosition.z-y.z),J=new k($,K,ge).normalize(),ue=new k(re+J.x,ne+J.y,be+J.z),Ce=new Wt;Ce.position.copy(E(n).position),Ce.lookAt(ue),E(n).rotation.set(Ce.rotation.x-Math.PI/2,Ce.rotation.y,Ce.rotation.z),b=ne}E(i)&&(E(i).position.set(re,ne,be),E(i).intensity=2+z*2,E(i).distance=30+z*10)}else E(n)&&E(n).position.copy(e.endPosition),E(i)&&E(i).position.copy(e.endPosition),Ne(m,"explosion"),Ne(_,G,!0),T();else if(E(m)==="explosion")if(P<f){const z=P/f,W=v+(g-v)*sF(z);if(E(i)){E(i).intensity=8*(1-z*.3),E(i).distance=50*(1-z*.2);const X=.1-z*.1,re=1,ne=.5+.3*(1-z),be=new Ye().setHSL(X,re,ne);E(i).color.copy(be)}}else Ne(m,"fadeout"),Ne(_,G,!0);else if(E(m)==="fadeout")if(P<p){const z=P/p;E(i)&&(E(i).intensity=5*(1-z),E(i).distance=40*(1-z))}else C()}catch(z){console.error("Animation error:",z),C()}});function S(){if(Ne(a,!1),E(s)&&E(s).isPlaying)try{E(s).stop()}catch(O){console.warn("Error stopping audio:",O)}}var R=Xe(),H=Re(R);{var D=O=>{var G=Xe(),P=Re(G);Fe(P,()=>Le.Group,(z,W)=>{W(z,{oncreate:X=>{if(X){X.position.copy(e.startPosition);const re=new k(e.startPosition.x+M.x,e.startPosition.y+M.y,e.startPosition.z+M.z),ne=new Wt;ne.position.copy(e.startPosition),ne.lookAt(re),X.rotation.set(ne.rotation.x-Math.PI/2,ne.rotation.y,ne.rotation.z)}},ondestroy:S,get ref(){return E(n)},set ref(X){Ne(n,X,!0)},children:(X,re)=>{var ne=lG(),be=Re(ne);oG(be,{scale:[1.2,1,1.2],get mode(){return E(c)}});var _e=He(be,2);Fe(_e,()=>Le.PointLight,(ge,J)=>{J(ge,{color:"#ff7700",intensity:3,distance:40,decay:1.5,get ref(){return E(i)},set ref(ue){Ne(i,ue,!0)}})});var $=He(_e,2);{var K=ge=>{var J=Xe(),ue=Re(J);_r(ue,()=>h,null,(Ce,Ee)=>{NN(Ce,{get src(){return E(Ee)},listener:l,volume:.6,oncreate:Ue=>{Ue&&E(Ee)&&(Ue.setBuffer(E(Ee)),Ue.setVolume(.4),Ue.setLoop(!1))},get ref(){return E(s)},set ref(Ue){Ne(s,Ue,!0)}})}),we(ge,J)};yn($,ge=>{l&&ge(K)})}we(X,ne)},$$slots:{default:!0}})}),we(O,G)};yn(H,O=>{E(a)&&O(D)})}we(r,R),Cn()}var Xt;(function(r){r.assertEqual=i=>i;function e(i){}r.assertIs=e;function t(i){throw new Error}r.assertNever=t,r.arrayToEnum=i=>{const s={};for(const a of i)s[a]=a;return s},r.getValidEnumValues=i=>{const s=r.objectKeys(i).filter(o=>typeof i[i[o]]!="number"),a={};for(const o of s)a[o]=i[o];return r.objectValues(a)},r.objectValues=i=>r.objectKeys(i).map(function(s){return i[s]}),r.objectKeys=typeof Object.keys=="function"?i=>Object.keys(i):i=>{const s=[];for(const a in i)Object.prototype.hasOwnProperty.call(i,a)&&s.push(a);return s},r.find=(i,s)=>{for(const a of i)if(s(a))return a},r.isInteger=typeof Number.isInteger=="function"?i=>Number.isInteger(i):i=>typeof i=="number"&&isFinite(i)&&Math.floor(i)===i;function n(i,s=" | "){return i.map(a=>typeof a=="string"?`'${a}'`:a).join(s)}r.joinValues=n,r.jsonStringifyReplacer=(i,s)=>typeof s=="bigint"?s.toString():s})(Xt||(Xt={}));var Ev;(function(r){r.mergeShapes=(e,t)=>({...e,...t})})(Ev||(Ev={}));const tt=Xt.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),xs=r=>{switch(typeof r){case"undefined":return tt.undefined;case"string":return tt.string;case"number":return isNaN(r)?tt.nan:tt.number;case"boolean":return tt.boolean;case"function":return tt.function;case"bigint":return tt.bigint;case"symbol":return tt.symbol;case"object":return Array.isArray(r)?tt.array:r===null?tt.null:r.then&&typeof r.then=="function"&&r.catch&&typeof r.catch=="function"?tt.promise:typeof Map<"u"&&r instanceof Map?tt.map:typeof Set<"u"&&r instanceof Set?tt.set:typeof Date<"u"&&r instanceof Date?tt.date:tt.object;default:return tt.unknown}},Be=Xt.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),uG=r=>JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:");class sr extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=n=>{this.issues=[...this.issues,n]},this.addIssues=(n=[])=>{this.issues=[...this.issues,...n]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(s){return s.message},n={_errors:[]},i=s=>{for(const a of s.issues)if(a.code==="invalid_union")a.unionErrors.map(i);else if(a.code==="invalid_return_type")i(a.returnTypeError);else if(a.code==="invalid_arguments")i(a.argumentsError);else if(a.path.length===0)n._errors.push(t(a));else{let o=n,l=0;for(;l<a.path.length;){const c=a.path[l];l===a.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(t(a))):o[c]=o[c]||{_errors:[]},o=o[c],l++}}};return i(this),n}static assert(e){if(!(e instanceof sr))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,Xt.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},n=[];for(const i of this.issues)i.path.length>0?(t[i.path[0]]=t[i.path[0]]||[],t[i.path[0]].push(e(i))):n.push(e(i));return{formErrors:n,fieldErrors:t}}get formErrors(){return this.flatten()}}sr.create=r=>new sr(r);const Wl=(r,e)=>{let t;switch(r.code){case Be.invalid_type:r.received===tt.undefined?t="Required":t=`Expected ${r.expected}, received ${r.received}`;break;case Be.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(r.expected,Xt.jsonStringifyReplacer)}`;break;case Be.unrecognized_keys:t=`Unrecognized key(s) in object: ${Xt.joinValues(r.keys,", ")}`;break;case Be.invalid_union:t="Invalid input";break;case Be.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${Xt.joinValues(r.options)}`;break;case Be.invalid_enum_value:t=`Invalid enum value. Expected ${Xt.joinValues(r.options)}, received '${r.received}'`;break;case Be.invalid_arguments:t="Invalid function arguments";break;case Be.invalid_return_type:t="Invalid function return type";break;case Be.invalid_date:t="Invalid date";break;case Be.invalid_string:typeof r.validation=="object"?"includes"in r.validation?(t=`Invalid input: must include "${r.validation.includes}"`,typeof r.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${r.validation.position}`)):"startsWith"in r.validation?t=`Invalid input: must start with "${r.validation.startsWith}"`:"endsWith"in r.validation?t=`Invalid input: must end with "${r.validation.endsWith}"`:Xt.assertNever(r.validation):r.validation!=="regex"?t=`Invalid ${r.validation}`:t="Invalid";break;case Be.too_small:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at least":"more than"} ${r.minimum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at least":"over"} ${r.minimum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${r.minimum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly equal to ":r.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(r.minimum))}`:t="Invalid input";break;case Be.too_big:r.type==="array"?t=`Array must contain ${r.exact?"exactly":r.inclusive?"at most":"less than"} ${r.maximum} element(s)`:r.type==="string"?t=`String must contain ${r.exact?"exactly":r.inclusive?"at most":"under"} ${r.maximum} character(s)`:r.type==="number"?t=`Number must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="bigint"?t=`BigInt must be ${r.exact?"exactly":r.inclusive?"less than or equal to":"less than"} ${r.maximum}`:r.type==="date"?t=`Date must be ${r.exact?"exactly":r.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(r.maximum))}`:t="Invalid input";break;case Be.custom:t="Invalid input";break;case Be.invalid_intersection_types:t="Intersection results could not be merged";break;case Be.not_multiple_of:t=`Number must be a multiple of ${r.multipleOf}`;break;case Be.not_finite:t="Number must be finite";break;default:t=e.defaultError,Xt.assertNever(r)}return{message:t}};let Uw=Wl;function hG(r){Uw=r}function qf(){return Uw}const Zf=r=>{const{data:e,path:t,errorMaps:n,issueData:i}=r,s=[...t,...i.path||[]],a={...i,path:s};if(i.message!==void 0)return{...i,path:s,message:i.message};let o="";const l=n.filter(c=>!!c).slice().reverse();for(const c of l)o=c(a,{data:e,defaultError:o}).message;return{...i,path:s,message:o}},dG=[];function Qe(r,e){const t=qf(),n=Zf({issueData:e,data:r.data,path:r.path,errorMaps:[r.common.contextualErrorMap,r.schemaErrorMap,t,t===Wl?void 0:Wl].filter(i=>!!i)});r.common.issues.push(n)}class _i{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const n=[];for(const i of t){if(i.status==="aborted")return wt;i.status==="dirty"&&e.dirty(),n.push(i.value)}return{status:e.value,value:n}}static async mergeObjectAsync(e,t){const n=[];for(const i of t){const s=await i.key,a=await i.value;n.push({key:s,value:a})}return _i.mergeObjectSync(e,n)}static mergeObjectSync(e,t){const n={};for(const i of t){const{key:s,value:a}=i;if(s.status==="aborted"||a.status==="aborted")return wt;s.status==="dirty"&&e.dirty(),a.status==="dirty"&&e.dirty(),s.value!=="__proto__"&&(typeof a.value<"u"||i.alwaysSet)&&(n[s.value]=a.value)}return{status:e.value,value:n}}}const wt=Object.freeze({status:"aborted"}),bl=r=>({status:"dirty",value:r}),Di=r=>({status:"valid",value:r}),Av=r=>r.status==="aborted",Cv=r=>r.status==="dirty",mo=r=>r.status==="valid",Du=r=>typeof Promise<"u"&&r instanceof Promise;function Yf(r,e,t,n){if(typeof e=="function"?r!==e||!0:!e.has(r))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e.get(r)}function Bw(r,e,t,n,i){if(typeof e=="function"?r!==e||!0:!e.has(r))throw new TypeError("Cannot write private member to an object whose class did not declare it");return e.set(r,t),t}var lt;(function(r){r.errToObj=e=>typeof e=="string"?{message:e}:e||{},r.toString=e=>typeof e=="string"?e:e?.message})(lt||(lt={}));var Gc,Wc;class is{constructor(e,t,n,i){this._cachedPath=[],this.parent=e,this.data=t,this._path=n,this._key=i}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const WM=(r,e)=>{if(mo(e))return{success:!0,data:e.value};if(!r.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new sr(r.common.issues);return this._error=t,this._error}}};function Dt(r){if(!r)return{};const{errorMap:e,invalid_type_error:t,required_error:n,description:i}=r;if(e&&(t||n))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:i}:{errorMap:(a,o)=>{var l,c;const{message:u}=r;return a.code==="invalid_enum_value"?{message:u??o.defaultError}:typeof o.data>"u"?{message:(l=u??n)!==null&&l!==void 0?l:o.defaultError}:a.code!=="invalid_type"?{message:o.defaultError}:{message:(c=u??t)!==null&&c!==void 0?c:o.defaultError}},description:i}}class Ft{get description(){return this._def.description}_getType(e){return xs(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:xs(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new _i,ctx:{common:e.parent.common,data:e.data,parsedType:xs(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(Du(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const n=this.safeParse(e,t);if(n.success)return n.data;throw n.error}safeParse(e,t){var n;const i={common:{issues:[],async:(n=t?.async)!==null&&n!==void 0?n:!1,contextualErrorMap:t?.errorMap},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:xs(e)},s=this._parseSync({data:e,path:i.path,parent:i});return WM(i,s)}"~validate"(e){var t,n;const i={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:xs(e)};if(!this["~standard"].async)try{const s=this._parseSync({data:e,path:[],parent:i});return mo(s)?{value:s.value}:{issues:i.common.issues}}catch(s){!((n=(t=s?.message)===null||t===void 0?void 0:t.toLowerCase())===null||n===void 0)&&n.includes("encountered")&&(this["~standard"].async=!0),i.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:i}).then(s=>mo(s)?{value:s.value}:{issues:i.common.issues})}async parseAsync(e,t){const n=await this.safeParseAsync(e,t);if(n.success)return n.data;throw n.error}async safeParseAsync(e,t){const n={common:{issues:[],contextualErrorMap:t?.errorMap,async:!0},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:xs(e)},i=this._parse({data:e,path:n.path,parent:n}),s=await(Du(i)?i:Promise.resolve(i));return WM(n,s)}refine(e,t){const n=i=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(i):t;return this._refinement((i,s)=>{const a=e(i),o=()=>s.addIssue({code:Be.custom,...n(i)});return typeof Promise<"u"&&a instanceof Promise?a.then(l=>l?!0:(o(),!1)):a?!0:(o(),!1)})}refinement(e,t){return this._refinement((n,i)=>e(n)?!0:(i.addIssue(typeof t=="function"?t(n,i):t),!1))}_refinement(e){return new zr({schema:this,typeName:St.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Qr.create(this,this._def)}nullable(){return ya.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Or.create(this)}promise(){return Xl.create(this,this._def)}or(e){return Uu.create([this,e],this._def)}and(e){return Bu.create(this,e,this._def)}transform(e){return new zr({...Dt(this._def),schema:this,typeName:St.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Gu({...Dt(this._def),innerType:this,defaultValue:t,typeName:St.ZodDefault})}brand(){return new s0({typeName:St.ZodBranded,type:this,...Dt(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Wu({...Dt(this._def),innerType:this,catchValue:t,typeName:St.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return oh.create(this,e)}readonly(){return $u.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const fG=/^c[^\s-]{8,}$/i,pG=/^[0-9a-z]+$/,mG=/^[0-9A-HJKMNP-TV-Z]{26}$/i,gG=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,vG=/^[a-z0-9_-]{21}$/i,_G=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,yG=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,xG=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,MG="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Vg;const bG=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,SG=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,wG=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,TG=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,EG=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,AG=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,zw="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",CG=new RegExp(`^${zw}$`);function kw(r){let e="[0-5]\\d";r.precision?e=`${e}\\.\\d{${r.precision}}`:r.precision==null&&(e=`${e}(\\.\\d+)?`);const t=r.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function RG(r){return new RegExp(`^${kw(r)}$`)}function Vw(r){let e=`${zw}T${kw(r)}`;const t=[];return t.push(r.local?"Z?":"Z"),r.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function LG(r,e){return!!((e==="v4"||!e)&&bG.test(r)||(e==="v6"||!e)&&wG.test(r))}function PG(r,e){if(!_G.test(r))return!1;try{const[t]=r.split("."),n=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),i=JSON.parse(atob(n));return!(typeof i!="object"||i===null||!i.typ||!i.alg||e&&i.alg!==e)}catch{return!1}}function IG(r,e){return!!((e==="v4"||!e)&&SG.test(r)||(e==="v6"||!e)&&TG.test(r))}class Dr extends Ft{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==tt.string){const s=this._getOrReturnCtx(e);return Qe(s,{code:Be.invalid_type,expected:tt.string,received:s.parsedType}),wt}const n=new _i;let i;for(const s of this._def.checks)if(s.kind==="min")e.data.length<s.value&&(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.too_small,minimum:s.value,type:"string",inclusive:!0,exact:!1,message:s.message}),n.dirty());else if(s.kind==="max")e.data.length>s.value&&(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.too_big,maximum:s.value,type:"string",inclusive:!0,exact:!1,message:s.message}),n.dirty());else if(s.kind==="length"){const a=e.data.length>s.value,o=e.data.length<s.value;(a||o)&&(i=this._getOrReturnCtx(e,i),a?Qe(i,{code:Be.too_big,maximum:s.value,type:"string",inclusive:!0,exact:!0,message:s.message}):o&&Qe(i,{code:Be.too_small,minimum:s.value,type:"string",inclusive:!0,exact:!0,message:s.message}),n.dirty())}else if(s.kind==="email")xG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"email",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="emoji")Vg||(Vg=new RegExp(MG,"u")),Vg.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"emoji",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="uuid")gG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"uuid",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="nanoid")vG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"nanoid",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="cuid")fG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"cuid",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="cuid2")pG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"cuid2",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="ulid")mG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"ulid",code:Be.invalid_string,message:s.message}),n.dirty());else if(s.kind==="url")try{new URL(e.data)}catch{i=this._getOrReturnCtx(e,i),Qe(i,{validation:"url",code:Be.invalid_string,message:s.message}),n.dirty()}else s.kind==="regex"?(s.regex.lastIndex=0,s.regex.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"regex",code:Be.invalid_string,message:s.message}),n.dirty())):s.kind==="trim"?e.data=e.data.trim():s.kind==="includes"?e.data.includes(s.value,s.position)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:{includes:s.value,position:s.position},message:s.message}),n.dirty()):s.kind==="toLowerCase"?e.data=e.data.toLowerCase():s.kind==="toUpperCase"?e.data=e.data.toUpperCase():s.kind==="startsWith"?e.data.startsWith(s.value)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:{startsWith:s.value},message:s.message}),n.dirty()):s.kind==="endsWith"?e.data.endsWith(s.value)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:{endsWith:s.value},message:s.message}),n.dirty()):s.kind==="datetime"?Vw(s).test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:"datetime",message:s.message}),n.dirty()):s.kind==="date"?CG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:"date",message:s.message}),n.dirty()):s.kind==="time"?RG(s).test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.invalid_string,validation:"time",message:s.message}),n.dirty()):s.kind==="duration"?yG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"duration",code:Be.invalid_string,message:s.message}),n.dirty()):s.kind==="ip"?LG(e.data,s.version)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"ip",code:Be.invalid_string,message:s.message}),n.dirty()):s.kind==="jwt"?PG(e.data,s.alg)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"jwt",code:Be.invalid_string,message:s.message}),n.dirty()):s.kind==="cidr"?IG(e.data,s.version)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"cidr",code:Be.invalid_string,message:s.message}),n.dirty()):s.kind==="base64"?EG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"base64",code:Be.invalid_string,message:s.message}),n.dirty()):s.kind==="base64url"?AG.test(e.data)||(i=this._getOrReturnCtx(e,i),Qe(i,{validation:"base64url",code:Be.invalid_string,message:s.message}),n.dirty()):Xt.assertNever(s);return{status:n.value,value:e.data}}_regex(e,t,n){return this.refinement(i=>e.test(i),{validation:t,code:Be.invalid_string,...lt.errToObj(n)})}_addCheck(e){return new Dr({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...lt.errToObj(e)})}url(e){return this._addCheck({kind:"url",...lt.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...lt.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...lt.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...lt.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...lt.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...lt.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...lt.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...lt.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...lt.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...lt.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...lt.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...lt.errToObj(e)})}datetime(e){var t,n;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof e?.precision>"u"?null:e?.precision,offset:(t=e?.offset)!==null&&t!==void 0?t:!1,local:(n=e?.local)!==null&&n!==void 0?n:!1,...lt.errToObj(e?.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof e?.precision>"u"?null:e?.precision,...lt.errToObj(e?.message)})}duration(e){return this._addCheck({kind:"duration",...lt.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...lt.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t?.position,...lt.errToObj(t?.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...lt.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...lt.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...lt.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...lt.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...lt.errToObj(t)})}nonempty(e){return this.min(1,lt.errToObj(e))}trim(){return new Dr({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Dr({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Dr({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Dr.create=r=>{var e;return new Dr({checks:[],typeName:St.ZodString,coerce:(e=r?.coerce)!==null&&e!==void 0?e:!1,...Dt(r)})};function DG(r,e){const t=(r.toString().split(".")[1]||"").length,n=(e.toString().split(".")[1]||"").length,i=t>n?t:n,s=parseInt(r.toFixed(i).replace(".","")),a=parseInt(e.toFixed(i).replace(".",""));return s%a/Math.pow(10,i)}class ga extends Ft{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==tt.number){const s=this._getOrReturnCtx(e);return Qe(s,{code:Be.invalid_type,expected:tt.number,received:s.parsedType}),wt}let n;const i=new _i;for(const s of this._def.checks)s.kind==="int"?Xt.isInteger(e.data)||(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.invalid_type,expected:"integer",received:"float",message:s.message}),i.dirty()):s.kind==="min"?(s.inclusive?e.data<s.value:e.data<=s.value)&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.too_small,minimum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),i.dirty()):s.kind==="max"?(s.inclusive?e.data>s.value:e.data>=s.value)&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.too_big,maximum:s.value,type:"number",inclusive:s.inclusive,exact:!1,message:s.message}),i.dirty()):s.kind==="multipleOf"?DG(e.data,s.value)!==0&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.not_multiple_of,multipleOf:s.value,message:s.message}),i.dirty()):s.kind==="finite"?Number.isFinite(e.data)||(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.not_finite,message:s.message}),i.dirty()):Xt.assertNever(s);return{status:i.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,lt.toString(t))}gt(e,t){return this.setLimit("min",e,!1,lt.toString(t))}lte(e,t){return this.setLimit("max",e,!0,lt.toString(t))}lt(e,t){return this.setLimit("max",e,!1,lt.toString(t))}setLimit(e,t,n,i){return new ga({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:lt.toString(i)}]})}_addCheck(e){return new ga({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:lt.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:lt.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:lt.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:lt.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:lt.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:lt.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:lt.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:lt.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:lt.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&Xt.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const n of this._def.checks){if(n.kind==="finite"||n.kind==="int"||n.kind==="multipleOf")return!0;n.kind==="min"?(t===null||n.value>t)&&(t=n.value):n.kind==="max"&&(e===null||n.value<e)&&(e=n.value)}return Number.isFinite(t)&&Number.isFinite(e)}}ga.create=r=>new ga({checks:[],typeName:St.ZodNumber,coerce:r?.coerce||!1,...Dt(r)});class va extends Ft{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==tt.bigint)return this._getInvalidInput(e);let n;const i=new _i;for(const s of this._def.checks)s.kind==="min"?(s.inclusive?e.data<s.value:e.data<=s.value)&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.too_small,type:"bigint",minimum:s.value,inclusive:s.inclusive,message:s.message}),i.dirty()):s.kind==="max"?(s.inclusive?e.data>s.value:e.data>=s.value)&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.too_big,type:"bigint",maximum:s.value,inclusive:s.inclusive,message:s.message}),i.dirty()):s.kind==="multipleOf"?e.data%s.value!==BigInt(0)&&(n=this._getOrReturnCtx(e,n),Qe(n,{code:Be.not_multiple_of,multipleOf:s.value,message:s.message}),i.dirty()):Xt.assertNever(s);return{status:i.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return Qe(t,{code:Be.invalid_type,expected:tt.bigint,received:t.parsedType}),wt}gte(e,t){return this.setLimit("min",e,!0,lt.toString(t))}gt(e,t){return this.setLimit("min",e,!1,lt.toString(t))}lte(e,t){return this.setLimit("max",e,!0,lt.toString(t))}lt(e,t){return this.setLimit("max",e,!1,lt.toString(t))}setLimit(e,t,n,i){return new va({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:n,message:lt.toString(i)}]})}_addCheck(e){return new va({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:lt.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:lt.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:lt.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:lt.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:lt.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}va.create=r=>{var e;return new va({checks:[],typeName:St.ZodBigInt,coerce:(e=r?.coerce)!==null&&e!==void 0?e:!1,...Dt(r)})};class Nu extends Ft{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==tt.boolean){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.boolean,received:n.parsedType}),wt}return Di(e.data)}}Nu.create=r=>new Nu({typeName:St.ZodBoolean,coerce:r?.coerce||!1,...Dt(r)});class go extends Ft{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==tt.date){const s=this._getOrReturnCtx(e);return Qe(s,{code:Be.invalid_type,expected:tt.date,received:s.parsedType}),wt}if(isNaN(e.data.getTime())){const s=this._getOrReturnCtx(e);return Qe(s,{code:Be.invalid_date}),wt}const n=new _i;let i;for(const s of this._def.checks)s.kind==="min"?e.data.getTime()<s.value&&(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.too_small,message:s.message,inclusive:!0,exact:!1,minimum:s.value,type:"date"}),n.dirty()):s.kind==="max"?e.data.getTime()>s.value&&(i=this._getOrReturnCtx(e,i),Qe(i,{code:Be.too_big,message:s.message,inclusive:!0,exact:!1,maximum:s.value,type:"date"}),n.dirty()):Xt.assertNever(s);return{status:n.value,value:new Date(e.data.getTime())}}_addCheck(e){return new go({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:lt.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:lt.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}go.create=r=>new go({checks:[],coerce:r?.coerce||!1,typeName:St.ZodDate,...Dt(r)});class jf extends Ft{_parse(e){if(this._getType(e)!==tt.symbol){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.symbol,received:n.parsedType}),wt}return Di(e.data)}}jf.create=r=>new jf({typeName:St.ZodSymbol,...Dt(r)});class Fu extends Ft{_parse(e){if(this._getType(e)!==tt.undefined){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.undefined,received:n.parsedType}),wt}return Di(e.data)}}Fu.create=r=>new Fu({typeName:St.ZodUndefined,...Dt(r)});class Ou extends Ft{_parse(e){if(this._getType(e)!==tt.null){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.null,received:n.parsedType}),wt}return Di(e.data)}}Ou.create=r=>new Ou({typeName:St.ZodNull,...Dt(r)});class $l extends Ft{constructor(){super(...arguments),this._any=!0}_parse(e){return Di(e.data)}}$l.create=r=>new $l({typeName:St.ZodAny,...Dt(r)});class ro extends Ft{constructor(){super(...arguments),this._unknown=!0}_parse(e){return Di(e.data)}}ro.create=r=>new ro({typeName:St.ZodUnknown,...Dt(r)});class Fs extends Ft{_parse(e){const t=this._getOrReturnCtx(e);return Qe(t,{code:Be.invalid_type,expected:tt.never,received:t.parsedType}),wt}}Fs.create=r=>new Fs({typeName:St.ZodNever,...Dt(r)});class Jf extends Ft{_parse(e){if(this._getType(e)!==tt.undefined){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.void,received:n.parsedType}),wt}return Di(e.data)}}Jf.create=r=>new Jf({typeName:St.ZodVoid,...Dt(r)});class Or extends Ft{_parse(e){const{ctx:t,status:n}=this._processInputParams(e),i=this._def;if(t.parsedType!==tt.array)return Qe(t,{code:Be.invalid_type,expected:tt.array,received:t.parsedType}),wt;if(i.exactLength!==null){const a=t.data.length>i.exactLength.value,o=t.data.length<i.exactLength.value;(a||o)&&(Qe(t,{code:a?Be.too_big:Be.too_small,minimum:o?i.exactLength.value:void 0,maximum:a?i.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:i.exactLength.message}),n.dirty())}if(i.minLength!==null&&t.data.length<i.minLength.value&&(Qe(t,{code:Be.too_small,minimum:i.minLength.value,type:"array",inclusive:!0,exact:!1,message:i.minLength.message}),n.dirty()),i.maxLength!==null&&t.data.length>i.maxLength.value&&(Qe(t,{code:Be.too_big,maximum:i.maxLength.value,type:"array",inclusive:!0,exact:!1,message:i.maxLength.message}),n.dirty()),t.common.async)return Promise.all([...t.data].map((a,o)=>i.type._parseAsync(new is(t,a,t.path,o)))).then(a=>_i.mergeArray(n,a));const s=[...t.data].map((a,o)=>i.type._parseSync(new is(t,a,t.path,o)));return _i.mergeArray(n,s)}get element(){return this._def.type}min(e,t){return new Or({...this._def,minLength:{value:e,message:lt.toString(t)}})}max(e,t){return new Or({...this._def,maxLength:{value:e,message:lt.toString(t)}})}length(e,t){return new Or({...this._def,exactLength:{value:e,message:lt.toString(t)}})}nonempty(e){return this.min(1,e)}}Or.create=(r,e)=>new Or({type:r,minLength:null,maxLength:null,exactLength:null,typeName:St.ZodArray,...Dt(e)});function pl(r){if(r instanceof Sn){const e={};for(const t in r.shape){const n=r.shape[t];e[t]=Qr.create(pl(n))}return new Sn({...r._def,shape:()=>e})}else return r instanceof Or?new Or({...r._def,type:pl(r.element)}):r instanceof Qr?Qr.create(pl(r.unwrap())):r instanceof ya?ya.create(pl(r.unwrap())):r instanceof rs?rs.create(r.items.map(e=>pl(e))):r}class Sn extends Ft{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=Xt.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==tt.object){const c=this._getOrReturnCtx(e);return Qe(c,{code:Be.invalid_type,expected:tt.object,received:c.parsedType}),wt}const{status:n,ctx:i}=this._processInputParams(e),{shape:s,keys:a}=this._getCached(),o=[];if(!(this._def.catchall instanceof Fs&&this._def.unknownKeys==="strip"))for(const c in i.data)a.includes(c)||o.push(c);const l=[];for(const c of a){const u=s[c],h=i.data[c];l.push({key:{status:"valid",value:c},value:u._parse(new is(i,h,i.path,c)),alwaysSet:c in i.data})}if(this._def.catchall instanceof Fs){const c=this._def.unknownKeys;if(c==="passthrough")for(const u of o)l.push({key:{status:"valid",value:u},value:{status:"valid",value:i.data[u]}});else if(c==="strict")o.length>0&&(Qe(i,{code:Be.unrecognized_keys,keys:o}),n.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const u of o){const h=i.data[u];l.push({key:{status:"valid",value:u},value:c._parse(new is(i,h,i.path,u)),alwaysSet:u in i.data})}}return i.common.async?Promise.resolve().then(async()=>{const c=[];for(const u of l){const h=await u.key,d=await u.value;c.push({key:h,value:d,alwaysSet:u.alwaysSet})}return c}).then(c=>_i.mergeObjectSync(n,c)):_i.mergeObjectSync(n,l)}get shape(){return this._def.shape()}strict(e){return lt.errToObj,new Sn({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,n)=>{var i,s,a,o;const l=(a=(s=(i=this._def).errorMap)===null||s===void 0?void 0:s.call(i,t,n).message)!==null&&a!==void 0?a:n.defaultError;return t.code==="unrecognized_keys"?{message:(o=lt.errToObj(e).message)!==null&&o!==void 0?o:l}:{message:l}}}:{}})}strip(){return new Sn({...this._def,unknownKeys:"strip"})}passthrough(){return new Sn({...this._def,unknownKeys:"passthrough"})}extend(e){return new Sn({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Sn({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:St.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Sn({...this._def,catchall:e})}pick(e){const t={};return Xt.objectKeys(e).forEach(n=>{e[n]&&this.shape[n]&&(t[n]=this.shape[n])}),new Sn({...this._def,shape:()=>t})}omit(e){const t={};return Xt.objectKeys(this.shape).forEach(n=>{e[n]||(t[n]=this.shape[n])}),new Sn({...this._def,shape:()=>t})}deepPartial(){return pl(this)}partial(e){const t={};return Xt.objectKeys(this.shape).forEach(n=>{const i=this.shape[n];e&&!e[n]?t[n]=i:t[n]=i.optional()}),new Sn({...this._def,shape:()=>t})}required(e){const t={};return Xt.objectKeys(this.shape).forEach(n=>{if(e&&!e[n])t[n]=this.shape[n];else{let s=this.shape[n];for(;s instanceof Qr;)s=s._def.innerType;t[n]=s}}),new Sn({...this._def,shape:()=>t})}keyof(){return Hw(Xt.objectKeys(this.shape))}}Sn.create=(r,e)=>new Sn({shape:()=>r,unknownKeys:"strip",catchall:Fs.create(),typeName:St.ZodObject,...Dt(e)});Sn.strictCreate=(r,e)=>new Sn({shape:()=>r,unknownKeys:"strict",catchall:Fs.create(),typeName:St.ZodObject,...Dt(e)});Sn.lazycreate=(r,e)=>new Sn({shape:r,unknownKeys:"strip",catchall:Fs.create(),typeName:St.ZodObject,...Dt(e)});class Uu extends Ft{_parse(e){const{ctx:t}=this._processInputParams(e),n=this._def.options;function i(s){for(const o of s)if(o.result.status==="valid")return o.result;for(const o of s)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const a=s.map(o=>new sr(o.ctx.common.issues));return Qe(t,{code:Be.invalid_union,unionErrors:a}),wt}if(t.common.async)return Promise.all(n.map(async s=>{const a={...t,common:{...t.common,issues:[]},parent:null};return{result:await s._parseAsync({data:t.data,path:t.path,parent:a}),ctx:a}})).then(i);{let s;const a=[];for(const l of n){const c={...t,common:{...t.common,issues:[]},parent:null},u=l._parseSync({data:t.data,path:t.path,parent:c});if(u.status==="valid")return u;u.status==="dirty"&&!s&&(s={result:u,ctx:c}),c.common.issues.length&&a.push(c.common.issues)}if(s)return t.common.issues.push(...s.ctx.common.issues),s.result;const o=a.map(l=>new sr(l));return Qe(t,{code:Be.invalid_union,unionErrors:o}),wt}}get options(){return this._def.options}}Uu.create=(r,e)=>new Uu({options:r,typeName:St.ZodUnion,...Dt(e)});const _s=r=>r instanceof ku?_s(r.schema):r instanceof zr?_s(r.innerType()):r instanceof Vu?[r.value]:r instanceof _a?r.options:r instanceof Hu?Xt.objectValues(r.enum):r instanceof Gu?_s(r._def.innerType):r instanceof Fu?[void 0]:r instanceof Ou?[null]:r instanceof Qr?[void 0,..._s(r.unwrap())]:r instanceof ya?[null,..._s(r.unwrap())]:r instanceof s0||r instanceof $u?_s(r.unwrap()):r instanceof Wu?_s(r._def.innerType):[];class rm extends Ft{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==tt.object)return Qe(t,{code:Be.invalid_type,expected:tt.object,received:t.parsedType}),wt;const n=this.discriminator,i=t.data[n],s=this.optionsMap.get(i);return s?t.common.async?s._parseAsync({data:t.data,path:t.path,parent:t}):s._parseSync({data:t.data,path:t.path,parent:t}):(Qe(t,{code:Be.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[n]}),wt)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,n){const i=new Map;for(const s of t){const a=_s(s.shape[e]);if(!a.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of a){if(i.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);i.set(o,s)}}return new rm({typeName:St.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:i,...Dt(n)})}}function Rv(r,e){const t=xs(r),n=xs(e);if(r===e)return{valid:!0,data:r};if(t===tt.object&&n===tt.object){const i=Xt.objectKeys(e),s=Xt.objectKeys(r).filter(o=>i.indexOf(o)!==-1),a={...r,...e};for(const o of s){const l=Rv(r[o],e[o]);if(!l.valid)return{valid:!1};a[o]=l.data}return{valid:!0,data:a}}else if(t===tt.array&&n===tt.array){if(r.length!==e.length)return{valid:!1};const i=[];for(let s=0;s<r.length;s++){const a=r[s],o=e[s],l=Rv(a,o);if(!l.valid)return{valid:!1};i.push(l.data)}return{valid:!0,data:i}}else return t===tt.date&&n===tt.date&&+r==+e?{valid:!0,data:r}:{valid:!1}}class Bu extends Ft{_parse(e){const{status:t,ctx:n}=this._processInputParams(e),i=(s,a)=>{if(Av(s)||Av(a))return wt;const o=Rv(s.value,a.value);return o.valid?((Cv(s)||Cv(a))&&t.dirty(),{status:t.value,value:o.data}):(Qe(n,{code:Be.invalid_intersection_types}),wt)};return n.common.async?Promise.all([this._def.left._parseAsync({data:n.data,path:n.path,parent:n}),this._def.right._parseAsync({data:n.data,path:n.path,parent:n})]).then(([s,a])=>i(s,a)):i(this._def.left._parseSync({data:n.data,path:n.path,parent:n}),this._def.right._parseSync({data:n.data,path:n.path,parent:n}))}}Bu.create=(r,e,t)=>new Bu({left:r,right:e,typeName:St.ZodIntersection,...Dt(t)});class rs extends Ft{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==tt.array)return Qe(n,{code:Be.invalid_type,expected:tt.array,received:n.parsedType}),wt;if(n.data.length<this._def.items.length)return Qe(n,{code:Be.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),wt;!this._def.rest&&n.data.length>this._def.items.length&&(Qe(n,{code:Be.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const s=[...n.data].map((a,o)=>{const l=this._def.items[o]||this._def.rest;return l?l._parse(new is(n,a,n.path,o)):null}).filter(a=>!!a);return n.common.async?Promise.all(s).then(a=>_i.mergeArray(t,a)):_i.mergeArray(t,s)}get items(){return this._def.items}rest(e){return new rs({...this._def,rest:e})}}rs.create=(r,e)=>{if(!Array.isArray(r))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new rs({items:r,typeName:St.ZodTuple,rest:null,...Dt(e)})};class zu extends Ft{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==tt.object)return Qe(n,{code:Be.invalid_type,expected:tt.object,received:n.parsedType}),wt;const i=[],s=this._def.keyType,a=this._def.valueType;for(const o in n.data)i.push({key:s._parse(new is(n,o,n.path,o)),value:a._parse(new is(n,n.data[o],n.path,o)),alwaysSet:o in n.data});return n.common.async?_i.mergeObjectAsync(t,i):_i.mergeObjectSync(t,i)}get element(){return this._def.valueType}static create(e,t,n){return t instanceof Ft?new zu({keyType:e,valueType:t,typeName:St.ZodRecord,...Dt(n)}):new zu({keyType:Dr.create(),valueType:e,typeName:St.ZodRecord,...Dt(t)})}}class Kf extends Ft{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==tt.map)return Qe(n,{code:Be.invalid_type,expected:tt.map,received:n.parsedType}),wt;const i=this._def.keyType,s=this._def.valueType,a=[...n.data.entries()].map(([o,l],c)=>({key:i._parse(new is(n,o,n.path,[c,"key"])),value:s._parse(new is(n,l,n.path,[c,"value"]))}));if(n.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const l of a){const c=await l.key,u=await l.value;if(c.status==="aborted"||u.status==="aborted")return wt;(c.status==="dirty"||u.status==="dirty")&&t.dirty(),o.set(c.value,u.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const l of a){const c=l.key,u=l.value;if(c.status==="aborted"||u.status==="aborted")return wt;(c.status==="dirty"||u.status==="dirty")&&t.dirty(),o.set(c.value,u.value)}return{status:t.value,value:o}}}}Kf.create=(r,e,t)=>new Kf({valueType:e,keyType:r,typeName:St.ZodMap,...Dt(t)});class vo extends Ft{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.parsedType!==tt.set)return Qe(n,{code:Be.invalid_type,expected:tt.set,received:n.parsedType}),wt;const i=this._def;i.minSize!==null&&n.data.size<i.minSize.value&&(Qe(n,{code:Be.too_small,minimum:i.minSize.value,type:"set",inclusive:!0,exact:!1,message:i.minSize.message}),t.dirty()),i.maxSize!==null&&n.data.size>i.maxSize.value&&(Qe(n,{code:Be.too_big,maximum:i.maxSize.value,type:"set",inclusive:!0,exact:!1,message:i.maxSize.message}),t.dirty());const s=this._def.valueType;function a(l){const c=new Set;for(const u of l){if(u.status==="aborted")return wt;u.status==="dirty"&&t.dirty(),c.add(u.value)}return{status:t.value,value:c}}const o=[...n.data.values()].map((l,c)=>s._parse(new is(n,l,n.path,c)));return n.common.async?Promise.all(o).then(l=>a(l)):a(o)}min(e,t){return new vo({...this._def,minSize:{value:e,message:lt.toString(t)}})}max(e,t){return new vo({...this._def,maxSize:{value:e,message:lt.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}vo.create=(r,e)=>new vo({valueType:r,minSize:null,maxSize:null,typeName:St.ZodSet,...Dt(e)});class Cl extends Ft{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==tt.function)return Qe(t,{code:Be.invalid_type,expected:tt.function,received:t.parsedType}),wt;function n(o,l){return Zf({data:o,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,qf(),Wl].filter(c=>!!c),issueData:{code:Be.invalid_arguments,argumentsError:l}})}function i(o,l){return Zf({data:o,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,qf(),Wl].filter(c=>!!c),issueData:{code:Be.invalid_return_type,returnTypeError:l}})}const s={errorMap:t.common.contextualErrorMap},a=t.data;if(this._def.returns instanceof Xl){const o=this;return Di(async function(...l){const c=new sr([]),u=await o._def.args.parseAsync(l,s).catch(f=>{throw c.addIssue(n(l,f)),c}),h=await Reflect.apply(a,this,u);return await o._def.returns._def.type.parseAsync(h,s).catch(f=>{throw c.addIssue(i(h,f)),c})})}else{const o=this;return Di(function(...l){const c=o._def.args.safeParse(l,s);if(!c.success)throw new sr([n(l,c.error)]);const u=Reflect.apply(a,this,c.data),h=o._def.returns.safeParse(u,s);if(!h.success)throw new sr([i(u,h.error)]);return h.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new Cl({...this._def,args:rs.create(e).rest(ro.create())})}returns(e){return new Cl({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,n){return new Cl({args:e||rs.create([]).rest(ro.create()),returns:t||ro.create(),typeName:St.ZodFunction,...Dt(n)})}}class ku extends Ft{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}ku.create=(r,e)=>new ku({getter:r,typeName:St.ZodLazy,...Dt(e)});class Vu extends Ft{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return Qe(t,{received:t.data,code:Be.invalid_literal,expected:this._def.value}),wt}return{status:"valid",value:e.data}}get value(){return this._def.value}}Vu.create=(r,e)=>new Vu({value:r,typeName:St.ZodLiteral,...Dt(e)});function Hw(r,e){return new _a({values:r,typeName:St.ZodEnum,...Dt(e)})}class _a extends Ft{constructor(){super(...arguments),Gc.set(this,void 0)}_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),n=this._def.values;return Qe(t,{expected:Xt.joinValues(n),received:t.parsedType,code:Be.invalid_type}),wt}if(Yf(this,Gc)||Bw(this,Gc,new Set(this._def.values)),!Yf(this,Gc).has(e.data)){const t=this._getOrReturnCtx(e),n=this._def.values;return Qe(t,{received:t.data,code:Be.invalid_enum_value,options:n}),wt}return Di(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return _a.create(e,{...this._def,...t})}exclude(e,t=this._def){return _a.create(this.options.filter(n=>!e.includes(n)),{...this._def,...t})}}Gc=new WeakMap;_a.create=Hw;class Hu extends Ft{constructor(){super(...arguments),Wc.set(this,void 0)}_parse(e){const t=Xt.getValidEnumValues(this._def.values),n=this._getOrReturnCtx(e);if(n.parsedType!==tt.string&&n.parsedType!==tt.number){const i=Xt.objectValues(t);return Qe(n,{expected:Xt.joinValues(i),received:n.parsedType,code:Be.invalid_type}),wt}if(Yf(this,Wc)||Bw(this,Wc,new Set(Xt.getValidEnumValues(this._def.values))),!Yf(this,Wc).has(e.data)){const i=Xt.objectValues(t);return Qe(n,{received:n.data,code:Be.invalid_enum_value,options:i}),wt}return Di(e.data)}get enum(){return this._def.values}}Wc=new WeakMap;Hu.create=(r,e)=>new Hu({values:r,typeName:St.ZodNativeEnum,...Dt(e)});class Xl extends Ft{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==tt.promise&&t.common.async===!1)return Qe(t,{code:Be.invalid_type,expected:tt.promise,received:t.parsedType}),wt;const n=t.parsedType===tt.promise?t.data:Promise.resolve(t.data);return Di(n.then(i=>this._def.type.parseAsync(i,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Xl.create=(r,e)=>new Xl({type:r,typeName:St.ZodPromise,...Dt(e)});class zr extends Ft{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===St.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:n}=this._processInputParams(e),i=this._def.effect||null,s={addIssue:a=>{Qe(n,a),a.fatal?t.abort():t.dirty()},get path(){return n.path}};if(s.addIssue=s.addIssue.bind(s),i.type==="preprocess"){const a=i.transform(n.data,s);if(n.common.async)return Promise.resolve(a).then(async o=>{if(t.value==="aborted")return wt;const l=await this._def.schema._parseAsync({data:o,path:n.path,parent:n});return l.status==="aborted"?wt:l.status==="dirty"||t.value==="dirty"?bl(l.value):l});{if(t.value==="aborted")return wt;const o=this._def.schema._parseSync({data:a,path:n.path,parent:n});return o.status==="aborted"?wt:o.status==="dirty"||t.value==="dirty"?bl(o.value):o}}if(i.type==="refinement"){const a=o=>{const l=i.refinement(o,s);if(n.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(n.common.async===!1){const o=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});return o.status==="aborted"?wt:(o.status==="dirty"&&t.dirty(),a(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then(o=>o.status==="aborted"?wt:(o.status==="dirty"&&t.dirty(),a(o.value).then(()=>({status:t.value,value:o.value}))))}if(i.type==="transform")if(n.common.async===!1){const a=this._def.schema._parseSync({data:n.data,path:n.path,parent:n});if(!mo(a))return a;const o=i.transform(a.value,s);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:n.data,path:n.path,parent:n}).then(a=>mo(a)?Promise.resolve(i.transform(a.value,s)).then(o=>({status:t.value,value:o})):a);Xt.assertNever(i)}}zr.create=(r,e,t)=>new zr({schema:r,typeName:St.ZodEffects,effect:e,...Dt(t)});zr.createWithPreprocess=(r,e,t)=>new zr({schema:e,effect:{type:"preprocess",transform:r},typeName:St.ZodEffects,...Dt(t)});class Qr extends Ft{_parse(e){return this._getType(e)===tt.undefined?Di(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Qr.create=(r,e)=>new Qr({innerType:r,typeName:St.ZodOptional,...Dt(e)});class ya extends Ft{_parse(e){return this._getType(e)===tt.null?Di(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}ya.create=(r,e)=>new ya({innerType:r,typeName:St.ZodNullable,...Dt(e)});class Gu extends Ft{_parse(e){const{ctx:t}=this._processInputParams(e);let n=t.data;return t.parsedType===tt.undefined&&(n=this._def.defaultValue()),this._def.innerType._parse({data:n,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Gu.create=(r,e)=>new Gu({innerType:r,typeName:St.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...Dt(e)});class Wu extends Ft{_parse(e){const{ctx:t}=this._processInputParams(e),n={...t,common:{...t.common,issues:[]}},i=this._def.innerType._parse({data:n.data,path:n.path,parent:{...n}});return Du(i)?i.then(s=>({status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new sr(n.common.issues)},input:n.data})})):{status:"valid",value:i.status==="valid"?i.value:this._def.catchValue({get error(){return new sr(n.common.issues)},input:n.data})}}removeCatch(){return this._def.innerType}}Wu.create=(r,e)=>new Wu({innerType:r,typeName:St.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...Dt(e)});class Qf extends Ft{_parse(e){if(this._getType(e)!==tt.nan){const n=this._getOrReturnCtx(e);return Qe(n,{code:Be.invalid_type,expected:tt.nan,received:n.parsedType}),wt}return{status:"valid",value:e.data}}}Qf.create=r=>new Qf({typeName:St.ZodNaN,...Dt(r)});const NG=Symbol("zod_brand");class s0 extends Ft{_parse(e){const{ctx:t}=this._processInputParams(e),n=t.data;return this._def.type._parse({data:n,path:t.path,parent:t})}unwrap(){return this._def.type}}class oh extends Ft{_parse(e){const{status:t,ctx:n}=this._processInputParams(e);if(n.common.async)return(async()=>{const s=await this._def.in._parseAsync({data:n.data,path:n.path,parent:n});return s.status==="aborted"?wt:s.status==="dirty"?(t.dirty(),bl(s.value)):this._def.out._parseAsync({data:s.value,path:n.path,parent:n})})();{const i=this._def.in._parseSync({data:n.data,path:n.path,parent:n});return i.status==="aborted"?wt:i.status==="dirty"?(t.dirty(),{status:"dirty",value:i.value}):this._def.out._parseSync({data:i.value,path:n.path,parent:n})}}static create(e,t){return new oh({in:e,out:t,typeName:St.ZodPipeline})}}class $u extends Ft{_parse(e){const t=this._def.innerType._parse(e),n=i=>(mo(i)&&(i.value=Object.freeze(i.value)),i);return Du(t)?t.then(i=>n(i)):n(t)}unwrap(){return this._def.innerType}}$u.create=(r,e)=>new $u({innerType:r,typeName:St.ZodReadonly,...Dt(e)});function $M(r,e){const t=typeof r=="function"?r(e):typeof r=="string"?{message:r}:r;return typeof t=="string"?{message:t}:t}function Gw(r,e={},t){return r?$l.create().superRefine((n,i)=>{var s,a;const o=r(n);if(o instanceof Promise)return o.then(l=>{var c,u;if(!l){const h=$M(e,n),d=(u=(c=h.fatal)!==null&&c!==void 0?c:t)!==null&&u!==void 0?u:!0;i.addIssue({code:"custom",...h,fatal:d})}});if(!o){const l=$M(e,n),c=(a=(s=l.fatal)!==null&&s!==void 0?s:t)!==null&&a!==void 0?a:!0;i.addIssue({code:"custom",...l,fatal:c})}}):$l.create()}const FG={object:Sn.lazycreate};var St;(function(r){r.ZodString="ZodString",r.ZodNumber="ZodNumber",r.ZodNaN="ZodNaN",r.ZodBigInt="ZodBigInt",r.ZodBoolean="ZodBoolean",r.ZodDate="ZodDate",r.ZodSymbol="ZodSymbol",r.ZodUndefined="ZodUndefined",r.ZodNull="ZodNull",r.ZodAny="ZodAny",r.ZodUnknown="ZodUnknown",r.ZodNever="ZodNever",r.ZodVoid="ZodVoid",r.ZodArray="ZodArray",r.ZodObject="ZodObject",r.ZodUnion="ZodUnion",r.ZodDiscriminatedUnion="ZodDiscriminatedUnion",r.ZodIntersection="ZodIntersection",r.ZodTuple="ZodTuple",r.ZodRecord="ZodRecord",r.ZodMap="ZodMap",r.ZodSet="ZodSet",r.ZodFunction="ZodFunction",r.ZodLazy="ZodLazy",r.ZodLiteral="ZodLiteral",r.ZodEnum="ZodEnum",r.ZodEffects="ZodEffects",r.ZodNativeEnum="ZodNativeEnum",r.ZodOptional="ZodOptional",r.ZodNullable="ZodNullable",r.ZodDefault="ZodDefault",r.ZodCatch="ZodCatch",r.ZodPromise="ZodPromise",r.ZodBranded="ZodBranded",r.ZodPipeline="ZodPipeline",r.ZodReadonly="ZodReadonly"})(St||(St={}));const OG=(r,e={message:`Input not instance of ${r.name}`})=>Gw(t=>t instanceof r,e),Ww=Dr.create,$w=ga.create,UG=Qf.create,BG=va.create,Xw=Nu.create,zG=go.create,kG=jf.create,VG=Fu.create,HG=Ou.create,GG=$l.create,WG=ro.create,$G=Fs.create,XG=Jf.create,qG=Or.create,ZG=Sn.create,YG=Sn.strictCreate,jG=Uu.create,JG=rm.create,KG=Bu.create,QG=rs.create,e5=zu.create,t5=Kf.create,n5=vo.create,i5=Cl.create,r5=ku.create,s5=Vu.create,a5=_a.create,o5=Hu.create,l5=Xl.create,XM=zr.create,c5=Qr.create,u5=ya.create,h5=zr.createWithPreprocess,d5=oh.create,f5=()=>Ww().optional(),p5=()=>$w().optional(),m5=()=>Xw().optional(),g5={string:r=>Dr.create({...r,coerce:!0}),number:r=>ga.create({...r,coerce:!0}),boolean:r=>Nu.create({...r,coerce:!0}),bigint:r=>va.create({...r,coerce:!0}),date:r=>go.create({...r,coerce:!0})},v5=wt;var Oi=Object.freeze({__proto__:null,defaultErrorMap:Wl,setErrorMap:hG,getErrorMap:qf,makeIssue:Zf,EMPTY_PATH:dG,addIssueToContext:Qe,ParseStatus:_i,INVALID:wt,DIRTY:bl,OK:Di,isAborted:Av,isDirty:Cv,isValid:mo,isAsync:Du,get util(){return Xt},get objectUtil(){return Ev},ZodParsedType:tt,getParsedType:xs,ZodType:Ft,datetimeRegex:Vw,ZodString:Dr,ZodNumber:ga,ZodBigInt:va,ZodBoolean:Nu,ZodDate:go,ZodSymbol:jf,ZodUndefined:Fu,ZodNull:Ou,ZodAny:$l,ZodUnknown:ro,ZodNever:Fs,ZodVoid:Jf,ZodArray:Or,ZodObject:Sn,ZodUnion:Uu,ZodDiscriminatedUnion:rm,ZodIntersection:Bu,ZodTuple:rs,ZodRecord:zu,ZodMap:Kf,ZodSet:vo,ZodFunction:Cl,ZodLazy:ku,ZodLiteral:Vu,ZodEnum:_a,ZodNativeEnum:Hu,ZodPromise:Xl,ZodEffects:zr,ZodTransformer:zr,ZodOptional:Qr,ZodNullable:ya,ZodDefault:Gu,ZodCatch:Wu,ZodNaN:Qf,BRAND:NG,ZodBranded:s0,ZodPipeline:oh,ZodReadonly:$u,custom:Gw,Schema:Ft,ZodSchema:Ft,late:FG,get ZodFirstPartyTypeKind(){return St},coerce:g5,any:GG,array:qG,bigint:BG,boolean:Xw,date:zG,discriminatedUnion:JG,effect:XM,enum:a5,function:i5,instanceof:OG,intersection:KG,lazy:r5,literal:s5,map:t5,nan:UG,nativeEnum:o5,never:$G,null:HG,nullable:u5,number:$w,object:ZG,oboolean:m5,onumber:p5,optional:c5,ostring:f5,pipeline:d5,preprocess:h5,promise:l5,record:e5,set:n5,strictObject:YG,string:Ww,symbol:kG,transformer:XM,tuple:QG,undefined:VG,union:jG,unknown:WG,void:XG,NEVER:v5,ZodIssueCode:Be,quotelessJson:uG,ZodError:sr});Oi.object({name:Oi.string(),url:Oi.string().optional(),action:Oi.custom().optional(),position:Oi.tuple([Oi.number(),Oi.number(),Oi.number()]).optional(),type:Oi.enum(["url","download","contact","action","category"]),icon:Oi.string().or(Oi.object({prefix:Oi.string(),name:Oi.string()})).optional(),category:Oi.string().optional()});const qw=async r=>{const{prefix:e,name:t}=typeof r.icon=="string"?{prefix:r.icon.split(":")[0],name:r.icon.split(":")[1]}:r.icon??qM(r.type,r.url||"#");try{console.log(`Fetching icon: ${e}:${t}`);const n=await fetch(`https://api.iconify.design/${e}.json?icons=${t}`,{mode:"cors",headers:{Accept:"application/json"}});if(!n.ok)throw new Error(`Failed to fetch icon: ${n.status}`);const i=await n.json();if(i&&i.icons&&i.icons[t]){const s=i.icons[t];if(s.body)return s.body}throw new Error("Icon not found in response")}catch(n){console.error("Error fetching icon:",n);const i=qM(r.type,r.url||"#");return i.prefix!==e||i.name!==t?qw({type:r.type,url:r.url||"#",name:i.name,icon:`${i.prefix}:${i.name}`}):null}},qM=(r,e)=>r==="download"&&e.endsWith(".pdf")?{prefix:"mdi",name:"file-pdf-box"}:r==="contact"?{prefix:"mdi",name:"card-account-details"}:{prefix:"mdi",name:"link-variant"};var _5=bt("<!> <!>",1),y5=bt("<!> <!>",1),x5=bt("<div></div>"),M5=bt("<div>Loading...</div>"),b5=bt('<div style="width: 100%; height: 100%; color: white;" class="icon-container"><!></div>'),S5=bt('<img width="100%" height="100%" style="object-fit: contain;">'),w5=bt('<div style="width: 100%; height: 100%; color: white;" class="icon-container"><!></div>'),T5=bt("<div><!></div>"),E5=bt("<div> </div>"),A5=bt("<!> <!> <!>",1),C5=bt("<!> <!>",1);function Oc(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(W,"$gltf",t);let s=st(e,"position",19,()=>[0,0,0]),a=st(e,"rotation",19,()=>[0,0,0]);st(e,"scale",19,()=>[40,40,10]);let o=st(e,"columnKey",3,""),l=st(e,"index",3,0),c=st(e,"width",3,4),u=st(e,"height",3,4),h=st(e,"depth",3,.5);st(e,"explodeDistance",3,5);let d=st(e,"explodeDuration",3,1),f=st(e,"resetDelay",3,3e3);st(e,"enableRotation",3,!0);let p=st(e,"autoReset",3,!1),v=st(e,"opacity",3,1);const{url:g="",name:m="",type:_="url",category:x,icon:y,action:b}=e.link||{};function M(se){try{return new URL(se).hostname}catch{return se.replace(/^https?:\/\//,"").split("/")[0]}}const w=xt(()=>M(g)),C={url:"#FFA726",download:"#4CAF50",contact:"#2196F3",urlHover:"#ffffff"};function T(se="url",le=!1){if(le)return C.urlHover;switch(se){case"download":return C.download;case"contact":return C.contact;default:return C.url}}let S=ut(1),R=ut(1),H=ut(1),D=ut(!1);const O=xt(()=>Array.isArray(s())?s():[s(),0,0]),G=xt(()=>Array.isArray(a())?a():[0,a(),0]),P=xt(()=>{if(!E(D))return[1,1,1];const se=c()/E(S),le=u()/E(R),ce=h()/E(H);return[se,le,ce]}),z=xt(()=>E(H)/2+.1),W=Mr("/models/Crate-transformed.glb",{dracoLoader:e.dracoLoader});let X=ut(void 0),re=ut(null),ne=ut(!1),be=ut(!1),_e=ut(!0),$=ut(null),K=ut(1),ge=ut(1);const J=new Eu(1,{stiffness:.1,damping:.4});let ue=xt(()=>J.current),Ce=ut(!1),Ee=ut(!0),Ue=ut(null),xe=ut(!1);function ye(){Ne(Ce,!0)}function N(){Ne(Ce,!1)}nn(()=>{E(Ce)&&!E(ne)?J.set(1.05):E(ne)||J.set(1)}),Ne(re,Ns(()=>{if(!E(X)||!i())return!0;if(E(D))return!1;const se=E(X).scale.clone();E(X).scale.set(1,1,1);const ce=new On().setFromObject(E(X)).getSize(new k);return Ne(S,ce.x,!0),Ne(R,ce.y,!0),Ne(H,ce.z,!0),E(X).scale.copy(se),Ne(D,!0),!1}),!0);let pe=hr(Ns(se=>{if(!E(ne)&&!E(be))return!1;const le=Math.min(1,se/d());return E(be)?le<.5?(Ne(K,le*2),Ne(ge,0)):(Ne(K,1),Ne(_e,!0),Ne(ge,(le-.5)*2)):le<.5?Ne(ge,1-le*2):(Ne(ge,0),Ne(_e,le<.51),Ne(K,1-(le-.5)*2)),i()&&(Za(W,_n(i).materials.Wood.opacity=E(K),_n(i)),Za(W,_n(i).materials.Wood.transparent=!0,_n(i)),Za(W,_n(i).materials.Wood_Light.opacity=E(K),_n(i)),Za(W,_n(i).materials.Wood_Light.transparent=!0,_n(i))),le>=1?(E(be)?(Ne(be,!1),Ne(ne,!1)):p()&&Ne($,setTimeout(()=>{F()},f()),!0),!1):!0}));function ie(){E(ne)||(E($)&&(clearTimeout(E($)),Ne($,null)),Ne(ne,!0),Ne(be,!1),pe&&!pe.started&&pe.start())}function F(){E(ne)&&(E($)&&(clearTimeout(E($)),Ne($,null)),Ne(be,!0),pe&&!pe.started&&pe.start())}function I(se){se.stopPropagation();const le=new k(E(O)[0],E(O)[1]+u()/2,E(O)[2]);e.onLinkClick?.(g,_,le,x,ie)}function oe(se){se.stopPropagation(),ie()}function j(){Ne(xe,!0)}ql(async()=>{try{if(e.link.icon){const se=await qw(e.link);se&&Ne(Ue,se,!0)}}catch(se){console.error("Error loading icon:",se)}finally{Ne(Ee,!1)}}),Gi(()=>{pe&&pe.stop(),E(re)&&E(re).stop(),E($)&&clearTimeout(E($))});var L=Xe(),A=Re(L);const Z=xt(()=>[E(O)[0],E(O)[1],E(O)[2]]),ee=xt(()=>[E(G)[0],E(G)[1],E(G)[2]]),V=xt(()=>`crate-link-${o()}-${l()}`);Fe(A,()=>Le.Group,(se,le)=>{le(se,{get position(){return E(Z)},get rotation(){return E(ee)},get name(){return E(V)},children:(ce,Ie)=>{var Se=C5(),De=Re(Se);const nt=xt(()=>E(D)?[E(P)[0],E(P)[1],E(P)[2]]:[1,1,1]);Fe(De,()=>Le.Group,(ot,pt)=>{pt(ot,{get scale(){return E(nt)},get height(){return u()},get width(){return c()},get depth(){return h()},get ref(){return E(X)},set ref(Pt){Ne(X,Pt,!0)},children:(Pt,Q)=>{var ze=Xe(),Me=Re(ze);_r(Me,()=>W,Te=>{},(Te,We)=>{var $e=_5(),ht=Re($e);const Gt=xt(()=>[E(ue),E(ue),E(ue)]);Fe(ht,()=>Le.Mesh,(U,ae)=>{ae(U,{castShadow:!0,receiveShadow:!0,get geometry(){return E(We).nodes.Cube200.geometry},get material(){return E(We).materials.Wood_Light},get scale(){return E(Gt)},onclick:I,ondblclick:oe,onpointerenter:ye,onpointerleave:N})});var dn=He(ht,2);const et=xt(()=>[E(ue),E(ue),E(ue)]);Fe(dn,()=>Le.Mesh,(U,ae)=>{ae(U,{castShadow:!0,receiveShadow:!0,get geometry(){return E(We).nodes.Cube200_1.geometry},get material(){return E(We).materials.Wood},get scale(){return E(et)}})}),we(Te,$e)},(Te,We)=>{var $e=Xe(),ht=Re($e);const Gt=xt(()=>[E(ue),E(ue),E(ue)]);Fe(ht,()=>Le.Mesh,(dn,et)=>{et(dn,{castShadow:!0,receiveShadow:!0,get scale(){return E(Gt)},onclick:I,ondblclick:oe,onpointerenter:ye,onpointerleave:N,children:(U,ae)=>{var fe=y5(),de=Re(fe);const Ae=xt(()=>[c(),u(),h()]);Fe(de,()=>Le.BoxGeometry,(Tt,ct)=>{ct(Tt,{get args(){return E(Ae)}})});var Ze=He(de,2);const Ve=xt(()=>E(Ce)?C.urlHover:T(_)),mt=xt(()=>T(_)),Ot=xt(()=>E(Ce)?.5:0),dt=xt(()=>E(K)*v());Fe(Ze,()=>Le.MeshStandardMaterial,(Tt,ct)=>{ct(Tt,{get color(){return E(Ve)},get emissive(){return E(mt)},get emissiveIntensity(){return E(Ot)},transparent:!0,get opacity(){return E(dt)}})}),we(U,fe)},$$slots:{default:!0}})}),we(Te,$e)}),we(Pt,ze)},$$slots:{default:!0}})});var Je=He(De,2);{var ke=ot=>{var pt=Xe(),Pt=Re(pt);const Q=xt(()=>[0,0,E(z)]),ze=xt(()=>`crate-content-${o()}-${l()}`);Fe(Pt,()=>Le.Group,(Me,Te)=>{Te(Me,{get position(){return E(Q)},get name(){return E(ze)},children:(We,$e)=>{var ht=A5(),Gt=Re(ht);const dn=xt(()=>[0,u()*.8,0]),et=xt(()=>`crate-title-${o()}-${l()}`);Fe(Gt,()=>Le.Group,(Ze,Ve)=>{Ve(Ze,{get position(){return E(dn)},get name(){return E(et)},children:(mt,Ot)=>{nd(mt,{center:!0,occlude:!1,pointerEvents:"none",visible:!0,children:(dt,Tt)=>{var ct=x5();ct.textContent=m,Bi((zt,bn)=>ws(ct,`color: white; font-size: ${zt??""}px; text-align: center; font-weight: bold; opacity: ${E(ge)*v()}; width: ${bn??""}px;`),[()=>Math.max(12,u()*4),()=>Math.max(80,u()*20)]),we(dt,ct)},$$slots:{default:!0}})},$$slots:{default:!0}})});var U=He(Gt,2);const ae=xt(()=>[0,u()*.5,0]),fe=xt(()=>`crate-icon-${o()}-${l()}`);Fe(U,()=>Le.Group,(Ze,Ve)=>{Ve(Ze,{get position(){return E(ae)},get name(){return E(fe)},children:(mt,Ot)=>{var dt=Xe(),Tt=Re(dt);{var ct=bn=>{nd(bn,{center:!0,occlude:!1,pointerEvents:"none",visible:!0,children:(Rn,li)=>{var Jt=M5();Bi(()=>ws(Jt,`color: white; font-size: 12px; text-align: center; opacity: ${E(ge)*v()};`)),we(Rn,Jt)},$$slots:{default:!0}})},zt=bn=>{nd(bn,{center:!0,occlude:!1,pointerEvents:"none",visible:!0,children:(Rn,li)=>{var Jt=T5(),Wi=Qt(Jt);{var fn=te=>{var me=b5(),ve=Qt(me);h0(ve,()=>`<svg viewBox="0 0 24 24">${E(Ue)}</svg>`),$t(me),we(te,me)},B=(te,me)=>{{var ve=Oe=>{var qe=S5();Bi(()=>{Ms(qe,"src",`https://www.google.com/s2/favicons?domain=${E(w)}&sz=64`),Ms(qe,"alt",E(w))}),FT("error",qe,j),OT(qe),we(Oe,qe)},he=Oe=>{var qe=w5(),it=Qt(qe);h0(it,()=>'<svg viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/></svg>'),$t(qe),we(Oe,qe)};yn(te,Oe=>{_==="url"&&!E(xe)?Oe(ve):Oe(he,!1)},me)}};yn(Wi,te=>{E(Ue)?te(fn):te(B,!1)})}$t(Jt),Bi((te,me)=>ws(Jt,`display: flex; justify-content: center; align-items: center; width: ${te??""}px; height: ${me??""}px; position: relative; opacity: ${E(ge)*v()};`),[()=>Math.max(24,u()*8),()=>Math.max(24,u()*8)]),we(Rn,Jt)},$$slots:{default:!0}})};yn(Tt,bn=>{E(Ee)?bn(ct):bn(zt,!1)})}we(mt,dt)},$$slots:{default:!0}})});var de=He(U,2);{var Ae=Ze=>{var Ve=Xe(),mt=Re(Ve);const Ot=xt(()=>[0,u()*.1,0]);Fe(mt,()=>Le.Group,(dt,Tt)=>{Tt(dt,{get position(){return E(Ot)},children:(ct,zt)=>{nd(ct,{center:!0,occlude:!1,pointerEvents:"none",visible:!0,children:(bn,Rn)=>{var li=E5(),Jt=Qt(li,!0);$t(li),Bi((Wi,fn)=>{ws(li,`color: white; font-size: ${Wi??""}px; text-align: center; opacity: ${E(ge)*v()}; width: ${fn??""}px; overflow: hidden; text-overflow: ellipsis; background: transparent;`),$r(Jt,E(w))},[()=>Math.max(10,u()*3),()=>Math.max(80,u()*20)]),we(bn,li)},$$slots:{default:!0}})},$$slots:{default:!0}})}),we(Ze,Ve)};yn(de,Ze=>{E(w)&&Ze(Ae)})}we(We,ht)},$$slots:{default:!0}})}),we(ot,pt)};yn(Je,ot=>{E(_e)&&ot(ke)})}we(ce,Se)},$$slots:{default:!0}})}),we(r,L);var Y=Cn({explode:ie,reset:F});return n(),Y}var R5=bt("<!> <!>",1),L5=bt("<!> <!> <!>",1);function P5(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(a,"$size",t);let s=st(e,"visible",3,!0);const{size:a}=Sa(),o=Gp(),l=[{id:"personal",name:"Personal",icon:{prefix:"mdi",name:"account"}},{id:"professional",name:"Professional",icon:{prefix:"mdi",name:"briefcase"}}],c=[{id:"projects",name:"Projects",icon:{prefix:"mdi",name:"code-braces"}},{id:"downloads",name:"Downloads",icon:{prefix:"mdi",name:"download"}}],u=[...l,...c];let h=ut(null),d=hr({}),f=ut(!0),p=ut(!1);const v=new to(1,{duration:300,easing:iu}),g=new to(0,{duration:300,easing:iu}),m=new to(0,{duration:300,easing:iu});let _=xt(()=>v.current),x=xt(()=>g.current),y=xt(()=>m.current);const b=new Eu(1,{stiffness:.1,damping:.4});let M=ut(1);nn(()=>{Ne(M,b.current,!0)});const w=e.links;async function C(){for(const K of u)try{const{prefix:ge,name:J}=K.icon,ue=await fetch(`https://api.iconify.design/${ge}.json?icons=${J}`,{mode:"cors",headers:{Accept:"application/json"}});if(!ue.ok){console.error(`Failed to fetch icon for ${K.name}`);continue}const Ce=await ue.json();Ce&&Ce.icons&&Ce.icons[J]&&Ce.icons[J].body&&(d[K.id]=Ce.icons[J].body)}catch(ge){console.error(`Error fetching icon for ${K.name}:`,ge)}}let T=ut(hr([]));nn(()=>{E(h)?Ne(T,w.filter(K=>K.category===E(h)),!0):Ne(T,[],!0)});const S=6;function R(K){if(!e.cameraRef)return 10;const ge=Math.abs(K-e.cameraRef.position.z);return 2*Math.tan(e.cameraRef.fov*Math.PI/180/2)*ge}function H(K){return e.cameraRef?R(K)*(e.cameraRef.aspect||1):10}function D(K){if(!e.cameraRef||K.length===0)return{leftPositions:[],rightPositions:[],linkSize:4};const ge=R(S),J=H(S),ue=Math.ceil(K.length/2),Ce=Math.min(ge*.6/ue,J*.25,2.5),Ee=Math.min(Ce*1.5,ge*.5/ue),Ue=-J*.3,xe=J*.3,ye=K.slice(0,Math.ceil(K.length/2)),N=K.slice(Math.ceil(K.length/2)),pe=[];for(let F=0;F<Math.min(ye.length,ue);F++){const I=ge*.4-F*Ee;pe.push([Ue,I,S])}const ie=[];for(let F=0;F<Math.min(N.length,ue);F++){const I=ge*.4-F*Ee;ie.push([xe,I,S])}return{leftPositions:pe,rightPositions:ie,linkSize:Ce}}let O=ut(hr({leftPositions:[],rightPositions:[],linkSize:4}));async function G(K){E(p)||(Ne(p,!0),Ne(h,K,!0),await v.set(0),Ne(f,!1),await Promise.all([g.set(1),m.set(1)]),Ne(p,!1))}async function P(){E(p)||(Ne(p,!0),await Promise.all([g.set(0),m.set(0)]),Ne(h,null),Ne(f,!0),await v.set(1),Ne(p,!1))}let z=hr({}),W=hr({});function X(){u.forEach(K=>{z[K.id]=new Eu(1,{stiffness:.1,damping:.4}),W[K.id]=1})}nn(()=>{u.forEach(K=>{z[K.id]&&(W[K.id]=z[K.id].current)})});function re(){if(!e.cameraRef)return;const K=R(S),ge=H(S);l.forEach((J,ue)=>{const Ce=K*.5-ue*K*.35;ne[J.id]=[-ge*.3,Ce,S]}),c.forEach((J,ue)=>{const Ce=K*.5-ue*K*.35;ne[J.id]=[ge*.3,Ce,S]})}nn(()=>{!E(f)&&E(T).length>0&&Ne(O,D(E(T)),!0)});let ne=hr({});nn(()=>{e.cameraRef?.aspect,e.cameraRef?.position.z,e.cameraRef?.fov,i()?.width,i()?.height,E(f)?re():E(T).length>0&&Ne(O,D(E(T)),!0)}),ql(async()=>{X(),await C(),re()}),VN();var be=Xe(),_e=Re(be);{var $=K=>{var ge=Xe(),J=Re(ge);{var ue=Ee=>{var Ue=Xe(),xe=Re(Ue);Fe(xe,()=>Le.Group,(ye,N)=>{N(ye,{visible:!0,children:(pe,ie)=>{var F=R5(),I=Re(F);pi(I,17,()=>l,Ei,(j,L,A)=>{const Z=xt(()=>({name:E(L).name,type:"category",icon:E(L).icon,category:E(L).name})),ee=xt(()=>ne[E(L).id]||[-4,2-A*2,S]);Oc(j,{dracoLoader:o,get link(){return E(Z)},get position(){return E(ee)},index:A,columnKey:"left",width:4,height:4,get opacity(){return E(_)},onLinkClick:(V,Y,se,le)=>{e.onLinkClick(V,Y,se,E(L).name,()=>G(E(L).id))}})});var oe=He(I,2);pi(oe,17,()=>c,Ei,(j,L,A)=>{const Z=xt(()=>({name:E(L).name,type:"category",icon:E(L).icon,category:E(L).name})),ee=xt(()=>ne[E(L).id]||[4,2-A*2,S]);Oc(j,{dracoLoader:o,get link(){return E(Z)},get position(){return E(ee)},index:A,columnKey:"right",width:4,height:4,get opacity(){return E(_)},onLinkClick:(V,Y,se,le)=>{e.onLinkClick(V,Y,se,E(L).name,()=>G(E(L).id))}})}),we(pe,F)},$$slots:{default:!0}})}),we(Ee,Ue)},Ce=Ee=>{var Ue=Xe(),xe=Re(Ue);Fe(xe,()=>Le.Group,(ye,N)=>{N(ye,{visible:!0,children:(pe,ie)=>{var F=L5(),I=Re(F);pi(I,17,()=>E(T).slice(0,Math.ceil(E(T).length/2)),Ei,(A,Z,ee)=>{var V=Xe(),Y=Re(V);{var se=le=>{Oc(le,{dracoLoader:o,get link(){return E(Z)},get position(){return E(O).leftPositions[ee]},index:ee,columnKey:"left",get width(){return E(O).linkSize},get height(){return E(O).linkSize},get onLinkClick(){return e.onLinkClick},get opacity(){return E(x)}})};yn(Y,le=>{ee<E(O).leftPositions.length&&le(se)})}we(A,V)});var oe=He(I,2);pi(oe,17,()=>E(T).slice(Math.ceil(E(T).length/2)),Ei,(A,Z,ee)=>{var V=Xe(),Y=Re(V);{var se=le=>{const ce=xt(()=>ee+Math.ceil(E(T).length/2));Oc(le,{dracoLoader:o,get link(){return E(Z)},get position(){return E(O).rightPositions[ee]},get index(){return E(ce)},columnKey:"right",get width(){return E(O).linkSize},get height(){return E(O).linkSize},get onLinkClick(){return e.onLinkClick},get opacity(){return E(x)}})};yn(Y,le=>{ee<E(O).rightPositions.length&&le(se)})}we(A,V)});var j=He(oe,2);const L=xt(()=>[0,R(S)*.1,S+6]);Oc(j,{dracoLoader:o,link:{name:"Back",type:"action",icon:"mdi:arrow-left"},get position(){return E(L)},index:0,columnKey:"bottom",height:2,width:3,get opacity(){return E(y)},onLinkClick:(A,Z,ee,V)=>{e.onLinkClick(A,Z,ee,void 0,P)}}),we(pe,F)},$$slots:{default:!0}})}),we(Ee,Ue)};yn(J,Ee=>{E(f)?Ee(ue):Ee(Ce,!1)})}we(K,ge)};yn(_e,K=>{s()&&K($)})}we(r,be),Cn(),n()}var I5=bt("<!> <!> <!> <!> <!> <!> <!>",1);function D5(r,e){An(e,!0);const[t,n]=Yl(),i=()=>As(s,"$rendererSize",t),{size:s}=Sa();let a=ut(void 0),o=ut(void 0),l=ut(null),c=ut(0),u=ut(!1),h=ut(void 0);const d=1.5,f={x:0,y:7.5,z:15*d},p={x:0,y:5,z:0};let v=0;nn(()=>{if(!E(a)||!i())return;const _e=performance.now();v&&_e-v<200||(!E(h)||Math.abs(i().width-E(h).width)>5||Math.abs(i().height-E(h).height)>5)&&(console.log("Camera aspect updated"),E(a).aspect=i().width/i().height,E(a).updateProjectionMatrix(),Ne(h,{width:i().width,height:i().height},!0),E(u)||Ne(u,!0),v=_e)});const g=10,m=Array(g*2).fill(null).map(()=>new k);function _(_e){return m[_e%m.length]}let x=ut(hr(Array(g).fill(null).map((_e,$)=>({id:$,active:!1,startPosition:_($*2),endPosition:_($*2+1),direction:new k(0,0,1),url:"",type:"url",category:void 0,action:void 0}))));const y=xt(()=>E(x).filter(_e=>_e.active));let b=ut(g),M=ut(!1),w=ut(null),C=ut(null);const T=Ns(()=>{!E(M)||!E(l)||!E(w)||(E(l).rotation.y=E(w).current.y)});T.stop();function S(){Ne(c,.5),e.handleDragonClick&&e.handleDragonClick(),setTimeout(()=>{Ne(c,0)},1e3)}async function R(_e,$,K,ge,J){if(!E(l))return;const ue=E(x).findIndex(I=>!I.active);if(ue===-1){console.log("No available fireball slots");return}const Ce=new Wt;Ce.position.copy(E(l).position),Ce.rotation.copy(E(l).rotation),Ce.lookAt(K);const Ee=Ce.rotation.y;Ne(w,new to({y:E(l).rotation.y},{duration:800,easing:iu}),!0),E(w).set({y:Ee}),Ne(M,!0),T.start(),await new Promise(I=>{Ne(C,{resolve:I},!0),setTimeout(async()=>{await np(),T.stop(),Ne(M,!1),E(C)&&(E(C).resolve(),Ne(C,null)),I()},800)}),E(l).updateMatrixWorld(!0);const Ue=new k(0,3,.5),xe=new k(0,0,1).applyQuaternion(E(l).quaternion),ye=new k(0,1,0).applyQuaternion(E(l).quaternion),N=new k(1,0,0).applyQuaternion(E(l).quaternion),pe=_(0).copy(E(l).position);pe.add(N.multiplyScalar(Ue.x)),pe.add(ye.multiplyScalar(Ue.y)),pe.add(xe.multiplyScalar(Ue.z));const ie=_(1).subVectors(K,pe).normalize(),F=E(x)[ue];F.active=!0,F.id=UT(b),F.startPosition.copy(pe),F.endPosition.copy(K),F.direction.copy(ie),F.url=_e,F.type=$,F.category=ge||void 0,F.action=J,Ne(x,[...E(x)],!0)}function H(_e){try{console.log("Fireball completed with ID:",_e);const $=E(x).find(K=>K.active&&K.id===_e);if($&&e.handleInteract&&e.handleInteract($.category),$){const{url:K,type:ge,action:J}=$;if(J)console.log("Executing action for fireball"),J(),K&&ge!=="category"&&ge!=="action"&&(console.log("Processing URL after action:",K,ge),setTimeout(()=>{const ue=document.createElement("a");ue.href=K,ge==="download"?(ue.download=K.split("/").pop()||"download",document.body.appendChild(ue),ue.click(),document.body.removeChild(ue)):ge==="contact"?(ue.download="contact.vcf",document.body.appendChild(ue),ue.click(),document.body.removeChild(ue)):(console.log("Opening URL in new tab:",K),window.open(K,"_blank"))},100));else if(K){console.log("Processing URL directly:",K,ge);const ue=document.createElement("a");ue.href=K,ge==="download"?(ue.download=K.split("/").pop()||"download",document.body.appendChild(ue),ue.click(),document.body.removeChild(ue)):ge==="contact"?(ue.download="contact.vcf",document.body.appendChild(ue),ue.click(),document.body.removeChild(ue)):(console.log("Opening URL in new tab:",K),window.open(K,"_blank"))}$.active=!1,Ne(x,[...E(x)],!0)}}catch($){console.error("Error in fireball completion handler:",$)}}nn(()=>{console.log("Active category changed:",e.activeCategory)}),Gi(()=>{E(x).forEach(_e=>{_e.active=!1,_e.startPosition.set(0,0,0),_e.endPosition.set(0,0,0),_e.direction.set(0,0,1),_e.url="",_e.category=""})});var D=I5(),O=Re(D);wN(O,{elevation:.5,azimuth:180,exposure:.37,mieCoefficient:.005,mieDirectionalG:.7,turbidity:10,rayleigh:3});var G=He(O,2);const P=xt(()=>i()?i().width/i().height:1),z=xt(()=>[f.x,f.y,f.z]);Fe(G,()=>Le.PerspectiveCamera,(_e,$)=>{$(_e,{makeDefault:!0,fov:60,get aspect(){return E(P)},near:.1,far:200,get position(){return E(z)},oncreate:K=>{K.lookAt(p.x,p.y,p.z)},get ref(){return E(a)},set ref(K){Ne(a,K,!0)},children:(K,ge)=>{IN(K,{get ref(){return E(o)},set ref(J){Ne(o,J,!0)}})},$$slots:{default:!0}})});var W=He(G,2);Fe(W,()=>Le.DirectionalLight,(_e,$)=>{$(_e,{position:[0,100,100],intensity:2,castShadow:!0})});var X=He(W,2);Fe(X,()=>Le.Group,(_e,$)=>{$(_e,{scale:d,children:(K,ge)=>{kF(K,{})},$$slots:{default:!0}})});var re=He(X,2);cF(re,{get dragonEyeGlow(){return E(c)},handleDragonClick:S,initialFacingDirection:0,scale:d,get dragonRef(){return E(l)},set dragonRef(_e){Ne(l,_e,!0)}});var ne=He(re,2);P5(ne,{get links(){return e.links},get cameraRef(){return E(a)},onLinkClick:R,get visible(){return E(u)}});var be=He(ne,2);pi(be,17,()=>E(y),_e=>_e.id,(_e,$)=>{cG(_e,{get id(){return E($).id},get startPosition(){return E($).startPosition},get endPosition(){return E($).endPosition},get direction(){return E($).direction},onComplete:H})}),we(r,D),Cn(),n()}var N5=bt('<div class="absolute bottom-6 left-0 right-0 text-center"><div class="bg-black/40 backdrop-blur-sm py-2 px-4 rounded-lg inline-block max-w-xs mx-auto"><h3 class="text-xs md:text-sm font-semibold text-white capitalize mb-1"> </h3> <p class="text-xs text-white/80"> </p></div></div>'),F5=bt('<a target="_blank" rel="noopener noreferrer" class="bg-gray-600 hover:bg-gray-500 text-white p-2 rounded flex items-center"><span class="flex-1"> </span> <span class="text-xs bg-gray-500 px-2 py-1 rounded"> </span></a>'),O5=bt('<div class="bg-gray-700 p-4 rounded-lg"><h3 class="text-lg font-semibold text-white capitalize mb-2"> </h3> <p class="text-xs text-gray-300 mb-3"> </p> <div class="space-y-2"></div></div>'),U5=(r,e)=>Ne(e,!1),B5=bt('<div class="fixed inset-0 bg-black/80 z-40 flex items-center justify-center pointer-events-auto" aria-label="Keyboard navigation menu"><div class="bg-gray-800 rounded-lg p-6 max-w-2xl w-full"><h2 class="text-xl font-bold text-white mb-4">Keyboard Navigation</h2> <div class="grid grid-cols-1 md:grid-cols-2 gap-6"></div> <button class="mt-6 bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded">Return to 3D View</button></div></div>'),z5=bt('<li><a target="_blank" rel="noopener noreferrer" class="focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:bg-black focus:text-white focus:p-2 focus:rounded svelte-12blglt"> </a></li>'),k5=bt("<div><h3> </h3> <p> </p> <ul></ul></div>"),V5=bt(`<div class="w-screen relative max-w-screen h-screen overflow-hidden bg-gray-900"><!> <div class="absolute inset-0 pointer-events-none"><div class="absolute top-10 left-0 right-0 text-center pointer-events-none z-10"><div class="bg-black/30 backdrop-blur-sm p-3 rounded-lg flex flex-col items-center max-w-2xl mx-auto"><h1 class="text-3xl md:text-5xl font-bold text-white mb-2 text-shadow-lg svelte-12blglt">ZachHandley's Site</h1> <p class="text-sm md:text-lg text-white/90 max-w-xl mx-auto mb-3">Welcome to my interactive portfolio. Click on the crates to explore
          different categories.</p> <div class="mt-1 bg-black/20 p-3 rounded-lg max-w-xl"><p class="text-xs md:text-sm text-white/90 leading-relaxed">I'm Zach Handley, a software engineer, full-stack developer, and AI
            specialist based in Los Angeles. At Black Leaf Digital, I create
            innovative web, mobile, and AI solutions with expertise in Azure and
            GPT integration. As a self-taught developer, I'm passionate about
            solving complex problems and making technology accessible.</p></div></div></div> <div class="absolute top-4 left-0 right-0 text-center"><p class="text-xs md:text-sm text-white/90 bg-black/40 backdrop-blur-sm py-1 px-3 rounded-full inline-block">Click on crates to explore categories</p></div> <!> <!></div> <div class="sr-only svelte-12blglt"><div id="sr-instructions"><h2>Interactive 3D Portfolio Site</h2> <p>Click on crates to explore different categories of links.</p></div> <a href="#sr-links" class="focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:bg-black focus:text-white focus:p-2 focus:rounded svelte-12blglt">Skip to links navigation</a> <nav id="sr-links" aria-label="Accessible navigation"><h2>All Links by Category</h2> <!></nav></div></div>`);function c8(r,e){An(e,!0);let t=ut(0),n=ut(0),i=ut(void 0);const s=hr({personal:"My personal social media accounts where I share my daily life and interests.",professional:"My professional profiles and work portfolio showcasing my expertise in software engineering and AI.",projects:"A collection of my recent work, including web, mobile, and AI projects.",downloads:"Downloadable resources including my resume and contact information."});let a=ut(!1);ql(()=>{window.addEventListener("keydown",y=>{y.key==="Tab"&&Ne(a,!0)}),window.addEventListener("mousedown",()=>{Ne(a,!1)})});function o(){}function l(y){Ne(i,y===void 0?void 0:y,!0)}const c=hr([{name:"GitHub",url:"https://github.com/zachhandley",icon:"simple-icons:github",type:"url",category:"personal"},{name:"LinkedIn",url:"https://linkedin.com/in/zachhandley",icon:"simple-icons:linkedin",type:"url",category:"personal"},{name:"Resume",url:"/files/resume.pdf",icon:"mdi:file-pdf-box",type:"download",category:"downloads"},{name:"Contact",url:"/files/contact.vcf",icon:"mdi:card-account-details",type:"contact",category:"downloads"},{name:"Black Leaf",url:"https://blackleafdigital.com",type:"url",category:"professional"},{name:"Socialaize",url:"https://socialaize.com",type:"url",category:"projects"},{name:"Instagram",icon:"simple-icons:instagram",url:"https://instagram.com/zachhandley",type:"url",category:"personal"},{name:"TikTok",icon:"simple-icons:tiktok",url:"https://tiktok.com/@zachhandley",type:"url",category:"personal"},{name:"Cash App",icon:"simple-icons:cashapp",url:"https://cash.app/$zachhandley",type:"url",category:"personal"},{name:"Server Hosting",url:"https://hetzner.cloud/?ref=qPYPJwLBdFg2",type:"url",category:"professional"},{name:"DraxSocial",url:"https://draxsocial.com",type:"url",category:"projects"},{name:"VibzTalentAgency",url:"https://vibztalentagency.com",type:"url",category:"projects"},{name:"USA Parts & More",url:"https://usapartsandmore.com",type:"url",category:"projects"}]);var u=V5(),h=Qt(u);H3(h,{toneMapping:void 0,children:(y,b)=>{D5(y,{handleDragonClick:o,get links(){return c},handleInteract:l,get activeCategory(){return E(i)}})},$$slots:{default:!0}});var d=He(h,2),f=He(Qt(d),4);{var p=y=>{var b=N5(),M=Qt(b),w=Qt(M),C=Qt(w,!0);$t(w);var T=He(w,2),S=Qt(T,!0);$t(T),$t(M),$t(b),Bi(R=>{$r(C,E(i)),$r(S,R)},[()=>s[E(i).toLowerCase()]||"Explore this category."]),we(y,b)};yn(f,y=>{E(i)&&y(p)})}var v=He(f,2);{var g=y=>{var b=B5(),M=Qt(b),w=He(Qt(M),2);pi(w,21,()=>Object.keys(s),Ei,(T,S)=>{var R=O5(),H=Qt(R),D=Qt(H,!0);$t(H);var O=He(H,2),G=Qt(O,!0);$t(O);var P=He(O,2);pi(P,21,()=>c.filter(z=>z.category===E(S)),Ei,(z,W)=>{var X=F5(),re=Qt(X),ne=Qt(re,!0);$t(re);var be=He(re,2),_e=Qt(be,!0);$t(be),$t(X),Bi(()=>{Ms(X,"href",E(W).url),$r(ne,E(W).name),$r(_e,E(W).type)}),we(z,X)}),$t(P),$t(R),Bi(()=>{$r(D,E(S)),$r(G,s[E(S)])}),we(T,R)}),$t(w);var C=He(w,2);C.__click=[U5,a],$t(M),$t(b),we(y,b)};yn(v,y=>{E(a)&&y(g)})}$t(d);var m=He(d,2),_=He(Qt(m),4),x=He(Qt(_),2);pi(x,17,()=>Object.keys(s),Ei,(y,b)=>{var M=k5(),w=Qt(M),C=Qt(w,!0);$t(w);var T=He(w,2),S=Qt(T,!0);$t(T);var R=He(T,2);pi(R,21,()=>c.filter(H=>H.category===E(b)),Ei,(H,D)=>{var O=z5(),G=Qt(O),P=Qt(G,!0);$t(G),$t(O),Bi(()=>{Ms(G,"href",E(D).url),Ms(G,"aria-label",`${E(D).name} - ${E(D).type==="download"?"Download":"Visit website"}`),$r(P,E(D).name)}),we(H,O)}),$t(R),$t(M),Bi(()=>{Ms(w,"id",`sr-category-${E(b)}`),$r(C,E(b)),$r(S,s[E(b)]),Ms(R,"aria-labelledby",`sr-category-${E(b)}`)}),we(y,M)}),$t(_),$t(m),$t(u),g0("innerWidth",y=>Ne(t,y,!0)),g0("innerHeight",y=>Ne(n,y,!0)),we(r,u),Cn()}eb(["click"]);export{c8 as default};
